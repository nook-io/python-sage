# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class ProfitBreakdown(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'total_cost': 'float',
        'total_sale': 'float',
        'profit': 'float',
        'profit_percentage': 'float'
    }

    attribute_map = {
        'description': 'description',
        'total_cost': 'total_cost',
        'total_sale': 'total_sale',
        'profit': 'profit',
        'profit_percentage': 'profit_percentage'
    }

    def __init__(self, description=None, total_cost=None, total_sale=None, profit=None, profit_percentage=None, local_vars_configuration=None):  # noqa: E501
        """ProfitBreakdown - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._total_cost = None
        self._total_sale = None
        self._profit = None
        self._profit_percentage = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if total_cost is not None:
            self.total_cost = total_cost
        if total_sale is not None:
            self.total_sale = total_sale
        if profit is not None:
            self.profit = profit
        if profit_percentage is not None:
            self.profit_percentage = profit_percentage

    @property
    def description(self):
        """Gets the description of this ProfitBreakdown.  # noqa: E501

        The description  # noqa: E501

        :return: The description of this ProfitBreakdown.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProfitBreakdown.

        The description  # noqa: E501

        :param description: The description of this ProfitBreakdown.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def total_cost(self):
        """Gets the total_cost of this ProfitBreakdown.  # noqa: E501

        The total cost  # noqa: E501

        :return: The total_cost of this ProfitBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._total_cost

    @total_cost.setter
    def total_cost(self, total_cost):
        """Sets the total_cost of this ProfitBreakdown.

        The total cost  # noqa: E501

        :param total_cost: The total_cost of this ProfitBreakdown.  # noqa: E501
        :type: float
        """

        self._total_cost = total_cost

    @property
    def total_sale(self):
        """Gets the total_sale of this ProfitBreakdown.  # noqa: E501

        The total sale  # noqa: E501

        :return: The total_sale of this ProfitBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._total_sale

    @total_sale.setter
    def total_sale(self, total_sale):
        """Sets the total_sale of this ProfitBreakdown.

        The total sale  # noqa: E501

        :param total_sale: The total_sale of this ProfitBreakdown.  # noqa: E501
        :type: float
        """

        self._total_sale = total_sale

    @property
    def profit(self):
        """Gets the profit of this ProfitBreakdown.  # noqa: E501

        The profit amount  # noqa: E501

        :return: The profit of this ProfitBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._profit

    @profit.setter
    def profit(self, profit):
        """Sets the profit of this ProfitBreakdown.

        The profit amount  # noqa: E501

        :param profit: The profit of this ProfitBreakdown.  # noqa: E501
        :type: float
        """

        self._profit = profit

    @property
    def profit_percentage(self):
        """Gets the profit_percentage of this ProfitBreakdown.  # noqa: E501

        The profit percentage  # noqa: E501

        :return: The profit_percentage of this ProfitBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._profit_percentage

    @profit_percentage.setter
    def profit_percentage(self, profit_percentage):
        """Sets the profit_percentage of this ProfitBreakdown.

        The profit percentage  # noqa: E501

        :param profit_percentage: The profit_percentage of this ProfitBreakdown.  # noqa: E501
        :type: float
        """

        self._profit_percentage = profit_percentage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProfitBreakdown):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProfitBreakdown):
            return True

        return self.to_dict() != other.to_dict()
