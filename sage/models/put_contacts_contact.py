# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class PutContactsContact(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'contact_type_ids': 'list[str]',
        'reference': 'str',
        'default_sales_ledger_account_id': 'str',
        'default_sales_tax_rate_id': 'str',
        'default_purchase_ledger_account_id': 'str',
        'tax_number': 'str',
        'notes': 'str',
        'locale': 'str',
        'credit_limit': 'float',
        'credit_days': 'int',
        'credit_terms_and_conditions': 'str',
        'product_sales_price_type_id': 'str',
        'source_guid': 'str',
        'currency_id': 'str',
        'aux_reference': 'str',
        'registered_number': 'str',
        'tax_calculation': 'str',
        'auxiliary_account': 'str',
        'main_address': 'PostBankAccountsBankAccountMainAddress',
        'delivery_address': 'PostBankAccountsBankAccountMainAddress',
        'main_contact_person': 'PostContactsContactMainContactPerson',
        'bank_account_details': 'PutBankAccountsBankAccountBankAccountDetails',
        'tax_treatment': 'PostContactsContactTaxTreatment'
    }

    attribute_map = {
        'name': 'name',
        'contact_type_ids': 'contact_type_ids',
        'reference': 'reference',
        'default_sales_ledger_account_id': 'default_sales_ledger_account_id',
        'default_sales_tax_rate_id': 'default_sales_tax_rate_id',
        'default_purchase_ledger_account_id': 'default_purchase_ledger_account_id',
        'tax_number': 'tax_number',
        'notes': 'notes',
        'locale': 'locale',
        'credit_limit': 'credit_limit',
        'credit_days': 'credit_days',
        'credit_terms_and_conditions': 'credit_terms_and_conditions',
        'product_sales_price_type_id': 'product_sales_price_type_id',
        'source_guid': 'source_guid',
        'currency_id': 'currency_id',
        'aux_reference': 'aux_reference',
        'registered_number': 'registered_number',
        'tax_calculation': 'tax_calculation',
        'auxiliary_account': 'auxiliary_account',
        'main_address': 'main_address',
        'delivery_address': 'delivery_address',
        'main_contact_person': 'main_contact_person',
        'bank_account_details': 'bank_account_details',
        'tax_treatment': 'tax_treatment'
    }

    def __init__(self, name=None, contact_type_ids=None, reference=None, default_sales_ledger_account_id=None, default_sales_tax_rate_id=None, default_purchase_ledger_account_id=None, tax_number=None, notes=None, locale=None, credit_limit=None, credit_days=None, credit_terms_and_conditions=None, product_sales_price_type_id=None, source_guid=None, currency_id=None, aux_reference=None, registered_number=None, tax_calculation=None, auxiliary_account=None, main_address=None, delivery_address=None, main_contact_person=None, bank_account_details=None, tax_treatment=None, local_vars_configuration=None):  # noqa: E501
        """PutContactsContact - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._contact_type_ids = None
        self._reference = None
        self._default_sales_ledger_account_id = None
        self._default_sales_tax_rate_id = None
        self._default_purchase_ledger_account_id = None
        self._tax_number = None
        self._notes = None
        self._locale = None
        self._credit_limit = None
        self._credit_days = None
        self._credit_terms_and_conditions = None
        self._product_sales_price_type_id = None
        self._source_guid = None
        self._currency_id = None
        self._aux_reference = None
        self._registered_number = None
        self._tax_calculation = None
        self._auxiliary_account = None
        self._main_address = None
        self._delivery_address = None
        self._main_contact_person = None
        self._bank_account_details = None
        self._tax_treatment = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if contact_type_ids is not None:
            self.contact_type_ids = contact_type_ids
        if reference is not None:
            self.reference = reference
        if default_sales_ledger_account_id is not None:
            self.default_sales_ledger_account_id = default_sales_ledger_account_id
        if default_sales_tax_rate_id is not None:
            self.default_sales_tax_rate_id = default_sales_tax_rate_id
        if default_purchase_ledger_account_id is not None:
            self.default_purchase_ledger_account_id = default_purchase_ledger_account_id
        if tax_number is not None:
            self.tax_number = tax_number
        if notes is not None:
            self.notes = notes
        if locale is not None:
            self.locale = locale
        if credit_limit is not None:
            self.credit_limit = credit_limit
        if credit_days is not None:
            self.credit_days = credit_days
        if credit_terms_and_conditions is not None:
            self.credit_terms_and_conditions = credit_terms_and_conditions
        if product_sales_price_type_id is not None:
            self.product_sales_price_type_id = product_sales_price_type_id
        if source_guid is not None:
            self.source_guid = source_guid
        if currency_id is not None:
            self.currency_id = currency_id
        if aux_reference is not None:
            self.aux_reference = aux_reference
        if registered_number is not None:
            self.registered_number = registered_number
        if tax_calculation is not None:
            self.tax_calculation = tax_calculation
        if auxiliary_account is not None:
            self.auxiliary_account = auxiliary_account
        if main_address is not None:
            self.main_address = main_address
        if delivery_address is not None:
            self.delivery_address = delivery_address
        if main_contact_person is not None:
            self.main_contact_person = main_contact_person
        if bank_account_details is not None:
            self.bank_account_details = bank_account_details
        if tax_treatment is not None:
            self.tax_treatment = tax_treatment

    @property
    def name(self):
        """Gets the name of this PutContactsContact.  # noqa: E501

        The contact's full name or business name  # noqa: E501

        :return: The name of this PutContactsContact.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PutContactsContact.

        The contact's full name or business name  # noqa: E501

        :param name: The name of this PutContactsContact.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def contact_type_ids(self):
        """Gets the contact_type_ids of this PutContactsContact.  # noqa: E501

        The IDs of the Contact Types.  # noqa: E501

        :return: The contact_type_ids of this PutContactsContact.  # noqa: E501
        :rtype: list[str]
        """
        return self._contact_type_ids

    @contact_type_ids.setter
    def contact_type_ids(self, contact_type_ids):
        """Sets the contact_type_ids of this PutContactsContact.

        The IDs of the Contact Types.  # noqa: E501

        :param contact_type_ids: The contact_type_ids of this PutContactsContact.  # noqa: E501
        :type: list[str]
        """

        self._contact_type_ids = contact_type_ids

    @property
    def reference(self):
        """Gets the reference of this PutContactsContact.  # noqa: E501

        Unique reference for the contact  # noqa: E501

        :return: The reference of this PutContactsContact.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this PutContactsContact.

        Unique reference for the contact  # noqa: E501

        :param reference: The reference of this PutContactsContact.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def default_sales_ledger_account_id(self):
        """Gets the default_sales_ledger_account_id of this PutContactsContact.  # noqa: E501

        The ID of the Default Sales Ledger Account.  # noqa: E501

        :return: The default_sales_ledger_account_id of this PutContactsContact.  # noqa: E501
        :rtype: str
        """
        return self._default_sales_ledger_account_id

    @default_sales_ledger_account_id.setter
    def default_sales_ledger_account_id(self, default_sales_ledger_account_id):
        """Sets the default_sales_ledger_account_id of this PutContactsContact.

        The ID of the Default Sales Ledger Account.  # noqa: E501

        :param default_sales_ledger_account_id: The default_sales_ledger_account_id of this PutContactsContact.  # noqa: E501
        :type: str
        """

        self._default_sales_ledger_account_id = default_sales_ledger_account_id

    @property
    def default_sales_tax_rate_id(self):
        """Gets the default_sales_tax_rate_id of this PutContactsContact.  # noqa: E501

        The ID of the Default Sales Tax Rate.  # noqa: E501

        :return: The default_sales_tax_rate_id of this PutContactsContact.  # noqa: E501
        :rtype: str
        """
        return self._default_sales_tax_rate_id

    @default_sales_tax_rate_id.setter
    def default_sales_tax_rate_id(self, default_sales_tax_rate_id):
        """Sets the default_sales_tax_rate_id of this PutContactsContact.

        The ID of the Default Sales Tax Rate.  # noqa: E501

        :param default_sales_tax_rate_id: The default_sales_tax_rate_id of this PutContactsContact.  # noqa: E501
        :type: str
        """

        self._default_sales_tax_rate_id = default_sales_tax_rate_id

    @property
    def default_purchase_ledger_account_id(self):
        """Gets the default_purchase_ledger_account_id of this PutContactsContact.  # noqa: E501

        The ID of the Default Purchase Ledger Account.  # noqa: E501

        :return: The default_purchase_ledger_account_id of this PutContactsContact.  # noqa: E501
        :rtype: str
        """
        return self._default_purchase_ledger_account_id

    @default_purchase_ledger_account_id.setter
    def default_purchase_ledger_account_id(self, default_purchase_ledger_account_id):
        """Sets the default_purchase_ledger_account_id of this PutContactsContact.

        The ID of the Default Purchase Ledger Account.  # noqa: E501

        :param default_purchase_ledger_account_id: The default_purchase_ledger_account_id of this PutContactsContact.  # noqa: E501
        :type: str
        """

        self._default_purchase_ledger_account_id = default_purchase_ledger_account_id

    @property
    def tax_number(self):
        """Gets the tax_number of this PutContactsContact.  # noqa: E501

        The VAT registration number of the contact. The format will be validated.  # noqa: E501

        :return: The tax_number of this PutContactsContact.  # noqa: E501
        :rtype: str
        """
        return self._tax_number

    @tax_number.setter
    def tax_number(self, tax_number):
        """Sets the tax_number of this PutContactsContact.

        The VAT registration number of the contact. The format will be validated.  # noqa: E501

        :param tax_number: The tax_number of this PutContactsContact.  # noqa: E501
        :type: str
        """

        self._tax_number = tax_number

    @property
    def notes(self):
        """Gets the notes of this PutContactsContact.  # noqa: E501

        The notes for the contact  # noqa: E501

        :return: The notes of this PutContactsContact.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this PutContactsContact.

        The notes for the contact  # noqa: E501

        :param notes: The notes of this PutContactsContact.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def locale(self):
        """Gets the locale of this PutContactsContact.  # noqa: E501

        The locale for the contact  # noqa: E501

        :return: The locale of this PutContactsContact.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this PutContactsContact.

        The locale for the contact  # noqa: E501

        :param locale: The locale of this PutContactsContact.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def credit_limit(self):
        """Gets the credit_limit of this PutContactsContact.  # noqa: E501

        Custom credit limit amount for the contact <br><i>not applicable to Start</i>  # noqa: E501

        :return: The credit_limit of this PutContactsContact.  # noqa: E501
        :rtype: float
        """
        return self._credit_limit

    @credit_limit.setter
    def credit_limit(self, credit_limit):
        """Sets the credit_limit of this PutContactsContact.

        Custom credit limit amount for the contact <br><i>not applicable to Start</i>  # noqa: E501

        :param credit_limit: The credit_limit of this PutContactsContact.  # noqa: E501
        :type: float
        """

        self._credit_limit = credit_limit

    @property
    def credit_days(self):
        """Gets the credit_days of this PutContactsContact.  # noqa: E501

        Custom credit days for the contact.<br> If returned as null in a GET response, you may want to GET /invoice_settings and use 'customer_credit_days'/'vendor_credit_days' as default/fallback according to your use case.   # noqa: E501

        :return: The credit_days of this PutContactsContact.  # noqa: E501
        :rtype: int
        """
        return self._credit_days

    @credit_days.setter
    def credit_days(self, credit_days):
        """Sets the credit_days of this PutContactsContact.

        Custom credit days for the contact.<br> If returned as null in a GET response, you may want to GET /invoice_settings and use 'customer_credit_days'/'vendor_credit_days' as default/fallback according to your use case.   # noqa: E501

        :param credit_days: The credit_days of this PutContactsContact.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                credit_days is not None and credit_days > 365):  # noqa: E501
            raise ValueError("Invalid value for `credit_days`, must be a value less than or equal to `365`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                credit_days is not None and credit_days < 0):  # noqa: E501
            raise ValueError("Invalid value for `credit_days`, must be a value greater than or equal to `0`")  # noqa: E501

        self._credit_days = credit_days

    @property
    def credit_terms_and_conditions(self):
        """Gets the credit_terms_and_conditions of this PutContactsContact.  # noqa: E501

        Custom terms and conditions for the contact. If set will override global /invoice_settings default terms and conditions. <br><i>Customers only</i>   # noqa: E501

        :return: The credit_terms_and_conditions of this PutContactsContact.  # noqa: E501
        :rtype: str
        """
        return self._credit_terms_and_conditions

    @credit_terms_and_conditions.setter
    def credit_terms_and_conditions(self, credit_terms_and_conditions):
        """Sets the credit_terms_and_conditions of this PutContactsContact.

        Custom terms and conditions for the contact. If set will override global /invoice_settings default terms and conditions. <br><i>Customers only</i>   # noqa: E501

        :param credit_terms_and_conditions: The credit_terms_and_conditions of this PutContactsContact.  # noqa: E501
        :type: str
        """

        self._credit_terms_and_conditions = credit_terms_and_conditions

    @property
    def product_sales_price_type_id(self):
        """Gets the product_sales_price_type_id of this PutContactsContact.  # noqa: E501

        The ID of the Product Sales Price Type.  # noqa: E501

        :return: The product_sales_price_type_id of this PutContactsContact.  # noqa: E501
        :rtype: str
        """
        return self._product_sales_price_type_id

    @product_sales_price_type_id.setter
    def product_sales_price_type_id(self, product_sales_price_type_id):
        """Sets the product_sales_price_type_id of this PutContactsContact.

        The ID of the Product Sales Price Type.  # noqa: E501

        :param product_sales_price_type_id: The product_sales_price_type_id of this PutContactsContact.  # noqa: E501
        :type: str
        """

        self._product_sales_price_type_id = product_sales_price_type_id

    @property
    def source_guid(self):
        """Gets the source_guid of this PutContactsContact.  # noqa: E501

        Used when importing contacts from external sources  # noqa: E501

        :return: The source_guid of this PutContactsContact.  # noqa: E501
        :rtype: str
        """
        return self._source_guid

    @source_guid.setter
    def source_guid(self, source_guid):
        """Sets the source_guid of this PutContactsContact.

        Used when importing contacts from external sources  # noqa: E501

        :param source_guid: The source_guid of this PutContactsContact.  # noqa: E501
        :type: str
        """

        self._source_guid = source_guid

    @property
    def currency_id(self):
        """Gets the currency_id of this PutContactsContact.  # noqa: E501

        The ID of the Currency.  # noqa: E501

        :return: The currency_id of this PutContactsContact.  # noqa: E501
        :rtype: str
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """Sets the currency_id of this PutContactsContact.

        The ID of the Currency.  # noqa: E501

        :param currency_id: The currency_id of this PutContactsContact.  # noqa: E501
        :type: str
        """

        self._currency_id = currency_id

    @property
    def aux_reference(self):
        """Gets the aux_reference of this PutContactsContact.  # noqa: E501

        Auxiliary reference. Used for German \"Kreditorennummer\" and \"Debitorennummer\". <br> <a href=\"https://developer.sage.com/api/accounting/api/settings/#tag/Datev-Settings\">   See Datev Settings endpoint reference </a>   # noqa: E501

        :return: The aux_reference of this PutContactsContact.  # noqa: E501
        :rtype: str
        """
        return self._aux_reference

    @aux_reference.setter
    def aux_reference(self, aux_reference):
        """Sets the aux_reference of this PutContactsContact.

        Auxiliary reference. Used for German \"Kreditorennummer\" and \"Debitorennummer\". <br> <a href=\"https://developer.sage.com/api/accounting/api/settings/#tag/Datev-Settings\">   See Datev Settings endpoint reference </a>   # noqa: E501

        :param aux_reference: The aux_reference of this PutContactsContact.  # noqa: E501
        :type: str
        """

        self._aux_reference = aux_reference

    @property
    def registered_number(self):
        """Gets the registered_number of this PutContactsContact.  # noqa: E501

        The registered number of the contact's business. Only used for German businesses and represents the \"Steuernummer\" there (not the \"USt-ID\").  # noqa: E501

        :return: The registered_number of this PutContactsContact.  # noqa: E501
        :rtype: str
        """
        return self._registered_number

    @registered_number.setter
    def registered_number(self, registered_number):
        """Sets the registered_number of this PutContactsContact.

        The registered number of the contact's business. Only used for German businesses and represents the \"Steuernummer\" there (not the \"USt-ID\").  # noqa: E501

        :param registered_number: The registered_number of this PutContactsContact.  # noqa: E501
        :type: str
        """

        self._registered_number = registered_number

    @property
    def tax_calculation(self):
        """Gets the tax_calculation of this PutContactsContact.  # noqa: E501

        <b>France:</b> The tax calculation method used to define tax treatment <i>Vendors only</i> <br> <b>Spain:</b> Defines if contact is a retailer and tax is subject to Recargo de Equivalencia <i>Customers only</i>   # noqa: E501

        :return: The tax_calculation of this PutContactsContact.  # noqa: E501
        :rtype: str
        """
        return self._tax_calculation

    @tax_calculation.setter
    def tax_calculation(self, tax_calculation):
        """Sets the tax_calculation of this PutContactsContact.

        <b>France:</b> The tax calculation method used to define tax treatment <i>Vendors only</i> <br> <b>Spain:</b> Defines if contact is a retailer and tax is subject to Recargo de Equivalencia <i>Customers only</i>   # noqa: E501

        :param tax_calculation: The tax_calculation of this PutContactsContact.  # noqa: E501
        :type: str
        """

        self._tax_calculation = tax_calculation

    @property
    def auxiliary_account(self):
        """Gets the auxiliary_account of this PutContactsContact.  # noqa: E501

        Auxiliary account - used when auxiliary accounting is enabled in business settings. <br><i>Available only in Spain and France</i>   # noqa: E501

        :return: The auxiliary_account of this PutContactsContact.  # noqa: E501
        :rtype: str
        """
        return self._auxiliary_account

    @auxiliary_account.setter
    def auxiliary_account(self, auxiliary_account):
        """Sets the auxiliary_account of this PutContactsContact.

        Auxiliary account - used when auxiliary accounting is enabled in business settings. <br><i>Available only in Spain and France</i>   # noqa: E501

        :param auxiliary_account: The auxiliary_account of this PutContactsContact.  # noqa: E501
        :type: str
        """

        self._auxiliary_account = auxiliary_account

    @property
    def main_address(self):
        """Gets the main_address of this PutContactsContact.  # noqa: E501


        :return: The main_address of this PutContactsContact.  # noqa: E501
        :rtype: PostBankAccountsBankAccountMainAddress
        """
        return self._main_address

    @main_address.setter
    def main_address(self, main_address):
        """Sets the main_address of this PutContactsContact.


        :param main_address: The main_address of this PutContactsContact.  # noqa: E501
        :type: PostBankAccountsBankAccountMainAddress
        """

        self._main_address = main_address

    @property
    def delivery_address(self):
        """Gets the delivery_address of this PutContactsContact.  # noqa: E501


        :return: The delivery_address of this PutContactsContact.  # noqa: E501
        :rtype: PostBankAccountsBankAccountMainAddress
        """
        return self._delivery_address

    @delivery_address.setter
    def delivery_address(self, delivery_address):
        """Sets the delivery_address of this PutContactsContact.


        :param delivery_address: The delivery_address of this PutContactsContact.  # noqa: E501
        :type: PostBankAccountsBankAccountMainAddress
        """

        self._delivery_address = delivery_address

    @property
    def main_contact_person(self):
        """Gets the main_contact_person of this PutContactsContact.  # noqa: E501


        :return: The main_contact_person of this PutContactsContact.  # noqa: E501
        :rtype: PostContactsContactMainContactPerson
        """
        return self._main_contact_person

    @main_contact_person.setter
    def main_contact_person(self, main_contact_person):
        """Sets the main_contact_person of this PutContactsContact.


        :param main_contact_person: The main_contact_person of this PutContactsContact.  # noqa: E501
        :type: PostContactsContactMainContactPerson
        """

        self._main_contact_person = main_contact_person

    @property
    def bank_account_details(self):
        """Gets the bank_account_details of this PutContactsContact.  # noqa: E501


        :return: The bank_account_details of this PutContactsContact.  # noqa: E501
        :rtype: PutBankAccountsBankAccountBankAccountDetails
        """
        return self._bank_account_details

    @bank_account_details.setter
    def bank_account_details(self, bank_account_details):
        """Sets the bank_account_details of this PutContactsContact.


        :param bank_account_details: The bank_account_details of this PutContactsContact.  # noqa: E501
        :type: PutBankAccountsBankAccountBankAccountDetails
        """

        self._bank_account_details = bank_account_details

    @property
    def tax_treatment(self):
        """Gets the tax_treatment of this PutContactsContact.  # noqa: E501


        :return: The tax_treatment of this PutContactsContact.  # noqa: E501
        :rtype: PostContactsContactTaxTreatment
        """
        return self._tax_treatment

    @tax_treatment.setter
    def tax_treatment(self, tax_treatment):
        """Sets the tax_treatment of this PutContactsContact.


        :param tax_treatment: The tax_treatment of this PutContactsContact.  # noqa: E501
        :type: PostContactsContactTaxTreatment
        """

        self._tax_treatment = tax_treatment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PutContactsContact):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PutContactsContact):
            return True

        return self.to_dict() != other.to_dict()
