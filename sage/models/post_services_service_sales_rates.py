# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class PostServicesServiceSalesRates(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'rate_name': 'str',
        'rate': 'float',
        'rate_includes_tax': 'bool',
        'service_rate_type_id': 'str'
    }

    attribute_map = {
        'rate_name': 'rate_name',
        'rate': 'rate',
        'rate_includes_tax': 'rate_includes_tax',
        'service_rate_type_id': 'service_rate_type_id'
    }

    def __init__(self, rate_name=None, rate=None, rate_includes_tax=None, service_rate_type_id=None, local_vars_configuration=None):  # noqa: E501
        """PostServicesServiceSalesRates - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._rate_name = None
        self._rate = None
        self._rate_includes_tax = None
        self._service_rate_type_id = None
        self.discriminator = None

        if rate_name is not None:
            self.rate_name = rate_name
        if rate is not None:
            self.rate = rate
        if rate_includes_tax is not None:
            self.rate_includes_tax = rate_includes_tax
        if service_rate_type_id is not None:
            self.service_rate_type_id = service_rate_type_id

    @property
    def rate_name(self):
        """Gets the rate_name of this PostServicesServiceSalesRates.  # noqa: E501

        The name of the service rate  # noqa: E501

        :return: The rate_name of this PostServicesServiceSalesRates.  # noqa: E501
        :rtype: str
        """
        return self._rate_name

    @rate_name.setter
    def rate_name(self, rate_name):
        """Sets the rate_name of this PostServicesServiceSalesRates.

        The name of the service rate  # noqa: E501

        :param rate_name: The rate_name of this PostServicesServiceSalesRates.  # noqa: E501
        :type: str
        """

        self._rate_name = rate_name

    @property
    def rate(self):
        """Gets the rate of this PostServicesServiceSalesRates.  # noqa: E501

        The rate amount  # noqa: E501

        :return: The rate of this PostServicesServiceSalesRates.  # noqa: E501
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this PostServicesServiceSalesRates.

        The rate amount  # noqa: E501

        :param rate: The rate of this PostServicesServiceSalesRates.  # noqa: E501
        :type: float
        """

        self._rate = rate

    @property
    def rate_includes_tax(self):
        """Gets the rate_includes_tax of this PostServicesServiceSalesRates.  # noqa: E501

        Indicates whether the rate already includes tax  # noqa: E501

        :return: The rate_includes_tax of this PostServicesServiceSalesRates.  # noqa: E501
        :rtype: bool
        """
        return self._rate_includes_tax

    @rate_includes_tax.setter
    def rate_includes_tax(self, rate_includes_tax):
        """Sets the rate_includes_tax of this PostServicesServiceSalesRates.

        Indicates whether the rate already includes tax  # noqa: E501

        :param rate_includes_tax: The rate_includes_tax of this PostServicesServiceSalesRates.  # noqa: E501
        :type: bool
        """

        self._rate_includes_tax = rate_includes_tax

    @property
    def service_rate_type_id(self):
        """Gets the service_rate_type_id of this PostServicesServiceSalesRates.  # noqa: E501

        The ID of the Service Rate Type.  # noqa: E501

        :return: The service_rate_type_id of this PostServicesServiceSalesRates.  # noqa: E501
        :rtype: str
        """
        return self._service_rate_type_id

    @service_rate_type_id.setter
    def service_rate_type_id(self, service_rate_type_id):
        """Sets the service_rate_type_id of this PostServicesServiceSalesRates.

        The ID of the Service Rate Type.  # noqa: E501

        :param service_rate_type_id: The service_rate_type_id of this PostServicesServiceSalesRates.  # noqa: E501
        :type: str
        """

        self._service_rate_type_id = service_rate_type_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostServicesServiceSalesRates):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PostServicesServiceSalesRates):
            return True

        return self.to_dict() != other.to_dict()
