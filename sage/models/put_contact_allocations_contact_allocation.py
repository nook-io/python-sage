# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class PutContactAllocationsContactAllocation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'transaction_type_id': 'str',
        'contact_id': 'str',
        'date': 'date',
        'allocated_artefacts': 'list[PostContactAllocationsContactAllocationAllocatedArtefacts]'
    }

    attribute_map = {
        'transaction_type_id': 'transaction_type_id',
        'contact_id': 'contact_id',
        'date': 'date',
        'allocated_artefacts': 'allocated_artefacts'
    }

    def __init__(self, transaction_type_id=None, contact_id=None, date=None, allocated_artefacts=None, local_vars_configuration=None):  # noqa: E501
        """PutContactAllocationsContactAllocation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._transaction_type_id = None
        self._contact_id = None
        self._date = None
        self._allocated_artefacts = None
        self.discriminator = None

        if transaction_type_id is not None:
            self.transaction_type_id = transaction_type_id
        if contact_id is not None:
            self.contact_id = contact_id
        if date is not None:
            self.date = date
        if allocated_artefacts is not None:
            self.allocated_artefacts = allocated_artefacts

    @property
    def transaction_type_id(self):
        """Gets the transaction_type_id of this PutContactAllocationsContactAllocation.  # noqa: E501

        The transaction type of the allocation  # noqa: E501

        :return: The transaction_type_id of this PutContactAllocationsContactAllocation.  # noqa: E501
        :rtype: str
        """
        return self._transaction_type_id

    @transaction_type_id.setter
    def transaction_type_id(self, transaction_type_id):
        """Sets the transaction_type_id of this PutContactAllocationsContactAllocation.

        The transaction type of the allocation  # noqa: E501

        :param transaction_type_id: The transaction_type_id of this PutContactAllocationsContactAllocation.  # noqa: E501
        :type: str
        """

        self._transaction_type_id = transaction_type_id

    @property
    def contact_id(self):
        """Gets the contact_id of this PutContactAllocationsContactAllocation.  # noqa: E501

        The contact that the allocation relates to  # noqa: E501

        :return: The contact_id of this PutContactAllocationsContactAllocation.  # noqa: E501
        :rtype: str
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this PutContactAllocationsContactAllocation.

        The contact that the allocation relates to  # noqa: E501

        :param contact_id: The contact_id of this PutContactAllocationsContactAllocation.  # noqa: E501
        :type: str
        """

        self._contact_id = contact_id

    @property
    def date(self):
        """Gets the date of this PutContactAllocationsContactAllocation.  # noqa: E501

        The date the allocation was made  # noqa: E501

        :return: The date of this PutContactAllocationsContactAllocation.  # noqa: E501
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this PutContactAllocationsContactAllocation.

        The date the allocation was made  # noqa: E501

        :param date: The date of this PutContactAllocationsContactAllocation.  # noqa: E501
        :type: date
        """

        self._date = date

    @property
    def allocated_artefacts(self):
        """Gets the allocated_artefacts of this PutContactAllocationsContactAllocation.  # noqa: E501


        :return: The allocated_artefacts of this PutContactAllocationsContactAllocation.  # noqa: E501
        :rtype: list[PostContactAllocationsContactAllocationAllocatedArtefacts]
        """
        return self._allocated_artefacts

    @allocated_artefacts.setter
    def allocated_artefacts(self, allocated_artefacts):
        """Sets the allocated_artefacts of this PutContactAllocationsContactAllocation.


        :param allocated_artefacts: The allocated_artefacts of this PutContactAllocationsContactAllocation.  # noqa: E501
        :type: list[PostContactAllocationsContactAllocationAllocatedArtefacts]
        """

        self._allocated_artefacts = allocated_artefacts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PutContactAllocationsContactAllocation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PutContactAllocationsContactAllocation):
            return True

        return self.to_dict() != other.to_dict()
