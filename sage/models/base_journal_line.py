# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class BaseJournalLine(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'ledger_account': 'LedgerAccount',
        'details': 'str',
        'debit': 'float',
        'credit': 'float'
    }

    attribute_map = {
        'id': 'id',
        'ledger_account': 'ledger_account',
        'details': 'details',
        'debit': 'debit',
        'credit': 'credit'
    }

    def __init__(self, id=None, ledger_account=None, details=None, debit=None, credit=None, local_vars_configuration=None):  # noqa: E501
        """BaseJournalLine - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._ledger_account = None
        self._details = None
        self._debit = None
        self._credit = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if ledger_account is not None:
            self.ledger_account = ledger_account
        if details is not None:
            self.details = details
        if debit is not None:
            self.debit = debit
        if credit is not None:
            self.credit = credit

    @property
    def id(self):
        """Gets the id of this BaseJournalLine.  # noqa: E501

        The unique identifier for the item  # noqa: E501

        :return: The id of this BaseJournalLine.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BaseJournalLine.

        The unique identifier for the item  # noqa: E501

        :param id: The id of this BaseJournalLine.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def ledger_account(self):
        """Gets the ledger_account of this BaseJournalLine.  # noqa: E501


        :return: The ledger_account of this BaseJournalLine.  # noqa: E501
        :rtype: LedgerAccount
        """
        return self._ledger_account

    @ledger_account.setter
    def ledger_account(self, ledger_account):
        """Sets the ledger_account of this BaseJournalLine.


        :param ledger_account: The ledger_account of this BaseJournalLine.  # noqa: E501
        :type: LedgerAccount
        """

        self._ledger_account = ledger_account

    @property
    def details(self):
        """Gets the details of this BaseJournalLine.  # noqa: E501

        A description of the journal line  # noqa: E501

        :return: The details of this BaseJournalLine.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this BaseJournalLine.

        A description of the journal line  # noqa: E501

        :param details: The details of this BaseJournalLine.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def debit(self):
        """Gets the debit of this BaseJournalLine.  # noqa: E501

        The debit amount of the journal line  # noqa: E501

        :return: The debit of this BaseJournalLine.  # noqa: E501
        :rtype: float
        """
        return self._debit

    @debit.setter
    def debit(self, debit):
        """Sets the debit of this BaseJournalLine.

        The debit amount of the journal line  # noqa: E501

        :param debit: The debit of this BaseJournalLine.  # noqa: E501
        :type: float
        """

        self._debit = debit

    @property
    def credit(self):
        """Gets the credit of this BaseJournalLine.  # noqa: E501

        The credit amount of the journal line  # noqa: E501

        :return: The credit of this BaseJournalLine.  # noqa: E501
        :rtype: float
        """
        return self._credit

    @credit.setter
    def credit(self, credit):
        """Sets the credit of this BaseJournalLine.

        The credit amount of the journal line  # noqa: E501

        :param credit: The credit of this BaseJournalLine.  # noqa: E501
        :type: float
        """

        self._credit = credit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseJournalLine):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BaseJournalLine):
            return True

        return self.to_dict() != other.to_dict()
