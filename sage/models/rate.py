# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class Rate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'displayed_as': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'rate_name': 'str',
        'rate': 'float',
        'rate_includes_tax': 'bool',
        'service_rate_type': 'Base'
    }

    attribute_map = {
        'id': 'id',
        'displayed_as': 'displayed_as',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'rate_name': 'rate_name',
        'rate': 'rate',
        'rate_includes_tax': 'rate_includes_tax',
        'service_rate_type': 'service_rate_type'
    }

    def __init__(self, id=None, displayed_as=None, created_at=None, updated_at=None, rate_name=None, rate=None, rate_includes_tax=None, service_rate_type=None, local_vars_configuration=None):  # noqa: E501
        """Rate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._displayed_as = None
        self._created_at = None
        self._updated_at = None
        self._rate_name = None
        self._rate = None
        self._rate_includes_tax = None
        self._service_rate_type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if displayed_as is not None:
            self.displayed_as = displayed_as
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if rate_name is not None:
            self.rate_name = rate_name
        if rate is not None:
            self.rate = rate
        if rate_includes_tax is not None:
            self.rate_includes_tax = rate_includes_tax
        if service_rate_type is not None:
            self.service_rate_type = service_rate_type

    @property
    def id(self):
        """Gets the id of this Rate.  # noqa: E501

        The unique identifier for the item  # noqa: E501

        :return: The id of this Rate.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Rate.

        The unique identifier for the item  # noqa: E501

        :param id: The id of this Rate.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def displayed_as(self):
        """Gets the displayed_as of this Rate.  # noqa: E501

        The name of the resource  # noqa: E501

        :return: The displayed_as of this Rate.  # noqa: E501
        :rtype: str
        """
        return self._displayed_as

    @displayed_as.setter
    def displayed_as(self, displayed_as):
        """Sets the displayed_as of this Rate.

        The name of the resource  # noqa: E501

        :param displayed_as: The displayed_as of this Rate.  # noqa: E501
        :type: str
        """

        self._displayed_as = displayed_as

    @property
    def created_at(self):
        """Gets the created_at of this Rate.  # noqa: E501

        The datetime when the item was created  # noqa: E501

        :return: The created_at of this Rate.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Rate.

        The datetime when the item was created  # noqa: E501

        :param created_at: The created_at of this Rate.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Rate.  # noqa: E501

        The datetime when the item was last updated  # noqa: E501

        :return: The updated_at of this Rate.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Rate.

        The datetime when the item was last updated  # noqa: E501

        :param updated_at: The updated_at of this Rate.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def rate_name(self):
        """Gets the rate_name of this Rate.  # noqa: E501

        The name of the service rate  # noqa: E501

        :return: The rate_name of this Rate.  # noqa: E501
        :rtype: str
        """
        return self._rate_name

    @rate_name.setter
    def rate_name(self, rate_name):
        """Sets the rate_name of this Rate.

        The name of the service rate  # noqa: E501

        :param rate_name: The rate_name of this Rate.  # noqa: E501
        :type: str
        """

        self._rate_name = rate_name

    @property
    def rate(self):
        """Gets the rate of this Rate.  # noqa: E501

        The rate amount  # noqa: E501

        :return: The rate of this Rate.  # noqa: E501
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this Rate.

        The rate amount  # noqa: E501

        :param rate: The rate of this Rate.  # noqa: E501
        :type: float
        """

        self._rate = rate

    @property
    def rate_includes_tax(self):
        """Gets the rate_includes_tax of this Rate.  # noqa: E501

        Indicates whether the rate already includes tax  # noqa: E501

        :return: The rate_includes_tax of this Rate.  # noqa: E501
        :rtype: bool
        """
        return self._rate_includes_tax

    @rate_includes_tax.setter
    def rate_includes_tax(self, rate_includes_tax):
        """Sets the rate_includes_tax of this Rate.

        Indicates whether the rate already includes tax  # noqa: E501

        :param rate_includes_tax: The rate_includes_tax of this Rate.  # noqa: E501
        :type: bool
        """

        self._rate_includes_tax = rate_includes_tax

    @property
    def service_rate_type(self):
        """Gets the service_rate_type of this Rate.  # noqa: E501


        :return: The service_rate_type of this Rate.  # noqa: E501
        :rtype: Base
        """
        return self._service_rate_type

    @service_rate_type.setter
    def service_rate_type(self, service_rate_type):
        """Sets the service_rate_type of this Rate.


        :param service_rate_type: The service_rate_type of this Rate.  # noqa: E501
        :type: Base
        """

        self._service_rate_type = service_rate_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Rate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Rate):
            return True

        return self.to_dict() != other.to_dict()
