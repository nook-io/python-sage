# coding: utf-8

"""
    Sage Accounting API - User Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class Subscription(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'displayed_as': 'str',
        'id': 'str',
        'active': 'bool',
        'status': 'str'
    }

    attribute_map = {
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'displayed_as': 'displayed_as',
        'id': 'id',
        'active': 'active',
        'status': 'status'
    }

    def __init__(self, created_at=None, updated_at=None, displayed_as=None, id=None, active=None, status=None, local_vars_configuration=None):  # noqa: E501
        """Subscription - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._created_at = None
        self._updated_at = None
        self._displayed_as = None
        self._id = None
        self._active = None
        self._status = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if displayed_as is not None:
            self.displayed_as = displayed_as
        if id is not None:
            self.id = id
        if active is not None:
            self.active = active
        if status is not None:
            self.status = status

    @property
    def created_at(self):
        """Gets the created_at of this Subscription.  # noqa: E501

        The datetime when the item was created  # noqa: E501

        :return: The created_at of this Subscription.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Subscription.

        The datetime when the item was created  # noqa: E501

        :param created_at: The created_at of this Subscription.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Subscription.  # noqa: E501

        The datetime when the item was last updated  # noqa: E501

        :return: The updated_at of this Subscription.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Subscription.

        The datetime when the item was last updated  # noqa: E501

        :param updated_at: The updated_at of this Subscription.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def displayed_as(self):
        """Gets the displayed_as of this Subscription.  # noqa: E501

        Display text for the item  # noqa: E501

        :return: The displayed_as of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._displayed_as

    @displayed_as.setter
    def displayed_as(self, displayed_as):
        """Sets the displayed_as of this Subscription.

        Display text for the item  # noqa: E501

        :param displayed_as: The displayed_as of this Subscription.  # noqa: E501
        :type: str
        """

        self._displayed_as = displayed_as

    @property
    def id(self):
        """Gets the id of this Subscription.  # noqa: E501

        The unique identifier for the subscription  # noqa: E501

        :return: The id of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Subscription.

        The unique identifier for the subscription  # noqa: E501

        :param id: The id of this Subscription.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def active(self):
        """Gets the active of this Subscription.  # noqa: E501

        Indicates whether the subscription is active  # noqa: E501

        :return: The active of this Subscription.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Subscription.

        Indicates whether the subscription is active  # noqa: E501

        :param active: The active of this Subscription.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def status(self):
        """Gets the status of this Subscription.  # noqa: E501


        :return: The status of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Subscription.


        :param status: The status of this Subscription.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Subscription):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Subscription):
            return True

        return self.to_dict() != other.to_dict()
