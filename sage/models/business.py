# coding: utf-8

"""
    Sage Accounting API - User Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class Business(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'displayed_as': 'str',
        'id': 'str',
        'name': 'str',
        'address_line_1': 'str',
        'address_line_2': 'str',
        'city': 'str',
        'postal_code': 'str',
        'country': 'Country',
        'region': 'str',
        'telephone': 'str',
        'mobile': 'str',
        'website': 'str',
        'is_demo': 'bool',
        'ni_based': 'bool',
        'subscriptions': 'list[Subscription]'
    }

    attribute_map = {
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'displayed_as': 'displayed_as',
        'id': 'id',
        'name': 'name',
        'address_line_1': 'address_line_1',
        'address_line_2': 'address_line_2',
        'city': 'city',
        'postal_code': 'postal_code',
        'country': 'country',
        'region': 'region',
        'telephone': 'telephone',
        'mobile': 'mobile',
        'website': 'website',
        'is_demo': 'is_demo',
        'ni_based': 'ni_based',
        'subscriptions': 'subscriptions'
    }

    def __init__(self, created_at=None, updated_at=None, displayed_as=None, id=None, name=None, address_line_1=None, address_line_2=None, city=None, postal_code=None, country=None, region=None, telephone=None, mobile=None, website=None, is_demo=None, ni_based=None, subscriptions=None, local_vars_configuration=None):  # noqa: E501
        """Business - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._created_at = None
        self._updated_at = None
        self._displayed_as = None
        self._id = None
        self._name = None
        self._address_line_1 = None
        self._address_line_2 = None
        self._city = None
        self._postal_code = None
        self._country = None
        self._region = None
        self._telephone = None
        self._mobile = None
        self._website = None
        self._is_demo = None
        self._ni_based = None
        self._subscriptions = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if displayed_as is not None:
            self.displayed_as = displayed_as
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if address_line_1 is not None:
            self.address_line_1 = address_line_1
        if address_line_2 is not None:
            self.address_line_2 = address_line_2
        if city is not None:
            self.city = city
        if postal_code is not None:
            self.postal_code = postal_code
        if country is not None:
            self.country = country
        if region is not None:
            self.region = region
        if telephone is not None:
            self.telephone = telephone
        if mobile is not None:
            self.mobile = mobile
        if website is not None:
            self.website = website
        if is_demo is not None:
            self.is_demo = is_demo
        if ni_based is not None:
            self.ni_based = ni_based
        if subscriptions is not None:
            self.subscriptions = subscriptions

    @property
    def created_at(self):
        """Gets the created_at of this Business.  # noqa: E501

        The datetime when the item was created  # noqa: E501

        :return: The created_at of this Business.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Business.

        The datetime when the item was created  # noqa: E501

        :param created_at: The created_at of this Business.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Business.  # noqa: E501

        The datetime when the item was last updated  # noqa: E501

        :return: The updated_at of this Business.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Business.

        The datetime when the item was last updated  # noqa: E501

        :param updated_at: The updated_at of this Business.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def displayed_as(self):
        """Gets the displayed_as of this Business.  # noqa: E501

        Display text for the item  # noqa: E501

        :return: The displayed_as of this Business.  # noqa: E501
        :rtype: str
        """
        return self._displayed_as

    @displayed_as.setter
    def displayed_as(self, displayed_as):
        """Sets the displayed_as of this Business.

        Display text for the item  # noqa: E501

        :param displayed_as: The displayed_as of this Business.  # noqa: E501
        :type: str
        """

        self._displayed_as = displayed_as

    @property
    def id(self):
        """Gets the id of this Business.  # noqa: E501

        The unique identifier for the business  # noqa: E501

        :return: The id of this Business.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Business.

        The unique identifier for the business  # noqa: E501

        :param id: The id of this Business.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Business.  # noqa: E501

        The name of the business  # noqa: E501

        :return: The name of this Business.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Business.

        The name of the business  # noqa: E501

        :param name: The name of this Business.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def address_line_1(self):
        """Gets the address_line_1 of this Business.  # noqa: E501

        The first line of the business address  # noqa: E501

        :return: The address_line_1 of this Business.  # noqa: E501
        :rtype: str
        """
        return self._address_line_1

    @address_line_1.setter
    def address_line_1(self, address_line_1):
        """Sets the address_line_1 of this Business.

        The first line of the business address  # noqa: E501

        :param address_line_1: The address_line_1 of this Business.  # noqa: E501
        :type: str
        """

        self._address_line_1 = address_line_1

    @property
    def address_line_2(self):
        """Gets the address_line_2 of this Business.  # noqa: E501

        The first line of the business address  # noqa: E501

        :return: The address_line_2 of this Business.  # noqa: E501
        :rtype: str
        """
        return self._address_line_2

    @address_line_2.setter
    def address_line_2(self, address_line_2):
        """Sets the address_line_2 of this Business.

        The first line of the business address  # noqa: E501

        :param address_line_2: The address_line_2 of this Business.  # noqa: E501
        :type: str
        """

        self._address_line_2 = address_line_2

    @property
    def city(self):
        """Gets the city of this Business.  # noqa: E501

        The business address town/city  # noqa: E501

        :return: The city of this Business.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Business.

        The business address town/city  # noqa: E501

        :param city: The city of this Business.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def postal_code(self):
        """Gets the postal_code of this Business.  # noqa: E501

        The business address postal code/zipcode  # noqa: E501

        :return: The postal_code of this Business.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Business.

        The business address postal code/zipcode  # noqa: E501

        :param postal_code: The postal_code of this Business.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def country(self):
        """Gets the country of this Business.  # noqa: E501


        :return: The country of this Business.  # noqa: E501
        :rtype: Country
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Business.


        :param country: The country of this Business.  # noqa: E501
        :type: Country
        """

        self._country = country

    @property
    def region(self):
        """Gets the region of this Business.  # noqa: E501

        The business address state/province/region  # noqa: E501

        :return: The region of this Business.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Business.

        The business address state/province/region  # noqa: E501

        :param region: The region of this Business.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def telephone(self):
        """Gets the telephone of this Business.  # noqa: E501

        The telephone of the business  # noqa: E501

        :return: The telephone of this Business.  # noqa: E501
        :rtype: str
        """
        return self._telephone

    @telephone.setter
    def telephone(self, telephone):
        """Sets the telephone of this Business.

        The telephone of the business  # noqa: E501

        :param telephone: The telephone of this Business.  # noqa: E501
        :type: str
        """

        self._telephone = telephone

    @property
    def mobile(self):
        """Gets the mobile of this Business.  # noqa: E501

        The mobile of the business  # noqa: E501

        :return: The mobile of this Business.  # noqa: E501
        :rtype: str
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this Business.

        The mobile of the business  # noqa: E501

        :param mobile: The mobile of this Business.  # noqa: E501
        :type: str
        """

        self._mobile = mobile

    @property
    def website(self):
        """Gets the website of this Business.  # noqa: E501

        The website of the business  # noqa: E501

        :return: The website of this Business.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Business.

        The website of the business  # noqa: E501

        :param website: The website of this Business.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def is_demo(self):
        """Gets the is_demo of this Business.  # noqa: E501

        Indicates whether the business is for demo purposes  # noqa: E501

        :return: The is_demo of this Business.  # noqa: E501
        :rtype: bool
        """
        return self._is_demo

    @is_demo.setter
    def is_demo(self, is_demo):
        """Sets the is_demo of this Business.

        Indicates whether the business is for demo purposes  # noqa: E501

        :param is_demo: The is_demo of this Business.  # noqa: E501
        :type: bool
        """

        self._is_demo = is_demo

    @property
    def ni_based(self):
        """Gets the ni_based of this Business.  # noqa: E501

        Identifies a business as being based in Northern Ireland.                   <br><i>only applicable to UK business</i>  # noqa: E501

        :return: The ni_based of this Business.  # noqa: E501
        :rtype: bool
        """
        return self._ni_based

    @ni_based.setter
    def ni_based(self, ni_based):
        """Sets the ni_based of this Business.

        Identifies a business as being based in Northern Ireland.                   <br><i>only applicable to UK business</i>  # noqa: E501

        :param ni_based: The ni_based of this Business.  # noqa: E501
        :type: bool
        """

        self._ni_based = ni_based

    @property
    def subscriptions(self):
        """Gets the subscriptions of this Business.  # noqa: E501

        The business subscriptions  # noqa: E501

        :return: The subscriptions of this Business.  # noqa: E501
        :rtype: list[Subscription]
        """
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        """Sets the subscriptions of this Business.

        The business subscriptions  # noqa: E501

        :param subscriptions: The subscriptions of this Business.  # noqa: E501
        :type: list[Subscription]
        """

        self._subscriptions = subscriptions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Business):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Business):
            return True

        return self.to_dict() != other.to_dict()
