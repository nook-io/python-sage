# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class TaxBreakdown(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'tax_rate': 'Base',
        'percentage': 'float',
        'amount': 'float'
    }

    attribute_map = {
        'tax_rate': 'tax_rate',
        'percentage': 'percentage',
        'amount': 'amount'
    }

    def __init__(self, tax_rate=None, percentage=None, amount=None, local_vars_configuration=None):  # noqa: E501
        """TaxBreakdown - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._tax_rate = None
        self._percentage = None
        self._amount = None
        self.discriminator = None

        if tax_rate is not None:
            self.tax_rate = tax_rate
        if percentage is not None:
            self.percentage = percentage
        if amount is not None:
            self.amount = amount

    @property
    def tax_rate(self):
        """Gets the tax_rate of this TaxBreakdown.  # noqa: E501


        :return: The tax_rate of this TaxBreakdown.  # noqa: E501
        :rtype: Base
        """
        return self._tax_rate

    @tax_rate.setter
    def tax_rate(self, tax_rate):
        """Sets the tax_rate of this TaxBreakdown.


        :param tax_rate: The tax_rate of this TaxBreakdown.  # noqa: E501
        :type: Base
        """

        self._tax_rate = tax_rate

    @property
    def percentage(self):
        """Gets the percentage of this TaxBreakdown.  # noqa: E501

        The tax rate percentage  # noqa: E501

        :return: The percentage of this TaxBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this TaxBreakdown.

        The tax rate percentage  # noqa: E501

        :param percentage: The percentage of this TaxBreakdown.  # noqa: E501
        :type: float
        """

        self._percentage = percentage

    @property
    def amount(self):
        """Gets the amount of this TaxBreakdown.  # noqa: E501

        The tax amount for the given tax rate  # noqa: E501

        :return: The amount of this TaxBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this TaxBreakdown.

        The tax amount for the given tax rate  # noqa: E501

        :param amount: The amount of this TaxBreakdown.  # noqa: E501
        :type: float
        """

        self._amount = amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaxBreakdown):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaxBreakdown):
            return True

        return self.to_dict() != other.to_dict()
