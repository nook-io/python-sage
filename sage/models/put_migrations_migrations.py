# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class PutMigrationsMigrations(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'status_id': 'str',
        'started_at': 'datetime',
        'completed_at': 'datetime',
        'source_product': 'str',
        'source_product_version': 'str',
        'source_license': 'str',
        'source_tool': 'str',
        'source_tool_version': 'str',
        'schema_id': 'str'
    }

    attribute_map = {
        'status_id': 'status_id',
        'started_at': 'started_at',
        'completed_at': 'completed_at',
        'source_product': 'source_product',
        'source_product_version': 'source_product_version',
        'source_license': 'source_license',
        'source_tool': 'source_tool',
        'source_tool_version': 'source_tool_version',
        'schema_id': 'schema_id'
    }

    def __init__(self, status_id=None, started_at=None, completed_at=None, source_product=None, source_product_version=None, source_license=None, source_tool=None, source_tool_version=None, schema_id=None, local_vars_configuration=None):  # noqa: E501
        """PutMigrationsMigrations - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._status_id = None
        self._started_at = None
        self._completed_at = None
        self._source_product = None
        self._source_product_version = None
        self._source_license = None
        self._source_tool = None
        self._source_tool_version = None
        self._schema_id = None
        self.discriminator = None

        if status_id is not None:
            self.status_id = status_id
        if started_at is not None:
            self.started_at = started_at
        if completed_at is not None:
            self.completed_at = completed_at
        if source_product is not None:
            self.source_product = source_product
        if source_product_version is not None:
            self.source_product_version = source_product_version
        if source_license is not None:
            self.source_license = source_license
        if source_tool is not None:
            self.source_tool = source_tool
        if source_tool_version is not None:
            self.source_tool_version = source_tool_version
        if schema_id is not None:
            self.schema_id = schema_id

    @property
    def status_id(self):
        """Gets the status_id of this PutMigrationsMigrations.  # noqa: E501

        The ID of the Status.  # noqa: E501

        :return: The status_id of this PutMigrationsMigrations.  # noqa: E501
        :rtype: str
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """Sets the status_id of this PutMigrationsMigrations.

        The ID of the Status.  # noqa: E501

        :param status_id: The status_id of this PutMigrationsMigrations.  # noqa: E501
        :type: str
        """

        self._status_id = status_id

    @property
    def started_at(self):
        """Gets the started_at of this PutMigrationsMigrations.  # noqa: E501

        The date/time the migration started  # noqa: E501

        :return: The started_at of this PutMigrationsMigrations.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this PutMigrationsMigrations.

        The date/time the migration started  # noqa: E501

        :param started_at: The started_at of this PutMigrationsMigrations.  # noqa: E501
        :type: datetime
        """

        self._started_at = started_at

    @property
    def completed_at(self):
        """Gets the completed_at of this PutMigrationsMigrations.  # noqa: E501

        The date/time the migration completed  # noqa: E501

        :return: The completed_at of this PutMigrationsMigrations.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this PutMigrationsMigrations.

        The date/time the migration completed  # noqa: E501

        :param completed_at: The completed_at of this PutMigrationsMigrations.  # noqa: E501
        :type: datetime
        """

        self._completed_at = completed_at

    @property
    def source_product(self):
        """Gets the source_product of this PutMigrationsMigrations.  # noqa: E501

        The source product for the migration  # noqa: E501

        :return: The source_product of this PutMigrationsMigrations.  # noqa: E501
        :rtype: str
        """
        return self._source_product

    @source_product.setter
    def source_product(self, source_product):
        """Sets the source_product of this PutMigrationsMigrations.

        The source product for the migration  # noqa: E501

        :param source_product: The source_product of this PutMigrationsMigrations.  # noqa: E501
        :type: str
        """

        self._source_product = source_product

    @property
    def source_product_version(self):
        """Gets the source_product_version of this PutMigrationsMigrations.  # noqa: E501

        The source product version for the migration  # noqa: E501

        :return: The source_product_version of this PutMigrationsMigrations.  # noqa: E501
        :rtype: str
        """
        return self._source_product_version

    @source_product_version.setter
    def source_product_version(self, source_product_version):
        """Sets the source_product_version of this PutMigrationsMigrations.

        The source product version for the migration  # noqa: E501

        :param source_product_version: The source_product_version of this PutMigrationsMigrations.  # noqa: E501
        :type: str
        """

        self._source_product_version = source_product_version

    @property
    def source_license(self):
        """Gets the source_license of this PutMigrationsMigrations.  # noqa: E501

        The source product license for the migration  # noqa: E501

        :return: The source_license of this PutMigrationsMigrations.  # noqa: E501
        :rtype: str
        """
        return self._source_license

    @source_license.setter
    def source_license(self, source_license):
        """Sets the source_license of this PutMigrationsMigrations.

        The source product license for the migration  # noqa: E501

        :param source_license: The source_license of this PutMigrationsMigrations.  # noqa: E501
        :type: str
        """

        self._source_license = source_license

    @property
    def source_tool(self):
        """Gets the source_tool of this PutMigrationsMigrations.  # noqa: E501

        The source product extract tool for the migration  # noqa: E501

        :return: The source_tool of this PutMigrationsMigrations.  # noqa: E501
        :rtype: str
        """
        return self._source_tool

    @source_tool.setter
    def source_tool(self, source_tool):
        """Sets the source_tool of this PutMigrationsMigrations.

        The source product extract tool for the migration  # noqa: E501

        :param source_tool: The source_tool of this PutMigrationsMigrations.  # noqa: E501
        :type: str
        """

        self._source_tool = source_tool

    @property
    def source_tool_version(self):
        """Gets the source_tool_version of this PutMigrationsMigrations.  # noqa: E501

        The source product extract tool version for the migration  # noqa: E501

        :return: The source_tool_version of this PutMigrationsMigrations.  # noqa: E501
        :rtype: str
        """
        return self._source_tool_version

    @source_tool_version.setter
    def source_tool_version(self, source_tool_version):
        """Sets the source_tool_version of this PutMigrationsMigrations.

        The source product extract tool version for the migration  # noqa: E501

        :param source_tool_version: The source_tool_version of this PutMigrationsMigrations.  # noqa: E501
        :type: str
        """

        self._source_tool_version = source_tool_version

    @property
    def schema_id(self):
        """Gets the schema_id of this PutMigrationsMigrations.  # noqa: E501

        The schema id used for the migration  # noqa: E501

        :return: The schema_id of this PutMigrationsMigrations.  # noqa: E501
        :rtype: str
        """
        return self._schema_id

    @schema_id.setter
    def schema_id(self, schema_id):
        """Sets the schema_id of this PutMigrationsMigrations.

        The schema id used for the migration  # noqa: E501

        :param schema_id: The schema_id of this PutMigrationsMigrations.  # noqa: E501
        :type: str
        """

        self._schema_id = schema_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PutMigrationsMigrations):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PutMigrationsMigrations):
            return True

        return self.to_dict() != other.to_dict()
