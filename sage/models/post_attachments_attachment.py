# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class PostAttachmentsAttachment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'file': 'str',
        'file_name': 'str',
        'mime_type': 'str',
        'description': 'str',
        'file_extension': 'str',
        'transaction_id': 'str',
        'file_size': 'int',
        'attachment_context_type_id': 'str',
        'attachment_context_id': 'str',
        'is_public': 'bool'
    }

    attribute_map = {
        'file': 'file',
        'file_name': 'file_name',
        'mime_type': 'mime_type',
        'description': 'description',
        'file_extension': 'file_extension',
        'transaction_id': 'transaction_id',
        'file_size': 'file_size',
        'attachment_context_type_id': 'attachment_context_type_id',
        'attachment_context_id': 'attachment_context_id',
        'is_public': 'is_public'
    }

    def __init__(self, file=None, file_name=None, mime_type=None, description=None, file_extension=None, transaction_id=None, file_size=None, attachment_context_type_id=None, attachment_context_id=None, is_public=None, local_vars_configuration=None):  # noqa: E501
        """PostAttachmentsAttachment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._file = None
        self._file_name = None
        self._mime_type = None
        self._description = None
        self._file_extension = None
        self._transaction_id = None
        self._file_size = None
        self._attachment_context_type_id = None
        self._attachment_context_id = None
        self._is_public = None
        self.discriminator = None

        self.file = file
        self.file_name = file_name
        self.mime_type = mime_type
        if description is not None:
            self.description = description
        if file_extension is not None:
            self.file_extension = file_extension
        if transaction_id is not None:
            self.transaction_id = transaction_id
        if file_size is not None:
            self.file_size = file_size
        if attachment_context_type_id is not None:
            self.attachment_context_type_id = attachment_context_type_id
        if attachment_context_id is not None:
            self.attachment_context_id = attachment_context_id
        if is_public is not None:
            self.is_public = is_public

    @property
    def file(self):
        """Gets the file of this PostAttachmentsAttachment.  # noqa: E501

        The base64 encoded representation of the file  # noqa: E501

        :return: The file of this PostAttachmentsAttachment.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this PostAttachmentsAttachment.

        The base64 encoded representation of the file  # noqa: E501

        :param file: The file of this PostAttachmentsAttachment.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and file is None:  # noqa: E501
            raise ValueError("Invalid value for `file`, must not be `None`")  # noqa: E501

        self._file = file

    @property
    def file_name(self):
        """Gets the file_name of this PostAttachmentsAttachment.  # noqa: E501

        The file name of the attachment  # noqa: E501

        :return: The file_name of this PostAttachmentsAttachment.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this PostAttachmentsAttachment.

        The file name of the attachment  # noqa: E501

        :param file_name: The file_name of this PostAttachmentsAttachment.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and file_name is None:  # noqa: E501
            raise ValueError("Invalid value for `file_name`, must not be `None`")  # noqa: E501

        self._file_name = file_name

    @property
    def mime_type(self):
        """Gets the mime_type of this PostAttachmentsAttachment.  # noqa: E501

        The mime type of the attachment  # noqa: E501

        :return: The mime_type of this PostAttachmentsAttachment.  # noqa: E501
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this PostAttachmentsAttachment.

        The mime type of the attachment  # noqa: E501

        :param mime_type: The mime_type of this PostAttachmentsAttachment.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and mime_type is None:  # noqa: E501
            raise ValueError("Invalid value for `mime_type`, must not be `None`")  # noqa: E501

        self._mime_type = mime_type

    @property
    def description(self):
        """Gets the description of this PostAttachmentsAttachment.  # noqa: E501

        The description of the attachment  # noqa: E501

        :return: The description of this PostAttachmentsAttachment.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PostAttachmentsAttachment.

        The description of the attachment  # noqa: E501

        :param description: The description of this PostAttachmentsAttachment.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def file_extension(self):
        """Gets the file_extension of this PostAttachmentsAttachment.  # noqa: E501

        The file extension of the attachment  # noqa: E501

        :return: The file_extension of this PostAttachmentsAttachment.  # noqa: E501
        :rtype: str
        """
        return self._file_extension

    @file_extension.setter
    def file_extension(self, file_extension):
        """Sets the file_extension of this PostAttachmentsAttachment.

        The file extension of the attachment  # noqa: E501

        :param file_extension: The file_extension of this PostAttachmentsAttachment.  # noqa: E501
        :type: str
        """

        self._file_extension = file_extension

    @property
    def transaction_id(self):
        """Gets the transaction_id of this PostAttachmentsAttachment.  # noqa: E501

        The ID of the Transaction.  # noqa: E501

        :return: The transaction_id of this PostAttachmentsAttachment.  # noqa: E501
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this PostAttachmentsAttachment.

        The ID of the Transaction.  # noqa: E501

        :param transaction_id: The transaction_id of this PostAttachmentsAttachment.  # noqa: E501
        :type: str
        """

        self._transaction_id = transaction_id

    @property
    def file_size(self):
        """Gets the file_size of this PostAttachmentsAttachment.  # noqa: E501

        The file size of the attachment in Bytes  # noqa: E501

        :return: The file_size of this PostAttachmentsAttachment.  # noqa: E501
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this PostAttachmentsAttachment.

        The file size of the attachment in Bytes  # noqa: E501

        :param file_size: The file_size of this PostAttachmentsAttachment.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                file_size is not None and file_size > 2621440):  # noqa: E501
            raise ValueError("Invalid value for `file_size`, must be a value less than or equal to `2621440`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                file_size is not None and file_size < 0):  # noqa: E501
            raise ValueError("Invalid value for `file_size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._file_size = file_size

    @property
    def attachment_context_type_id(self):
        """Gets the attachment_context_type_id of this PostAttachmentsAttachment.  # noqa: E501

        The ID of the Attachment Context Type.  # noqa: E501

        :return: The attachment_context_type_id of this PostAttachmentsAttachment.  # noqa: E501
        :rtype: str
        """
        return self._attachment_context_type_id

    @attachment_context_type_id.setter
    def attachment_context_type_id(self, attachment_context_type_id):
        """Sets the attachment_context_type_id of this PostAttachmentsAttachment.

        The ID of the Attachment Context Type.  # noqa: E501

        :param attachment_context_type_id: The attachment_context_type_id of this PostAttachmentsAttachment.  # noqa: E501
        :type: str
        """

        self._attachment_context_type_id = attachment_context_type_id

    @property
    def attachment_context_id(self):
        """Gets the attachment_context_id of this PostAttachmentsAttachment.  # noqa: E501

        The ID of the Attachment Context.  # noqa: E501

        :return: The attachment_context_id of this PostAttachmentsAttachment.  # noqa: E501
        :rtype: str
        """
        return self._attachment_context_id

    @attachment_context_id.setter
    def attachment_context_id(self, attachment_context_id):
        """Sets the attachment_context_id of this PostAttachmentsAttachment.

        The ID of the Attachment Context.  # noqa: E501

        :param attachment_context_id: The attachment_context_id of this PostAttachmentsAttachment.  # noqa: E501
        :type: str
        """

        self._attachment_context_id = attachment_context_id

    @property
    def is_public(self):
        """Gets the is_public of this PostAttachmentsAttachment.  # noqa: E501

        Flag to determine whether the attachment should be visible to customers  # noqa: E501

        :return: The is_public of this PostAttachmentsAttachment.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this PostAttachmentsAttachment.

        Flag to determine whether the attachment should be visible to customers  # noqa: E501

        :param is_public: The is_public of this PostAttachmentsAttachment.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostAttachmentsAttachment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PostAttachmentsAttachment):
            return True

        return self.to_dict() != other.to_dict()
