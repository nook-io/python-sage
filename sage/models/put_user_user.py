# coding: utf-8

"""
    Sage Accounting API - User Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class PutUserUser(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'first_name': 'str',
        'last_name': 'str',
        'initials': 'str',
        'locale': 'str'
    }

    attribute_map = {
        'first_name': 'first_name',
        'last_name': 'last_name',
        'initials': 'initials',
        'locale': 'locale'
    }

    def __init__(self, first_name=None, last_name=None, initials=None, locale=None, local_vars_configuration=None):  # noqa: E501
        """PutUserUser - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._first_name = None
        self._last_name = None
        self._initials = None
        self._locale = None
        self.discriminator = None

        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if initials is not None:
            self.initials = initials
        if locale is not None:
            self.locale = locale

    @property
    def first_name(self):
        """Gets the first_name of this PutUserUser.  # noqa: E501

        The first name of the user  # noqa: E501

        :return: The first_name of this PutUserUser.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this PutUserUser.

        The first name of the user  # noqa: E501

        :param first_name: The first_name of this PutUserUser.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this PutUserUser.  # noqa: E501

        The last name of the user  # noqa: E501

        :return: The last_name of this PutUserUser.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this PutUserUser.

        The last name of the user  # noqa: E501

        :param last_name: The last_name of this PutUserUser.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def initials(self):
        """Gets the initials of this PutUserUser.  # noqa: E501

        The initials of the use  # noqa: E501

        :return: The initials of this PutUserUser.  # noqa: E501
        :rtype: str
        """
        return self._initials

    @initials.setter
    def initials(self, initials):
        """Sets the initials of this PutUserUser.

        The initials of the use  # noqa: E501

        :param initials: The initials of this PutUserUser.  # noqa: E501
        :type: str
        """

        self._initials = initials

    @property
    def locale(self):
        """Gets the locale of this PutUserUser.  # noqa: E501

        The locale of the user  # noqa: E501

        :return: The locale of this PutUserUser.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this PutUserUser.

        The locale of the user  # noqa: E501

        :param locale: The locale of this PutUserUser.  # noqa: E501
        :type: str
        """
        allowed_values = ["en-GB", "en-IE", "en-US", "es-US", "en-CA", "fr-CA", "fr-FR", "de-DE", "es-ES"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and locale not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `locale` ({0}), must be one of {1}"  # noqa: E501
                .format(locale, allowed_values)
            )

        self._locale = locale

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PutUserUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PutUserUser):
            return True

        return self.to_dict() != other.to_dict()
