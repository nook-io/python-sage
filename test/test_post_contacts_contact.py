# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import sage
from sage.models.post_contacts_contact import PostContactsContact  # noqa: E501
from sage.rest import ApiException

class TestPostContactsContact(unittest.TestCase):
    """PostContactsContact unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test PostContactsContact
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = sage.models.post_contacts_contact.PostContactsContact()  # noqa: E501
        if include_optional :
            return PostContactsContact(
                name = '0', 
                contact_type_ids = [
                    '0'
                    ], 
                reference = '0', 
                default_sales_ledger_account_id = '0', 
                default_sales_tax_rate_id = '0', 
                default_purchase_ledger_account_id = '0', 
                tax_number = '0', 
                notes = '0', 
                locale = '0', 
                credit_limit = 1.337, 
                credit_days = 0, 
                credit_terms_and_conditions = '0', 
                product_sales_price_type_id = '0', 
                source_guid = '0', 
                currency_id = '0', 
                aux_reference = '0', 
                registered_number = '0', 
                tax_calculation = '0', 
                auxiliary_account = '0', 
                main_address = sage.models.post_bank_accounts_bank_account_main_address.postBankAccounts_bank_account_main_address(
                    address_line_1 = '0', 
                    address_line_2 = '0', 
                    city = '0', 
                    postal_code = '0', 
                    country_id = '0', 
                    bank_account_id = '0', 
                    contact_id = '0', 
                    address_type_id = '0', 
                    name = '0', 
                    region = '0', 
                    country_group_id = '0', 
                    is_main_address = True, ), 
                delivery_address = sage.models.post_bank_accounts_bank_account_main_address.postBankAccounts_bank_account_main_address(
                    address_line_1 = '0', 
                    address_line_2 = '0', 
                    city = '0', 
                    postal_code = '0', 
                    country_id = '0', 
                    bank_account_id = '0', 
                    contact_id = '0', 
                    address_type_id = '0', 
                    name = '0', 
                    region = '0', 
                    country_group_id = '0', 
                    is_main_address = True, ), 
                main_contact_person = sage.models.post_contacts_contact_main_contact_person.postContacts_contact_main_contact_person(
                    contact_person_type_ids = [
                        '0'
                        ], 
                    name = '0', 
                    job_title = '0', 
                    telephone = '0', 
                    mobile = '0', 
                    email = '0', 
                    fax = '0', 
                    is_main_contact = True, 
                    address_id = '0', 
                    is_preferred_contact = True, ), 
                bank_account_details = sage.models.put_bank_accounts_bank_account_bank_account_details.putBankAccounts_bank_account_bank_account_details(
                    account_name = '0', 
                    account_number = '0', 
                    sort_code = '0', 
                    bic = '0', 
                    iban = '0', ), 
                tax_treatment = sage.models.post_contacts_contact_tax_treatment.postContacts_contact_tax_treatment(
                    home_tax = True, 
                    eu_tax_registered = True, 
                    eu_not_tax_registered = True, 
                    rest_of_world_tax = True, 
                    is_importer = True, )
            )
        else :
            return PostContactsContact(
                name = '0',
                contact_type_ids = [
                    '0'
                    ],
        )

    def testPostContactsContact(self):
        """Test PostContactsContact"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
