# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class SalesArtefactAddress(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'displayed_as': 'str',
        'path': 'str',
        'address_line_1': 'str',
        'address_line_2': 'str',
        'city': 'str',
        'postal_code': 'str',
        'country': 'Base',
        'deleted_at': 'datetime',
        'address_type': 'Base',
        'region': 'str',
        'country_group': 'Base'
    }

    attribute_map = {
        'id': 'id',
        'displayed_as': 'displayed_as',
        'path': '$path',
        'address_line_1': 'address_line_1',
        'address_line_2': 'address_line_2',
        'city': 'city',
        'postal_code': 'postal_code',
        'country': 'country',
        'deleted_at': 'deleted_at',
        'address_type': 'address_type',
        'region': 'region',
        'country_group': 'country_group'
    }

    def __init__(self, id=None, displayed_as=None, path=None, address_line_1=None, address_line_2=None, city=None, postal_code=None, country=None, deleted_at=None, address_type=None, region=None, country_group=None, local_vars_configuration=None):  # noqa: E501
        """SalesArtefactAddress - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._displayed_as = None
        self._path = None
        self._address_line_1 = None
        self._address_line_2 = None
        self._city = None
        self._postal_code = None
        self._country = None
        self._deleted_at = None
        self._address_type = None
        self._region = None
        self._country_group = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if displayed_as is not None:
            self.displayed_as = displayed_as
        if path is not None:
            self.path = path
        if address_line_1 is not None:
            self.address_line_1 = address_line_1
        if address_line_2 is not None:
            self.address_line_2 = address_line_2
        if city is not None:
            self.city = city
        if postal_code is not None:
            self.postal_code = postal_code
        if country is not None:
            self.country = country
        if deleted_at is not None:
            self.deleted_at = deleted_at
        if address_type is not None:
            self.address_type = address_type
        if region is not None:
            self.region = region
        if country_group is not None:
            self.country_group = country_group

    @property
    def id(self):
        """Gets the id of this SalesArtefactAddress.  # noqa: E501

        The unique identifier for the item  # noqa: E501

        :return: The id of this SalesArtefactAddress.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SalesArtefactAddress.

        The unique identifier for the item  # noqa: E501

        :param id: The id of this SalesArtefactAddress.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def displayed_as(self):
        """Gets the displayed_as of this SalesArtefactAddress.  # noqa: E501

        The name of the resource  # noqa: E501

        :return: The displayed_as of this SalesArtefactAddress.  # noqa: E501
        :rtype: str
        """
        return self._displayed_as

    @displayed_as.setter
    def displayed_as(self, displayed_as):
        """Sets the displayed_as of this SalesArtefactAddress.

        The name of the resource  # noqa: E501

        :param displayed_as: The displayed_as of this SalesArtefactAddress.  # noqa: E501
        :type: str
        """

        self._displayed_as = displayed_as

    @property
    def path(self):
        """Gets the path of this SalesArtefactAddress.  # noqa: E501

        The API path for the resource  # noqa: E501

        :return: The path of this SalesArtefactAddress.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this SalesArtefactAddress.

        The API path for the resource  # noqa: E501

        :param path: The path of this SalesArtefactAddress.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def address_line_1(self):
        """Gets the address_line_1 of this SalesArtefactAddress.  # noqa: E501

        The first line of the address  # noqa: E501

        :return: The address_line_1 of this SalesArtefactAddress.  # noqa: E501
        :rtype: str
        """
        return self._address_line_1

    @address_line_1.setter
    def address_line_1(self, address_line_1):
        """Sets the address_line_1 of this SalesArtefactAddress.

        The first line of the address  # noqa: E501

        :param address_line_1: The address_line_1 of this SalesArtefactAddress.  # noqa: E501
        :type: str
        """

        self._address_line_1 = address_line_1

    @property
    def address_line_2(self):
        """Gets the address_line_2 of this SalesArtefactAddress.  # noqa: E501

        The second line of the address  # noqa: E501

        :return: The address_line_2 of this SalesArtefactAddress.  # noqa: E501
        :rtype: str
        """
        return self._address_line_2

    @address_line_2.setter
    def address_line_2(self, address_line_2):
        """Sets the address_line_2 of this SalesArtefactAddress.

        The second line of the address  # noqa: E501

        :param address_line_2: The address_line_2 of this SalesArtefactAddress.  # noqa: E501
        :type: str
        """

        self._address_line_2 = address_line_2

    @property
    def city(self):
        """Gets the city of this SalesArtefactAddress.  # noqa: E501

        The address town/city  # noqa: E501

        :return: The city of this SalesArtefactAddress.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this SalesArtefactAddress.

        The address town/city  # noqa: E501

        :param city: The city of this SalesArtefactAddress.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def postal_code(self):
        """Gets the postal_code of this SalesArtefactAddress.  # noqa: E501

        The address postal code/zipcode  # noqa: E501

        :return: The postal_code of this SalesArtefactAddress.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this SalesArtefactAddress.

        The address postal code/zipcode  # noqa: E501

        :param postal_code: The postal_code of this SalesArtefactAddress.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def country(self):
        """Gets the country of this SalesArtefactAddress.  # noqa: E501


        :return: The country of this SalesArtefactAddress.  # noqa: E501
        :rtype: Base
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this SalesArtefactAddress.


        :param country: The country of this SalesArtefactAddress.  # noqa: E501
        :type: Base
        """

        self._country = country

    @property
    def deleted_at(self):
        """Gets the deleted_at of this SalesArtefactAddress.  # noqa: E501

        The datetime when the item was deleted  # noqa: E501

        :return: The deleted_at of this SalesArtefactAddress.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this SalesArtefactAddress.

        The datetime when the item was deleted  # noqa: E501

        :param deleted_at: The deleted_at of this SalesArtefactAddress.  # noqa: E501
        :type: datetime
        """

        self._deleted_at = deleted_at

    @property
    def address_type(self):
        """Gets the address_type of this SalesArtefactAddress.  # noqa: E501


        :return: The address_type of this SalesArtefactAddress.  # noqa: E501
        :rtype: Base
        """
        return self._address_type

    @address_type.setter
    def address_type(self, address_type):
        """Sets the address_type of this SalesArtefactAddress.


        :param address_type: The address_type of this SalesArtefactAddress.  # noqa: E501
        :type: Base
        """

        self._address_type = address_type

    @property
    def region(self):
        """Gets the region of this SalesArtefactAddress.  # noqa: E501

        The address state/province/region  # noqa: E501

        :return: The region of this SalesArtefactAddress.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this SalesArtefactAddress.

        The address state/province/region  # noqa: E501

        :param region: The region of this SalesArtefactAddress.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def country_group(self):
        """Gets the country_group of this SalesArtefactAddress.  # noqa: E501


        :return: The country_group of this SalesArtefactAddress.  # noqa: E501
        :rtype: Base
        """
        return self._country_group

    @country_group.setter
    def country_group(self, country_group):
        """Sets the country_group of this SalesArtefactAddress.


        :param country_group: The country_group of this SalesArtefactAddress.  # noqa: E501
        :type: Base
        """

        self._country_group = country_group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SalesArtefactAddress):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SalesArtefactAddress):
            return True

        return self.to_dict() != other.to_dict()
