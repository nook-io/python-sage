# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class PostBankDepositsBankDeposit(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'from_bank_account_id': 'str',
        'to_bank_account_id': 'str',
        'date': 'date',
        'reference': 'str',
        'cash_amount': 'float',
        'cheque_amount': 'float',
        'total_amount': 'float'
    }

    attribute_map = {
        'from_bank_account_id': 'from_bank_account_id',
        'to_bank_account_id': 'to_bank_account_id',
        'date': 'date',
        'reference': 'reference',
        'cash_amount': 'cash_amount',
        'cheque_amount': 'cheque_amount',
        'total_amount': 'total_amount'
    }

    def __init__(self, from_bank_account_id=None, to_bank_account_id=None, date=None, reference=None, cash_amount=None, cheque_amount=None, total_amount=None, local_vars_configuration=None):  # noqa: E501
        """PostBankDepositsBankDeposit - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._from_bank_account_id = None
        self._to_bank_account_id = None
        self._date = None
        self._reference = None
        self._cash_amount = None
        self._cheque_amount = None
        self._total_amount = None
        self.discriminator = None

        self.from_bank_account_id = from_bank_account_id
        self.to_bank_account_id = to_bank_account_id
        self.date = date
        self.reference = reference
        self.cash_amount = cash_amount
        if cheque_amount is not None:
            self.cheque_amount = cheque_amount
        if total_amount is not None:
            self.total_amount = total_amount

    @property
    def from_bank_account_id(self):
        """Gets the from_bank_account_id of this PostBankDepositsBankDeposit.  # noqa: E501

        From bank account - money leaves this account  # noqa: E501

        :return: The from_bank_account_id of this PostBankDepositsBankDeposit.  # noqa: E501
        :rtype: str
        """
        return self._from_bank_account_id

    @from_bank_account_id.setter
    def from_bank_account_id(self, from_bank_account_id):
        """Sets the from_bank_account_id of this PostBankDepositsBankDeposit.

        From bank account - money leaves this account  # noqa: E501

        :param from_bank_account_id: The from_bank_account_id of this PostBankDepositsBankDeposit.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and from_bank_account_id is None:  # noqa: E501
            raise ValueError("Invalid value for `from_bank_account_id`, must not be `None`")  # noqa: E501

        self._from_bank_account_id = from_bank_account_id

    @property
    def to_bank_account_id(self):
        """Gets the to_bank_account_id of this PostBankDepositsBankDeposit.  # noqa: E501

        To bank account - money goes into this account  # noqa: E501

        :return: The to_bank_account_id of this PostBankDepositsBankDeposit.  # noqa: E501
        :rtype: str
        """
        return self._to_bank_account_id

    @to_bank_account_id.setter
    def to_bank_account_id(self, to_bank_account_id):
        """Sets the to_bank_account_id of this PostBankDepositsBankDeposit.

        To bank account - money goes into this account  # noqa: E501

        :param to_bank_account_id: The to_bank_account_id of this PostBankDepositsBankDeposit.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and to_bank_account_id is None:  # noqa: E501
            raise ValueError("Invalid value for `to_bank_account_id`, must not be `None`")  # noqa: E501

        self._to_bank_account_id = to_bank_account_id

    @property
    def date(self):
        """Gets the date of this PostBankDepositsBankDeposit.  # noqa: E501

        User generated date of transaction, not necessarily when it was created  # noqa: E501

        :return: The date of this PostBankDepositsBankDeposit.  # noqa: E501
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this PostBankDepositsBankDeposit.

        User generated date of transaction, not necessarily when it was created  # noqa: E501

        :param date: The date of this PostBankDepositsBankDeposit.  # noqa: E501
        :type: date
        """
        if self.local_vars_configuration.client_side_validation and date is None:  # noqa: E501
            raise ValueError("Invalid value for `date`, must not be `None`")  # noqa: E501

        self._date = date

    @property
    def reference(self):
        """Gets the reference of this PostBankDepositsBankDeposit.  # noqa: E501

        Reference  # noqa: E501

        :return: The reference of this PostBankDepositsBankDeposit.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this PostBankDepositsBankDeposit.

        Reference  # noqa: E501

        :param reference: The reference of this PostBankDepositsBankDeposit.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and reference is None:  # noqa: E501
            raise ValueError("Invalid value for `reference`, must not be `None`")  # noqa: E501

        self._reference = reference

    @property
    def cash_amount(self):
        """Gets the cash_amount of this PostBankDepositsBankDeposit.  # noqa: E501

        Cash total in the deposit  # noqa: E501

        :return: The cash_amount of this PostBankDepositsBankDeposit.  # noqa: E501
        :rtype: float
        """
        return self._cash_amount

    @cash_amount.setter
    def cash_amount(self, cash_amount):
        """Sets the cash_amount of this PostBankDepositsBankDeposit.

        Cash total in the deposit  # noqa: E501

        :param cash_amount: The cash_amount of this PostBankDepositsBankDeposit.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and cash_amount is None:  # noqa: E501
            raise ValueError("Invalid value for `cash_amount`, must not be `None`")  # noqa: E501

        self._cash_amount = cash_amount

    @property
    def cheque_amount(self):
        """Gets the cheque_amount of this PostBankDepositsBankDeposit.  # noqa: E501

        Cheque total in the deposit  # noqa: E501

        :return: The cheque_amount of this PostBankDepositsBankDeposit.  # noqa: E501
        :rtype: float
        """
        return self._cheque_amount

    @cheque_amount.setter
    def cheque_amount(self, cheque_amount):
        """Sets the cheque_amount of this PostBankDepositsBankDeposit.

        Cheque total in the deposit  # noqa: E501

        :param cheque_amount: The cheque_amount of this PostBankDepositsBankDeposit.  # noqa: E501
        :type: float
        """

        self._cheque_amount = cheque_amount

    @property
    def total_amount(self):
        """Gets the total_amount of this PostBankDepositsBankDeposit.  # noqa: E501

        Total of cash and cheques in the deposit  # noqa: E501

        :return: The total_amount of this PostBankDepositsBankDeposit.  # noqa: E501
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this PostBankDepositsBankDeposit.

        Total of cash and cheques in the deposit  # noqa: E501

        :param total_amount: The total_amount of this PostBankDepositsBankDeposit.  # noqa: E501
        :type: float
        """

        self._total_amount = total_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostBankDepositsBankDeposit):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PostBankDepositsBankDeposit):
            return True

        return self.to_dict() != other.to_dict()
