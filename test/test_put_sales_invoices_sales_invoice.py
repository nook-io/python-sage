# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import sage
from sage.models.put_sales_invoices_sales_invoice import PutSalesInvoicesSalesInvoice  # noqa: E501
from sage.rest import ApiException

class TestPutSalesInvoicesSalesInvoice(unittest.TestCase):
    """PutSalesInvoicesSalesInvoice unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test PutSalesInvoicesSalesInvoice
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = sage.models.put_sales_invoices_sales_invoice.PutSalesInvoicesSalesInvoice()  # noqa: E501
        if include_optional :
            return PutSalesInvoicesSalesInvoice(
                contact_id = '0', 
                date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                cis_applicable_amount = 1.337, 
                base_currency_cis_applicable_amount = 1.337, 
                total_after_cis_deduction = 1.337, 
                base_currency_total_after_cis_deduction = 1.337, 
                invoice_number_prefix = '0', 
                invoice_number = '0', 
                contact_name = '0', 
                contact_reference = '0', 
                due_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                reference = '0', 
                notes = '0', 
                terms_and_conditions = '0', 
                shipping_net_amount = 1.337, 
                shipping_tax_rate_id = '0', 
                shipping_tax_amount = 1.337, 
                shipping_total_amount = 1.337, 
                net_amount = 1.337, 
                tax_amount = 1.337, 
                total_amount = 1.337, 
                currency_id = '0', 
                exchange_rate = 1.337, 
                inverse_exchange_rate = 1.337, 
                base_currency_shipping_net_amount = 1.337, 
                base_currency_shipping_tax_amount = 1.337, 
                base_currency_shipping_total_amount = 1.337, 
                total_quantity = 1.337, 
                total_discount_amount = 1.337, 
                base_currency_total_discount_amount = 1.337, 
                base_currency_net_amount = 1.337, 
                base_currency_tax_amount = 1.337, 
                base_currency_total_amount = 1.337, 
                status_id = '0', 
                sent = True, 
                original_quote_estimate_id = '0', 
                tax_address_region_id = '0', 
                delivery_performance_date = '0', 
                withholding_tax_rate = 1.337, 
                withholding_tax_amount = 1.337, 
                base_currency_withholding_tax_amount = 1.337, 
                recurring_invoice = sage.models.post_sales_invoices_sales_invoice_recurring_invoice.postSalesInvoices_sales_invoice_recurring_invoice(
                    frequency = 56, 
                    on_week_day = 56, 
                    on_day_number = 56, 
                    recurrence_type = '0', 
                    recurrence_status_identifier = '0', ), 
                main_address = sage.models.post_sales_corrective_invoices_sales_corrective_invoice_main_address.postSalesCorrectiveInvoices_sales_corrective_invoice_main_address(
                    address_line_1 = '0', 
                    address_line_2 = '0', 
                    city = '0', 
                    postal_code = '0', 
                    country_id = '0', 
                    address_type_id = '0', 
                    region = '0', 
                    country_group_id = '0', ), 
                delivery_address = sage.models.post_sales_corrective_invoices_sales_corrective_invoice_main_address.postSalesCorrectiveInvoices_sales_corrective_invoice_main_address(
                    address_line_1 = '0', 
                    address_line_2 = '0', 
                    city = '0', 
                    postal_code = '0', 
                    country_id = '0', 
                    address_type_id = '0', 
                    region = '0', 
                    country_group_id = '0', ), 
                invoice_lines = [
                    sage.models.put_sales_credit_notes_sales_credit_note_credit_note_lines.putSalesCreditNotes_sales_credit_note_credit_note_lines(
                        description = '0', 
                        ledger_account_id = '0', 
                        unit_price = 1.337, 
                        product_id = '0', 
                        service_id = '0', 
                        trade_of_asset = True, 
                        quantity = 1.337, 
                        net_amount = 1.337, 
                        tax_rate_id = '0', 
                        tax_amount = 1.337, 
                        total_amount = 1.337, 
                        base_currency_unit_price = 1.337, 
                        unit_price_includes_tax = True, 
                        base_currency_net_amount = 1.337, 
                        base_currency_tax_amount = 1.337, 
                        base_currency_total_amount = 1.337, 
                        eu_goods_services_type_id = '0', 
                        discount_amount = 1.337, 
                        base_currency_discount_amount = 1.337, 
                        discount_percentage = 1.337, 
                        eu_sales_description_id = '0', )
                    ], 
                tax_analysis = [
                    sage.models.post_purchase_corrective_invoices_purchase_corrective_invoice_tax_analysis.postPurchaseCorrectiveInvoices_purchase_corrective_invoice_tax_analysis(
                        tax_rate_id = '0', 
                        net_amount = 1.337, 
                        tax_amount = 1.337, 
                        total_amount = 1.337, 
                        goods_amount = 1.337, 
                        service_amount = 1.337, )
                    ]
            )
        else :
            return PutSalesInvoicesSalesInvoice(
        )

    def testPutSalesInvoicesSalesInvoice(self):
        """Test PutSalesInvoicesSalesInvoice"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
