# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class LedgerAccount(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'displayed_as': 'str',
        'path': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'ledger_account_group': 'CoaGroupType',
        'name': 'str',
        'display_name': 'str',
        'visible_scopes': 'list[str]',
        'included_in_chart': 'bool',
        'nominal_code': 'int',
        'ledger_account_type': 'Base',
        'ledger_account_classification': 'Base',
        'tax_rate': 'Base',
        'fixed_tax_rate': 'bool',
        'visible_in_banking': 'bool',
        'visible_in_expenses': 'bool',
        'visible_in_journals': 'bool',
        'visible_in_other_payments': 'bool',
        'visible_in_other_receipts': 'bool',
        'visible_in_reporting': 'bool',
        'visible_in_sales': 'bool',
        'balance_details': 'LedgerAccountBalanceDetails',
        'is_control_account': 'bool',
        'control_name': 'str',
        'display_formatted': 'str',
        'tax_recoverable': 'bool',
        'recoverable_percentage': 'float',
        'non_recoverable_ledger_account': 'LedgerAccount',
        'cis_materials': 'bool',
        'tax_instalment': 'bool',
        'cis_labour': 'bool',
        'gifi_code': 'int'
    }

    attribute_map = {
        'id': 'id',
        'displayed_as': 'displayed_as',
        'path': '$path',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'ledger_account_group': 'ledger_account_group',
        'name': 'name',
        'display_name': 'display_name',
        'visible_scopes': 'visible_scopes',
        'included_in_chart': 'included_in_chart',
        'nominal_code': 'nominal_code',
        'ledger_account_type': 'ledger_account_type',
        'ledger_account_classification': 'ledger_account_classification',
        'tax_rate': 'tax_rate',
        'fixed_tax_rate': 'fixed_tax_rate',
        'visible_in_banking': 'visible_in_banking',
        'visible_in_expenses': 'visible_in_expenses',
        'visible_in_journals': 'visible_in_journals',
        'visible_in_other_payments': 'visible_in_other_payments',
        'visible_in_other_receipts': 'visible_in_other_receipts',
        'visible_in_reporting': 'visible_in_reporting',
        'visible_in_sales': 'visible_in_sales',
        'balance_details': 'balance_details',
        'is_control_account': 'is_control_account',
        'control_name': 'control_name',
        'display_formatted': 'display_formatted',
        'tax_recoverable': 'tax_recoverable',
        'recoverable_percentage': 'recoverable_percentage',
        'non_recoverable_ledger_account': 'non_recoverable_ledger_account',
        'cis_materials': 'cis_materials',
        'tax_instalment': 'tax_instalment',
        'cis_labour': 'cis_labour',
        'gifi_code': 'gifi_code'
    }

    def __init__(self, id=None, displayed_as=None, path=None, created_at=None, updated_at=None, ledger_account_group=None, name=None, display_name=None, visible_scopes=None, included_in_chart=None, nominal_code=None, ledger_account_type=None, ledger_account_classification=None, tax_rate=None, fixed_tax_rate=None, visible_in_banking=None, visible_in_expenses=None, visible_in_journals=None, visible_in_other_payments=None, visible_in_other_receipts=None, visible_in_reporting=None, visible_in_sales=None, balance_details=None, is_control_account=None, control_name=None, display_formatted=None, tax_recoverable=None, recoverable_percentage=None, non_recoverable_ledger_account=None, cis_materials=None, tax_instalment=None, cis_labour=None, gifi_code=None, local_vars_configuration=None):  # noqa: E501
        """LedgerAccount - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._displayed_as = None
        self._path = None
        self._created_at = None
        self._updated_at = None
        self._ledger_account_group = None
        self._name = None
        self._display_name = None
        self._visible_scopes = None
        self._included_in_chart = None
        self._nominal_code = None
        self._ledger_account_type = None
        self._ledger_account_classification = None
        self._tax_rate = None
        self._fixed_tax_rate = None
        self._visible_in_banking = None
        self._visible_in_expenses = None
        self._visible_in_journals = None
        self._visible_in_other_payments = None
        self._visible_in_other_receipts = None
        self._visible_in_reporting = None
        self._visible_in_sales = None
        self._balance_details = None
        self._is_control_account = None
        self._control_name = None
        self._display_formatted = None
        self._tax_recoverable = None
        self._recoverable_percentage = None
        self._non_recoverable_ledger_account = None
        self._cis_materials = None
        self._tax_instalment = None
        self._cis_labour = None
        self._gifi_code = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if displayed_as is not None:
            self.displayed_as = displayed_as
        if path is not None:
            self.path = path
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if ledger_account_group is not None:
            self.ledger_account_group = ledger_account_group
        if name is not None:
            self.name = name
        if display_name is not None:
            self.display_name = display_name
        if visible_scopes is not None:
            self.visible_scopes = visible_scopes
        if included_in_chart is not None:
            self.included_in_chart = included_in_chart
        if nominal_code is not None:
            self.nominal_code = nominal_code
        if ledger_account_type is not None:
            self.ledger_account_type = ledger_account_type
        if ledger_account_classification is not None:
            self.ledger_account_classification = ledger_account_classification
        if tax_rate is not None:
            self.tax_rate = tax_rate
        if fixed_tax_rate is not None:
            self.fixed_tax_rate = fixed_tax_rate
        if visible_in_banking is not None:
            self.visible_in_banking = visible_in_banking
        if visible_in_expenses is not None:
            self.visible_in_expenses = visible_in_expenses
        if visible_in_journals is not None:
            self.visible_in_journals = visible_in_journals
        if visible_in_other_payments is not None:
            self.visible_in_other_payments = visible_in_other_payments
        if visible_in_other_receipts is not None:
            self.visible_in_other_receipts = visible_in_other_receipts
        if visible_in_reporting is not None:
            self.visible_in_reporting = visible_in_reporting
        if visible_in_sales is not None:
            self.visible_in_sales = visible_in_sales
        if balance_details is not None:
            self.balance_details = balance_details
        if is_control_account is not None:
            self.is_control_account = is_control_account
        if control_name is not None:
            self.control_name = control_name
        if display_formatted is not None:
            self.display_formatted = display_formatted
        if tax_recoverable is not None:
            self.tax_recoverable = tax_recoverable
        if recoverable_percentage is not None:
            self.recoverable_percentage = recoverable_percentage
        if non_recoverable_ledger_account is not None:
            self.non_recoverable_ledger_account = non_recoverable_ledger_account
        if cis_materials is not None:
            self.cis_materials = cis_materials
        if tax_instalment is not None:
            self.tax_instalment = tax_instalment
        if cis_labour is not None:
            self.cis_labour = cis_labour
        if gifi_code is not None:
            self.gifi_code = gifi_code

    @property
    def id(self):
        """Gets the id of this LedgerAccount.  # noqa: E501

        The unique identifier for the item  # noqa: E501

        :return: The id of this LedgerAccount.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LedgerAccount.

        The unique identifier for the item  # noqa: E501

        :param id: The id of this LedgerAccount.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def displayed_as(self):
        """Gets the displayed_as of this LedgerAccount.  # noqa: E501

        The name of the resource  # noqa: E501

        :return: The displayed_as of this LedgerAccount.  # noqa: E501
        :rtype: str
        """
        return self._displayed_as

    @displayed_as.setter
    def displayed_as(self, displayed_as):
        """Sets the displayed_as of this LedgerAccount.

        The name of the resource  # noqa: E501

        :param displayed_as: The displayed_as of this LedgerAccount.  # noqa: E501
        :type: str
        """

        self._displayed_as = displayed_as

    @property
    def path(self):
        """Gets the path of this LedgerAccount.  # noqa: E501

        The API path for the resource  # noqa: E501

        :return: The path of this LedgerAccount.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this LedgerAccount.

        The API path for the resource  # noqa: E501

        :param path: The path of this LedgerAccount.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def created_at(self):
        """Gets the created_at of this LedgerAccount.  # noqa: E501

        The datetime when the item was created  # noqa: E501

        :return: The created_at of this LedgerAccount.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this LedgerAccount.

        The datetime when the item was created  # noqa: E501

        :param created_at: The created_at of this LedgerAccount.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this LedgerAccount.  # noqa: E501

        The datetime when the item was last updated  # noqa: E501

        :return: The updated_at of this LedgerAccount.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this LedgerAccount.

        The datetime when the item was last updated  # noqa: E501

        :param updated_at: The updated_at of this LedgerAccount.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def ledger_account_group(self):
        """Gets the ledger_account_group of this LedgerAccount.  # noqa: E501


        :return: The ledger_account_group of this LedgerAccount.  # noqa: E501
        :rtype: CoaGroupType
        """
        return self._ledger_account_group

    @ledger_account_group.setter
    def ledger_account_group(self, ledger_account_group):
        """Sets the ledger_account_group of this LedgerAccount.


        :param ledger_account_group: The ledger_account_group of this LedgerAccount.  # noqa: E501
        :type: CoaGroupType
        """

        self._ledger_account_group = ledger_account_group

    @property
    def name(self):
        """Gets the name of this LedgerAccount.  # noqa: E501

        The name for the ledger account.  Changes to this field do not propagate to other resources, namely not to the name of the associated bank_account (unlike the behaviour of the UI).   # noqa: E501

        :return: The name of this LedgerAccount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LedgerAccount.

        The name for the ledger account.  Changes to this field do not propagate to other resources, namely not to the name of the associated bank_account (unlike the behaviour of the UI).   # noqa: E501

        :param name: The name of this LedgerAccount.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 200):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")  # noqa: E501

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this LedgerAccount.  # noqa: E501

        The display name for the ledger account  # noqa: E501

        :return: The display_name of this LedgerAccount.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this LedgerAccount.

        The display name for the ledger account  # noqa: E501

        :param display_name: The display_name of this LedgerAccount.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                display_name is not None and len(display_name) > 200):
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `200`")  # noqa: E501

        self._display_name = display_name

    @property
    def visible_scopes(self):
        """Gets the visible_scopes of this LedgerAccount.  # noqa: E501

        The visible scopes for the ledger account.  This indicates in which of the UI's areas the ledger account is displayed and available for user selection. Possible entries in this array are `bank`, `sales`, `purchasing`, `other_payment`, `other_receipt`, `reporting`, `journals`, `sales_eu`, `sales_row`, `purchasing_eu`, `purchasing_row` and `purchasing_hrc`.   # noqa: E501

        :return: The visible_scopes of this LedgerAccount.  # noqa: E501
        :rtype: list[str]
        """
        return self._visible_scopes

    @visible_scopes.setter
    def visible_scopes(self, visible_scopes):
        """Sets the visible_scopes of this LedgerAccount.

        The visible scopes for the ledger account.  This indicates in which of the UI's areas the ledger account is displayed and available for user selection. Possible entries in this array are `bank`, `sales`, `purchasing`, `other_payment`, `other_receipt`, `reporting`, `journals`, `sales_eu`, `sales_row`, `purchasing_eu`, `purchasing_row` and `purchasing_hrc`.   # noqa: E501

        :param visible_scopes: The visible_scopes of this LedgerAccount.  # noqa: E501
        :type: list[str]
        """

        self._visible_scopes = visible_scopes

    @property
    def included_in_chart(self):
        """Gets the included_in_chart of this LedgerAccount.  # noqa: E501

        Indicates whether the ledger account is included in the chart of accounts  # noqa: E501

        :return: The included_in_chart of this LedgerAccount.  # noqa: E501
        :rtype: bool
        """
        return self._included_in_chart

    @included_in_chart.setter
    def included_in_chart(self, included_in_chart):
        """Sets the included_in_chart of this LedgerAccount.

        Indicates whether the ledger account is included in the chart of accounts  # noqa: E501

        :param included_in_chart: The included_in_chart of this LedgerAccount.  # noqa: E501
        :type: bool
        """

        self._included_in_chart = included_in_chart

    @property
    def nominal_code(self):
        """Gets the nominal_code of this LedgerAccount.  # noqa: E501

        The nominal code of the ledger account  # noqa: E501

        :return: The nominal_code of this LedgerAccount.  # noqa: E501
        :rtype: int
        """
        return self._nominal_code

    @nominal_code.setter
    def nominal_code(self, nominal_code):
        """Sets the nominal_code of this LedgerAccount.

        The nominal code of the ledger account  # noqa: E501

        :param nominal_code: The nominal_code of this LedgerAccount.  # noqa: E501
        :type: int
        """

        self._nominal_code = nominal_code

    @property
    def ledger_account_type(self):
        """Gets the ledger_account_type of this LedgerAccount.  # noqa: E501


        :return: The ledger_account_type of this LedgerAccount.  # noqa: E501
        :rtype: Base
        """
        return self._ledger_account_type

    @ledger_account_type.setter
    def ledger_account_type(self, ledger_account_type):
        """Sets the ledger_account_type of this LedgerAccount.


        :param ledger_account_type: The ledger_account_type of this LedgerAccount.  # noqa: E501
        :type: Base
        """

        self._ledger_account_type = ledger_account_type

    @property
    def ledger_account_classification(self):
        """Gets the ledger_account_classification of this LedgerAccount.  # noqa: E501


        :return: The ledger_account_classification of this LedgerAccount.  # noqa: E501
        :rtype: Base
        """
        return self._ledger_account_classification

    @ledger_account_classification.setter
    def ledger_account_classification(self, ledger_account_classification):
        """Sets the ledger_account_classification of this LedgerAccount.


        :param ledger_account_classification: The ledger_account_classification of this LedgerAccount.  # noqa: E501
        :type: Base
        """

        self._ledger_account_classification = ledger_account_classification

    @property
    def tax_rate(self):
        """Gets the tax_rate of this LedgerAccount.  # noqa: E501


        :return: The tax_rate of this LedgerAccount.  # noqa: E501
        :rtype: Base
        """
        return self._tax_rate

    @tax_rate.setter
    def tax_rate(self, tax_rate):
        """Sets the tax_rate of this LedgerAccount.


        :param tax_rate: The tax_rate of this LedgerAccount.  # noqa: E501
        :type: Base
        """

        self._tax_rate = tax_rate

    @property
    def fixed_tax_rate(self):
        """Gets the fixed_tax_rate of this LedgerAccount.  # noqa: E501

        Indicates whether the default tax rate is fixed or may be changed per transaction  # noqa: E501

        :return: The fixed_tax_rate of this LedgerAccount.  # noqa: E501
        :rtype: bool
        """
        return self._fixed_tax_rate

    @fixed_tax_rate.setter
    def fixed_tax_rate(self, fixed_tax_rate):
        """Sets the fixed_tax_rate of this LedgerAccount.

        Indicates whether the default tax rate is fixed or may be changed per transaction  # noqa: E501

        :param fixed_tax_rate: The fixed_tax_rate of this LedgerAccount.  # noqa: E501
        :type: bool
        """

        self._fixed_tax_rate = fixed_tax_rate

    @property
    def visible_in_banking(self):
        """Gets the visible_in_banking of this LedgerAccount.  # noqa: E501

        Indicates whether the ledger account is displayed in the banking area of the application  # noqa: E501

        :return: The visible_in_banking of this LedgerAccount.  # noqa: E501
        :rtype: bool
        """
        return self._visible_in_banking

    @visible_in_banking.setter
    def visible_in_banking(self, visible_in_banking):
        """Sets the visible_in_banking of this LedgerAccount.

        Indicates whether the ledger account is displayed in the banking area of the application  # noqa: E501

        :param visible_in_banking: The visible_in_banking of this LedgerAccount.  # noqa: E501
        :type: bool
        """

        self._visible_in_banking = visible_in_banking

    @property
    def visible_in_expenses(self):
        """Gets the visible_in_expenses of this LedgerAccount.  # noqa: E501

        Indicates whether the ledger account is displayed in the purchases area of the application  # noqa: E501

        :return: The visible_in_expenses of this LedgerAccount.  # noqa: E501
        :rtype: bool
        """
        return self._visible_in_expenses

    @visible_in_expenses.setter
    def visible_in_expenses(self, visible_in_expenses):
        """Sets the visible_in_expenses of this LedgerAccount.

        Indicates whether the ledger account is displayed in the purchases area of the application  # noqa: E501

        :param visible_in_expenses: The visible_in_expenses of this LedgerAccount.  # noqa: E501
        :type: bool
        """

        self._visible_in_expenses = visible_in_expenses

    @property
    def visible_in_journals(self):
        """Gets the visible_in_journals of this LedgerAccount.  # noqa: E501

        Indicates whether the ledger account is displayed in the journals area of the application  # noqa: E501

        :return: The visible_in_journals of this LedgerAccount.  # noqa: E501
        :rtype: bool
        """
        return self._visible_in_journals

    @visible_in_journals.setter
    def visible_in_journals(self, visible_in_journals):
        """Sets the visible_in_journals of this LedgerAccount.

        Indicates whether the ledger account is displayed in the journals area of the application  # noqa: E501

        :param visible_in_journals: The visible_in_journals of this LedgerAccount.  # noqa: E501
        :type: bool
        """

        self._visible_in_journals = visible_in_journals

    @property
    def visible_in_other_payments(self):
        """Gets the visible_in_other_payments of this LedgerAccount.  # noqa: E501

        Indicates whether the ledger account is displayed in the other payments area of the application   # noqa: E501

        :return: The visible_in_other_payments of this LedgerAccount.  # noqa: E501
        :rtype: bool
        """
        return self._visible_in_other_payments

    @visible_in_other_payments.setter
    def visible_in_other_payments(self, visible_in_other_payments):
        """Sets the visible_in_other_payments of this LedgerAccount.

        Indicates whether the ledger account is displayed in the other payments area of the application   # noqa: E501

        :param visible_in_other_payments: The visible_in_other_payments of this LedgerAccount.  # noqa: E501
        :type: bool
        """

        self._visible_in_other_payments = visible_in_other_payments

    @property
    def visible_in_other_receipts(self):
        """Gets the visible_in_other_receipts of this LedgerAccount.  # noqa: E501

        Indicates whether the ledger account is displayed in the other receipts area of the application   # noqa: E501

        :return: The visible_in_other_receipts of this LedgerAccount.  # noqa: E501
        :rtype: bool
        """
        return self._visible_in_other_receipts

    @visible_in_other_receipts.setter
    def visible_in_other_receipts(self, visible_in_other_receipts):
        """Sets the visible_in_other_receipts of this LedgerAccount.

        Indicates whether the ledger account is displayed in the other receipts area of the application   # noqa: E501

        :param visible_in_other_receipts: The visible_in_other_receipts of this LedgerAccount.  # noqa: E501
        :type: bool
        """

        self._visible_in_other_receipts = visible_in_other_receipts

    @property
    def visible_in_reporting(self):
        """Gets the visible_in_reporting of this LedgerAccount.  # noqa: E501

        Indicates whether the ledger account is displayed in the reporting area of the application  # noqa: E501

        :return: The visible_in_reporting of this LedgerAccount.  # noqa: E501
        :rtype: bool
        """
        return self._visible_in_reporting

    @visible_in_reporting.setter
    def visible_in_reporting(self, visible_in_reporting):
        """Sets the visible_in_reporting of this LedgerAccount.

        Indicates whether the ledger account is displayed in the reporting area of the application  # noqa: E501

        :param visible_in_reporting: The visible_in_reporting of this LedgerAccount.  # noqa: E501
        :type: bool
        """

        self._visible_in_reporting = visible_in_reporting

    @property
    def visible_in_sales(self):
        """Gets the visible_in_sales of this LedgerAccount.  # noqa: E501

        Indicates whether the ledger account is displayed in the sales area of the application  # noqa: E501

        :return: The visible_in_sales of this LedgerAccount.  # noqa: E501
        :rtype: bool
        """
        return self._visible_in_sales

    @visible_in_sales.setter
    def visible_in_sales(self, visible_in_sales):
        """Sets the visible_in_sales of this LedgerAccount.

        Indicates whether the ledger account is displayed in the sales area of the application  # noqa: E501

        :param visible_in_sales: The visible_in_sales of this LedgerAccount.  # noqa: E501
        :type: bool
        """

        self._visible_in_sales = visible_in_sales

    @property
    def balance_details(self):
        """Gets the balance_details of this LedgerAccount.  # noqa: E501


        :return: The balance_details of this LedgerAccount.  # noqa: E501
        :rtype: LedgerAccountBalanceDetails
        """
        return self._balance_details

    @balance_details.setter
    def balance_details(self, balance_details):
        """Sets the balance_details of this LedgerAccount.


        :param balance_details: The balance_details of this LedgerAccount.  # noqa: E501
        :type: LedgerAccountBalanceDetails
        """

        self._balance_details = balance_details

    @property
    def is_control_account(self):
        """Gets the is_control_account of this LedgerAccount.  # noqa: E501

        Indicates whether the ledger account is a control account.  Control accounts cannot be removed. See also `control_name`.   # noqa: E501

        :return: The is_control_account of this LedgerAccount.  # noqa: E501
        :rtype: bool
        """
        return self._is_control_account

    @is_control_account.setter
    def is_control_account(self, is_control_account):
        """Sets the is_control_account of this LedgerAccount.

        Indicates whether the ledger account is a control account.  Control accounts cannot be removed. See also `control_name`.   # noqa: E501

        :param is_control_account: The is_control_account of this LedgerAccount.  # noqa: E501
        :type: bool
        """

        self._is_control_account = is_control_account

    @property
    def control_name(self):
        """Gets the control_name of this LedgerAccount.  # noqa: E501

        The control name for the ledger account.  This is used internally by Accounting to identify the correct ledger account for booking taxes etc. You cannot add ledger accounts with control name and you cannot modify the control name of existing ledger accounts.   # noqa: E501

        :return: The control_name of this LedgerAccount.  # noqa: E501
        :rtype: str
        """
        return self._control_name

    @control_name.setter
    def control_name(self, control_name):
        """Sets the control_name of this LedgerAccount.

        The control name for the ledger account.  This is used internally by Accounting to identify the correct ledger account for booking taxes etc. You cannot add ledger accounts with control name and you cannot modify the control name of existing ledger accounts.   # noqa: E501

        :param control_name: The control_name of this LedgerAccount.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                control_name is not None and len(control_name) > 255):
            raise ValueError("Invalid value for `control_name`, length must be less than or equal to `255`")  # noqa: E501

        self._control_name = control_name

    @property
    def display_formatted(self):
        """Gets the display_formatted of this LedgerAccount.  # noqa: E501

        The display name formatted based on coa_list_order in settings  # noqa: E501

        :return: The display_formatted of this LedgerAccount.  # noqa: E501
        :rtype: str
        """
        return self._display_formatted

    @display_formatted.setter
    def display_formatted(self, display_formatted):
        """Sets the display_formatted of this LedgerAccount.

        The display name formatted based on coa_list_order in settings  # noqa: E501

        :param display_formatted: The display_formatted of this LedgerAccount.  # noqa: E501
        :type: str
        """

        self._display_formatted = display_formatted

    @property
    def tax_recoverable(self):
        """Gets the tax_recoverable of this LedgerAccount.  # noqa: E501

        Indicates that transactions posted to this ledger account have part recoverable taxes (Canada only)   # noqa: E501

        :return: The tax_recoverable of this LedgerAccount.  # noqa: E501
        :rtype: bool
        """
        return self._tax_recoverable

    @tax_recoverable.setter
    def tax_recoverable(self, tax_recoverable):
        """Sets the tax_recoverable of this LedgerAccount.

        Indicates that transactions posted to this ledger account have part recoverable taxes (Canada only)   # noqa: E501

        :param tax_recoverable: The tax_recoverable of this LedgerAccount.  # noqa: E501
        :type: bool
        """

        self._tax_recoverable = tax_recoverable

    @property
    def recoverable_percentage(self):
        """Gets the recoverable_percentage of this LedgerAccount.  # noqa: E501

        The partial recoverable tax rate (Canada only)  # noqa: E501

        :return: The recoverable_percentage of this LedgerAccount.  # noqa: E501
        :rtype: float
        """
        return self._recoverable_percentage

    @recoverable_percentage.setter
    def recoverable_percentage(self, recoverable_percentage):
        """Sets the recoverable_percentage of this LedgerAccount.

        The partial recoverable tax rate (Canada only)  # noqa: E501

        :param recoverable_percentage: The recoverable_percentage of this LedgerAccount.  # noqa: E501
        :type: float
        """

        self._recoverable_percentage = recoverable_percentage

    @property
    def non_recoverable_ledger_account(self):
        """Gets the non_recoverable_ledger_account of this LedgerAccount.  # noqa: E501


        :return: The non_recoverable_ledger_account of this LedgerAccount.  # noqa: E501
        :rtype: LedgerAccount
        """
        return self._non_recoverable_ledger_account

    @non_recoverable_ledger_account.setter
    def non_recoverable_ledger_account(self, non_recoverable_ledger_account):
        """Sets the non_recoverable_ledger_account of this LedgerAccount.


        :param non_recoverable_ledger_account: The non_recoverable_ledger_account of this LedgerAccount.  # noqa: E501
        :type: LedgerAccount
        """

        self._non_recoverable_ledger_account = non_recoverable_ledger_account

    @property
    def cis_materials(self):
        """Gets the cis_materials of this LedgerAccount.  # noqa: E501

        Indicates whether the ledger account is flagged for CIS Materials  # noqa: E501

        :return: The cis_materials of this LedgerAccount.  # noqa: E501
        :rtype: bool
        """
        return self._cis_materials

    @cis_materials.setter
    def cis_materials(self, cis_materials):
        """Sets the cis_materials of this LedgerAccount.

        Indicates whether the ledger account is flagged for CIS Materials  # noqa: E501

        :param cis_materials: The cis_materials of this LedgerAccount.  # noqa: E501
        :type: bool
        """

        self._cis_materials = cis_materials

    @property
    def tax_instalment(self):
        """Gets the tax_instalment of this LedgerAccount.  # noqa: E501

        Indicates whether the ledger account is flagged for Tax Intalment (Canada only)  # noqa: E501

        :return: The tax_instalment of this LedgerAccount.  # noqa: E501
        :rtype: bool
        """
        return self._tax_instalment

    @tax_instalment.setter
    def tax_instalment(self, tax_instalment):
        """Sets the tax_instalment of this LedgerAccount.

        Indicates whether the ledger account is flagged for Tax Intalment (Canada only)  # noqa: E501

        :param tax_instalment: The tax_instalment of this LedgerAccount.  # noqa: E501
        :type: bool
        """

        self._tax_instalment = tax_instalment

    @property
    def cis_labour(self):
        """Gets the cis_labour of this LedgerAccount.  # noqa: E501

        Indicates whether the ledger account is flagged for CIS Labour  # noqa: E501

        :return: The cis_labour of this LedgerAccount.  # noqa: E501
        :rtype: bool
        """
        return self._cis_labour

    @cis_labour.setter
    def cis_labour(self, cis_labour):
        """Sets the cis_labour of this LedgerAccount.

        Indicates whether the ledger account is flagged for CIS Labour  # noqa: E501

        :param cis_labour: The cis_labour of this LedgerAccount.  # noqa: E501
        :type: bool
        """

        self._cis_labour = cis_labour

    @property
    def gifi_code(self):
        """Gets the gifi_code of this LedgerAccount.  # noqa: E501

        The GIFI code of the ledger account.  GIFI is short for The General Index of Financial Information and it lets the CRA validate tax information electronically instead of manually. Information from financial statements is categorized under the appropriate 4-digit-long GIFI code and entered on corporate income tax returns. GIFI is needed when filing a T2 income tax return.  _Canada only_   # noqa: E501

        :return: The gifi_code of this LedgerAccount.  # noqa: E501
        :rtype: int
        """
        return self._gifi_code

    @gifi_code.setter
    def gifi_code(self, gifi_code):
        """Sets the gifi_code of this LedgerAccount.

        The GIFI code of the ledger account.  GIFI is short for The General Index of Financial Information and it lets the CRA validate tax information electronically instead of manually. Information from financial statements is categorized under the appropriate 4-digit-long GIFI code and entered on corporate income tax returns. GIFI is needed when filing a T2 income tax return.  _Canada only_   # noqa: E501

        :param gifi_code: The gifi_code of this LedgerAccount.  # noqa: E501
        :type: int
        """

        self._gifi_code = gifi_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LedgerAccount):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LedgerAccount):
            return True

        return self.to_dict() != other.to_dict()
