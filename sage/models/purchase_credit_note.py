# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class PurchaseCreditNote(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'displayed_as': 'str',
        'path': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'links': 'list[Link]',
        'editable': 'bool',
        'transaction': 'Transaction',
        'transaction_type': 'Base',
        'postponed_accounting': 'bool',
        '_import': 'bool',
        'deleted_at': 'datetime',
        'is_cis': 'bool',
        'cis_applicable_amount': 'float',
        'base_currency_cis_applicable_amount': 'float',
        'total_after_cis_deduction': 'float',
        'base_currency_total_after_cis_deduction': 'float',
        'has_cis_labour': 'bool',
        'has_cis_materials': 'bool',
        'contact': 'Contact',
        'base_currency_total_itc_amount': 'float',
        'total_itc_amount': 'float',
        'base_currency_total_itr_amount': 'float',
        'total_itr_amount': 'float',
        'part_recoverable': 'bool',
        'contact_name': 'str',
        'contact_reference': 'str',
        'date': 'date',
        'original_invoice_date': 'date',
        'reference': 'str',
        'vendor_reference': 'str',
        'notes': 'str',
        'total_quantity': 'float',
        'net_amount': 'float',
        'tax_amount': 'float',
        'total_amount': 'float',
        'payments_allocations_total_amount': 'float',
        'payments_allocations_total_discount': 'float',
        'total_paid': 'float',
        'outstanding_amount': 'float',
        'currency': 'Base',
        'exchange_rate': 'float',
        'inverse_exchange_rate': 'str',
        'base_currency_net_amount': 'float',
        'base_currency_tax_amount': 'float',
        'base_currency_total_amount': 'float',
        'base_currency_outstanding_amount': 'float',
        'status': 'Base',
        'void_reason': 'str',
        'credit_note_lines': 'list[PurchaseCreditNoteLineItem]',
        'tax_analysis': 'list[ArtefactTaxAnalysis]',
        'detailed_tax_analysis': 'ArtefactDetailedTaxAnalysis',
        'payments_allocations': 'list[PaymentAllocation]',
        'last_paid': 'date',
        'tax_address_region': 'Base',
        'tax_reconciled': 'bool',
        'migrated': 'bool',
        'tax_calculation_method': 'str',
        'withholding_tax_rate': 'float',
        'withholding_tax_amount': 'float',
        'base_currency_withholding_tax_amount': 'float'
    }

    attribute_map = {
        'id': 'id',
        'displayed_as': 'displayed_as',
        'path': '$path',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'links': 'links',
        'editable': 'editable',
        'transaction': 'transaction',
        'transaction_type': 'transaction_type',
        'postponed_accounting': 'postponed_accounting',
        '_import': 'import',
        'deleted_at': 'deleted_at',
        'is_cis': 'is_cis',
        'cis_applicable_amount': 'cis_applicable_amount',
        'base_currency_cis_applicable_amount': 'base_currency_cis_applicable_amount',
        'total_after_cis_deduction': 'total_after_cis_deduction',
        'base_currency_total_after_cis_deduction': 'base_currency_total_after_cis_deduction',
        'has_cis_labour': 'has_cis_labour',
        'has_cis_materials': 'has_cis_materials',
        'contact': 'contact',
        'base_currency_total_itc_amount': 'base_currency_total_itc_amount',
        'total_itc_amount': 'total_itc_amount',
        'base_currency_total_itr_amount': 'base_currency_total_itr_amount',
        'total_itr_amount': 'total_itr_amount',
        'part_recoverable': 'part_recoverable',
        'contact_name': 'contact_name',
        'contact_reference': 'contact_reference',
        'date': 'date',
        'original_invoice_date': 'original_invoice_date',
        'reference': 'reference',
        'vendor_reference': 'vendor_reference',
        'notes': 'notes',
        'total_quantity': 'total_quantity',
        'net_amount': 'net_amount',
        'tax_amount': 'tax_amount',
        'total_amount': 'total_amount',
        'payments_allocations_total_amount': 'payments_allocations_total_amount',
        'payments_allocations_total_discount': 'payments_allocations_total_discount',
        'total_paid': 'total_paid',
        'outstanding_amount': 'outstanding_amount',
        'currency': 'currency',
        'exchange_rate': 'exchange_rate',
        'inverse_exchange_rate': 'inverse_exchange_rate',
        'base_currency_net_amount': 'base_currency_net_amount',
        'base_currency_tax_amount': 'base_currency_tax_amount',
        'base_currency_total_amount': 'base_currency_total_amount',
        'base_currency_outstanding_amount': 'base_currency_outstanding_amount',
        'status': 'status',
        'void_reason': 'void_reason',
        'credit_note_lines': 'credit_note_lines',
        'tax_analysis': 'tax_analysis',
        'detailed_tax_analysis': 'detailed_tax_analysis',
        'payments_allocations': 'payments_allocations',
        'last_paid': 'last_paid',
        'tax_address_region': 'tax_address_region',
        'tax_reconciled': 'tax_reconciled',
        'migrated': 'migrated',
        'tax_calculation_method': 'tax_calculation_method',
        'withholding_tax_rate': 'withholding_tax_rate',
        'withholding_tax_amount': 'withholding_tax_amount',
        'base_currency_withholding_tax_amount': 'base_currency_withholding_tax_amount'
    }

    def __init__(self, id=None, displayed_as=None, path=None, created_at=None, updated_at=None, links=None, editable=None, transaction=None, transaction_type=None, postponed_accounting=None, _import=None, deleted_at=None, is_cis=None, cis_applicable_amount=None, base_currency_cis_applicable_amount=None, total_after_cis_deduction=None, base_currency_total_after_cis_deduction=None, has_cis_labour=None, has_cis_materials=None, contact=None, base_currency_total_itc_amount=None, total_itc_amount=None, base_currency_total_itr_amount=None, total_itr_amount=None, part_recoverable=None, contact_name=None, contact_reference=None, date=None, original_invoice_date=None, reference=None, vendor_reference=None, notes=None, total_quantity=None, net_amount=None, tax_amount=None, total_amount=None, payments_allocations_total_amount=None, payments_allocations_total_discount=None, total_paid=None, outstanding_amount=None, currency=None, exchange_rate=None, inverse_exchange_rate=None, base_currency_net_amount=None, base_currency_tax_amount=None, base_currency_total_amount=None, base_currency_outstanding_amount=None, status=None, void_reason=None, credit_note_lines=None, tax_analysis=None, detailed_tax_analysis=None, payments_allocations=None, last_paid=None, tax_address_region=None, tax_reconciled=None, migrated=None, tax_calculation_method=None, withholding_tax_rate=None, withholding_tax_amount=None, base_currency_withholding_tax_amount=None, local_vars_configuration=None):  # noqa: E501
        """PurchaseCreditNote - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._displayed_as = None
        self._path = None
        self._created_at = None
        self._updated_at = None
        self._links = None
        self._editable = None
        self._transaction = None
        self._transaction_type = None
        self._postponed_accounting = None
        self.__import = None
        self._deleted_at = None
        self._is_cis = None
        self._cis_applicable_amount = None
        self._base_currency_cis_applicable_amount = None
        self._total_after_cis_deduction = None
        self._base_currency_total_after_cis_deduction = None
        self._has_cis_labour = None
        self._has_cis_materials = None
        self._contact = None
        self._base_currency_total_itc_amount = None
        self._total_itc_amount = None
        self._base_currency_total_itr_amount = None
        self._total_itr_amount = None
        self._part_recoverable = None
        self._contact_name = None
        self._contact_reference = None
        self._date = None
        self._original_invoice_date = None
        self._reference = None
        self._vendor_reference = None
        self._notes = None
        self._total_quantity = None
        self._net_amount = None
        self._tax_amount = None
        self._total_amount = None
        self._payments_allocations_total_amount = None
        self._payments_allocations_total_discount = None
        self._total_paid = None
        self._outstanding_amount = None
        self._currency = None
        self._exchange_rate = None
        self._inverse_exchange_rate = None
        self._base_currency_net_amount = None
        self._base_currency_tax_amount = None
        self._base_currency_total_amount = None
        self._base_currency_outstanding_amount = None
        self._status = None
        self._void_reason = None
        self._credit_note_lines = None
        self._tax_analysis = None
        self._detailed_tax_analysis = None
        self._payments_allocations = None
        self._last_paid = None
        self._tax_address_region = None
        self._tax_reconciled = None
        self._migrated = None
        self._tax_calculation_method = None
        self._withholding_tax_rate = None
        self._withholding_tax_amount = None
        self._base_currency_withholding_tax_amount = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if displayed_as is not None:
            self.displayed_as = displayed_as
        if path is not None:
            self.path = path
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if links is not None:
            self.links = links
        if editable is not None:
            self.editable = editable
        if transaction is not None:
            self.transaction = transaction
        if transaction_type is not None:
            self.transaction_type = transaction_type
        if postponed_accounting is not None:
            self.postponed_accounting = postponed_accounting
        if _import is not None:
            self._import = _import
        if deleted_at is not None:
            self.deleted_at = deleted_at
        if is_cis is not None:
            self.is_cis = is_cis
        if cis_applicable_amount is not None:
            self.cis_applicable_amount = cis_applicable_amount
        if base_currency_cis_applicable_amount is not None:
            self.base_currency_cis_applicable_amount = base_currency_cis_applicable_amount
        if total_after_cis_deduction is not None:
            self.total_after_cis_deduction = total_after_cis_deduction
        if base_currency_total_after_cis_deduction is not None:
            self.base_currency_total_after_cis_deduction = base_currency_total_after_cis_deduction
        if has_cis_labour is not None:
            self.has_cis_labour = has_cis_labour
        if has_cis_materials is not None:
            self.has_cis_materials = has_cis_materials
        if contact is not None:
            self.contact = contact
        if base_currency_total_itc_amount is not None:
            self.base_currency_total_itc_amount = base_currency_total_itc_amount
        if total_itc_amount is not None:
            self.total_itc_amount = total_itc_amount
        if base_currency_total_itr_amount is not None:
            self.base_currency_total_itr_amount = base_currency_total_itr_amount
        if total_itr_amount is not None:
            self.total_itr_amount = total_itr_amount
        if part_recoverable is not None:
            self.part_recoverable = part_recoverable
        if contact_name is not None:
            self.contact_name = contact_name
        if contact_reference is not None:
            self.contact_reference = contact_reference
        if date is not None:
            self.date = date
        if original_invoice_date is not None:
            self.original_invoice_date = original_invoice_date
        if reference is not None:
            self.reference = reference
        if vendor_reference is not None:
            self.vendor_reference = vendor_reference
        if notes is not None:
            self.notes = notes
        if total_quantity is not None:
            self.total_quantity = total_quantity
        if net_amount is not None:
            self.net_amount = net_amount
        if tax_amount is not None:
            self.tax_amount = tax_amount
        if total_amount is not None:
            self.total_amount = total_amount
        if payments_allocations_total_amount is not None:
            self.payments_allocations_total_amount = payments_allocations_total_amount
        if payments_allocations_total_discount is not None:
            self.payments_allocations_total_discount = payments_allocations_total_discount
        if total_paid is not None:
            self.total_paid = total_paid
        if outstanding_amount is not None:
            self.outstanding_amount = outstanding_amount
        if currency is not None:
            self.currency = currency
        if exchange_rate is not None:
            self.exchange_rate = exchange_rate
        if inverse_exchange_rate is not None:
            self.inverse_exchange_rate = inverse_exchange_rate
        if base_currency_net_amount is not None:
            self.base_currency_net_amount = base_currency_net_amount
        if base_currency_tax_amount is not None:
            self.base_currency_tax_amount = base_currency_tax_amount
        if base_currency_total_amount is not None:
            self.base_currency_total_amount = base_currency_total_amount
        if base_currency_outstanding_amount is not None:
            self.base_currency_outstanding_amount = base_currency_outstanding_amount
        if status is not None:
            self.status = status
        if void_reason is not None:
            self.void_reason = void_reason
        if credit_note_lines is not None:
            self.credit_note_lines = credit_note_lines
        if tax_analysis is not None:
            self.tax_analysis = tax_analysis
        if detailed_tax_analysis is not None:
            self.detailed_tax_analysis = detailed_tax_analysis
        if payments_allocations is not None:
            self.payments_allocations = payments_allocations
        if last_paid is not None:
            self.last_paid = last_paid
        if tax_address_region is not None:
            self.tax_address_region = tax_address_region
        if tax_reconciled is not None:
            self.tax_reconciled = tax_reconciled
        if migrated is not None:
            self.migrated = migrated
        if tax_calculation_method is not None:
            self.tax_calculation_method = tax_calculation_method
        if withholding_tax_rate is not None:
            self.withholding_tax_rate = withholding_tax_rate
        if withholding_tax_amount is not None:
            self.withholding_tax_amount = withholding_tax_amount
        if base_currency_withholding_tax_amount is not None:
            self.base_currency_withholding_tax_amount = base_currency_withholding_tax_amount

    @property
    def id(self):
        """Gets the id of this PurchaseCreditNote.  # noqa: E501

        The unique identifier for the item  # noqa: E501

        :return: The id of this PurchaseCreditNote.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PurchaseCreditNote.

        The unique identifier for the item  # noqa: E501

        :param id: The id of this PurchaseCreditNote.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def displayed_as(self):
        """Gets the displayed_as of this PurchaseCreditNote.  # noqa: E501

        The name of the resource  # noqa: E501

        :return: The displayed_as of this PurchaseCreditNote.  # noqa: E501
        :rtype: str
        """
        return self._displayed_as

    @displayed_as.setter
    def displayed_as(self, displayed_as):
        """Sets the displayed_as of this PurchaseCreditNote.

        The name of the resource  # noqa: E501

        :param displayed_as: The displayed_as of this PurchaseCreditNote.  # noqa: E501
        :type: str
        """

        self._displayed_as = displayed_as

    @property
    def path(self):
        """Gets the path of this PurchaseCreditNote.  # noqa: E501

        The API path for the resource  # noqa: E501

        :return: The path of this PurchaseCreditNote.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this PurchaseCreditNote.

        The API path for the resource  # noqa: E501

        :param path: The path of this PurchaseCreditNote.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def created_at(self):
        """Gets the created_at of this PurchaseCreditNote.  # noqa: E501

        The datetime when the item was created  # noqa: E501

        :return: The created_at of this PurchaseCreditNote.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PurchaseCreditNote.

        The datetime when the item was created  # noqa: E501

        :param created_at: The created_at of this PurchaseCreditNote.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this PurchaseCreditNote.  # noqa: E501

        The datetime when the item was last updated  # noqa: E501

        :return: The updated_at of this PurchaseCreditNote.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PurchaseCreditNote.

        The datetime when the item was last updated  # noqa: E501

        :param updated_at: The updated_at of this PurchaseCreditNote.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def links(self):
        """Gets the links of this PurchaseCreditNote.  # noqa: E501

        Links for the resource  # noqa: E501

        :return: The links of this PurchaseCreditNote.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PurchaseCreditNote.

        Links for the resource  # noqa: E501

        :param links: The links of this PurchaseCreditNote.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def editable(self):
        """Gets the editable of this PurchaseCreditNote.  # noqa: E501

        Indicates whether artefact can be edited  # noqa: E501

        :return: The editable of this PurchaseCreditNote.  # noqa: E501
        :rtype: bool
        """
        return self._editable

    @editable.setter
    def editable(self, editable):
        """Sets the editable of this PurchaseCreditNote.

        Indicates whether artefact can be edited  # noqa: E501

        :param editable: The editable of this PurchaseCreditNote.  # noqa: E501
        :type: bool
        """

        self._editable = editable

    @property
    def transaction(self):
        """Gets the transaction of this PurchaseCreditNote.  # noqa: E501


        :return: The transaction of this PurchaseCreditNote.  # noqa: E501
        :rtype: Transaction
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this PurchaseCreditNote.


        :param transaction: The transaction of this PurchaseCreditNote.  # noqa: E501
        :type: Transaction
        """

        self._transaction = transaction

    @property
    def transaction_type(self):
        """Gets the transaction_type of this PurchaseCreditNote.  # noqa: E501


        :return: The transaction_type of this PurchaseCreditNote.  # noqa: E501
        :rtype: Base
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this PurchaseCreditNote.


        :param transaction_type: The transaction_type of this PurchaseCreditNote.  # noqa: E501
        :type: Base
        """

        self._transaction_type = transaction_type

    @property
    def postponed_accounting(self):
        """Gets the postponed_accounting of this PurchaseCreditNote.  # noqa: E501

        Indicates whether postponed accounting rules are applied to the artefact. Only used for UK and IE accounting businesses, where the vendor is flagged as importer  # noqa: E501

        :return: The postponed_accounting of this PurchaseCreditNote.  # noqa: E501
        :rtype: bool
        """
        return self._postponed_accounting

    @postponed_accounting.setter
    def postponed_accounting(self, postponed_accounting):
        """Sets the postponed_accounting of this PurchaseCreditNote.

        Indicates whether postponed accounting rules are applied to the artefact. Only used for UK and IE accounting businesses, where the vendor is flagged as importer  # noqa: E501

        :param postponed_accounting: The postponed_accounting of this PurchaseCreditNote.  # noqa: E501
        :type: bool
        """

        self._postponed_accounting = postponed_accounting

    @property
    def _import(self):
        """Gets the _import of this PurchaseCreditNote.  # noqa: E501

        Indicates whether import rules are applied to the artefact. Only used for UK, IE, FR and ES Accounting businesses, where the vendor is flagged as importer.  # noqa: E501

        :return: The _import of this PurchaseCreditNote.  # noqa: E501
        :rtype: bool
        """
        return self.__import

    @_import.setter
    def _import(self, _import):
        """Sets the _import of this PurchaseCreditNote.

        Indicates whether import rules are applied to the artefact. Only used for UK, IE, FR and ES Accounting businesses, where the vendor is flagged as importer.  # noqa: E501

        :param _import: The _import of this PurchaseCreditNote.  # noqa: E501
        :type: bool
        """

        self.__import = _import

    @property
    def deleted_at(self):
        """Gets the deleted_at of this PurchaseCreditNote.  # noqa: E501

        The datetime when the item was deleted  # noqa: E501

        :return: The deleted_at of this PurchaseCreditNote.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this PurchaseCreditNote.

        The datetime when the item was deleted  # noqa: E501

        :param deleted_at: The deleted_at of this PurchaseCreditNote.  # noqa: E501
        :type: datetime
        """

        self._deleted_at = deleted_at

    @property
    def is_cis(self):
        """Gets the is_cis of this PurchaseCreditNote.  # noqa: E501

        Identifies an artefact as CIS (Construction Industry Scheme) applicable - UK only  # noqa: E501

        :return: The is_cis of this PurchaseCreditNote.  # noqa: E501
        :rtype: bool
        """
        return self._is_cis

    @is_cis.setter
    def is_cis(self, is_cis):
        """Sets the is_cis of this PurchaseCreditNote.

        Identifies an artefact as CIS (Construction Industry Scheme) applicable - UK only  # noqa: E501

        :param is_cis: The is_cis of this PurchaseCreditNote.  # noqa: E501
        :type: bool
        """

        self._is_cis = is_cis

    @property
    def cis_applicable_amount(self):
        """Gets the cis_applicable_amount of this PurchaseCreditNote.  # noqa: E501

        The total amount of CIS deductible labour - only applicable in UK  # noqa: E501

        :return: The cis_applicable_amount of this PurchaseCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._cis_applicable_amount

    @cis_applicable_amount.setter
    def cis_applicable_amount(self, cis_applicable_amount):
        """Sets the cis_applicable_amount of this PurchaseCreditNote.

        The total amount of CIS deductible labour - only applicable in UK  # noqa: E501

        :param cis_applicable_amount: The cis_applicable_amount of this PurchaseCreditNote.  # noqa: E501
        :type: float
        """

        self._cis_applicable_amount = cis_applicable_amount

    @property
    def base_currency_cis_applicable_amount(self):
        """Gets the base_currency_cis_applicable_amount of this PurchaseCreditNote.  # noqa: E501

        The total amount of CIS deductible labour in the base currency - only applicable in UK  # noqa: E501

        :return: The base_currency_cis_applicable_amount of this PurchaseCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_cis_applicable_amount

    @base_currency_cis_applicable_amount.setter
    def base_currency_cis_applicable_amount(self, base_currency_cis_applicable_amount):
        """Sets the base_currency_cis_applicable_amount of this PurchaseCreditNote.

        The total amount of CIS deductible labour in the base currency - only applicable in UK  # noqa: E501

        :param base_currency_cis_applicable_amount: The base_currency_cis_applicable_amount of this PurchaseCreditNote.  # noqa: E501
        :type: float
        """

        self._base_currency_cis_applicable_amount = base_currency_cis_applicable_amount

    @property
    def total_after_cis_deduction(self):
        """Gets the total_after_cis_deduction of this PurchaseCreditNote.  # noqa: E501

        The total of the artefact with the total of CIS deducted - only applicable in UK  # noqa: E501

        :return: The total_after_cis_deduction of this PurchaseCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._total_after_cis_deduction

    @total_after_cis_deduction.setter
    def total_after_cis_deduction(self, total_after_cis_deduction):
        """Sets the total_after_cis_deduction of this PurchaseCreditNote.

        The total of the artefact with the total of CIS deducted - only applicable in UK  # noqa: E501

        :param total_after_cis_deduction: The total_after_cis_deduction of this PurchaseCreditNote.  # noqa: E501
        :type: float
        """

        self._total_after_cis_deduction = total_after_cis_deduction

    @property
    def base_currency_total_after_cis_deduction(self):
        """Gets the base_currency_total_after_cis_deduction of this PurchaseCreditNote.  # noqa: E501

        The total of the artefact with the total of CIS deducted in the base currency - only applicable in UK  # noqa: E501

        :return: The base_currency_total_after_cis_deduction of this PurchaseCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_total_after_cis_deduction

    @base_currency_total_after_cis_deduction.setter
    def base_currency_total_after_cis_deduction(self, base_currency_total_after_cis_deduction):
        """Sets the base_currency_total_after_cis_deduction of this PurchaseCreditNote.

        The total of the artefact with the total of CIS deducted in the base currency - only applicable in UK  # noqa: E501

        :param base_currency_total_after_cis_deduction: The base_currency_total_after_cis_deduction of this PurchaseCreditNote.  # noqa: E501
        :type: float
        """

        self._base_currency_total_after_cis_deduction = base_currency_total_after_cis_deduction

    @property
    def has_cis_labour(self):
        """Gets the has_cis_labour of this PurchaseCreditNote.  # noqa: E501

        Identifies an artefact as having CIS Labour line items  # noqa: E501

        :return: The has_cis_labour of this PurchaseCreditNote.  # noqa: E501
        :rtype: bool
        """
        return self._has_cis_labour

    @has_cis_labour.setter
    def has_cis_labour(self, has_cis_labour):
        """Sets the has_cis_labour of this PurchaseCreditNote.

        Identifies an artefact as having CIS Labour line items  # noqa: E501

        :param has_cis_labour: The has_cis_labour of this PurchaseCreditNote.  # noqa: E501
        :type: bool
        """

        self._has_cis_labour = has_cis_labour

    @property
    def has_cis_materials(self):
        """Gets the has_cis_materials of this PurchaseCreditNote.  # noqa: E501

        Identifies an artefact as having CIS Materials line items  # noqa: E501

        :return: The has_cis_materials of this PurchaseCreditNote.  # noqa: E501
        :rtype: bool
        """
        return self._has_cis_materials

    @has_cis_materials.setter
    def has_cis_materials(self, has_cis_materials):
        """Sets the has_cis_materials of this PurchaseCreditNote.

        Identifies an artefact as having CIS Materials line items  # noqa: E501

        :param has_cis_materials: The has_cis_materials of this PurchaseCreditNote.  # noqa: E501
        :type: bool
        """

        self._has_cis_materials = has_cis_materials

    @property
    def contact(self):
        """Gets the contact of this PurchaseCreditNote.  # noqa: E501


        :return: The contact of this PurchaseCreditNote.  # noqa: E501
        :rtype: Contact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this PurchaseCreditNote.


        :param contact: The contact of this PurchaseCreditNote.  # noqa: E501
        :type: Contact
        """

        self._contact = contact

    @property
    def base_currency_total_itc_amount(self):
        """Gets the base_currency_total_itc_amount of this PurchaseCreditNote.  # noqa: E501

        The total amount of input tax credit in base currency for the                      purchase credit note (Canada only)  # noqa: E501

        :return: The base_currency_total_itc_amount of this PurchaseCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_total_itc_amount

    @base_currency_total_itc_amount.setter
    def base_currency_total_itc_amount(self, base_currency_total_itc_amount):
        """Sets the base_currency_total_itc_amount of this PurchaseCreditNote.

        The total amount of input tax credit in base currency for the                      purchase credit note (Canada only)  # noqa: E501

        :param base_currency_total_itc_amount: The base_currency_total_itc_amount of this PurchaseCreditNote.  # noqa: E501
        :type: float
        """

        self._base_currency_total_itc_amount = base_currency_total_itc_amount

    @property
    def total_itc_amount(self):
        """Gets the total_itc_amount of this PurchaseCreditNote.  # noqa: E501

        The total amount of input tax credit for the purchase credit note (Canada only)  # noqa: E501

        :return: The total_itc_amount of this PurchaseCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._total_itc_amount

    @total_itc_amount.setter
    def total_itc_amount(self, total_itc_amount):
        """Sets the total_itc_amount of this PurchaseCreditNote.

        The total amount of input tax credit for the purchase credit note (Canada only)  # noqa: E501

        :param total_itc_amount: The total_itc_amount of this PurchaseCreditNote.  # noqa: E501
        :type: float
        """

        self._total_itc_amount = total_itc_amount

    @property
    def base_currency_total_itr_amount(self):
        """Gets the base_currency_total_itr_amount of this PurchaseCreditNote.  # noqa: E501

        The total amount of input tax refund in base currency for the                      purchase credit note (Canada only)  # noqa: E501

        :return: The base_currency_total_itr_amount of this PurchaseCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_total_itr_amount

    @base_currency_total_itr_amount.setter
    def base_currency_total_itr_amount(self, base_currency_total_itr_amount):
        """Sets the base_currency_total_itr_amount of this PurchaseCreditNote.

        The total amount of input tax refund in base currency for the                      purchase credit note (Canada only)  # noqa: E501

        :param base_currency_total_itr_amount: The base_currency_total_itr_amount of this PurchaseCreditNote.  # noqa: E501
        :type: float
        """

        self._base_currency_total_itr_amount = base_currency_total_itr_amount

    @property
    def total_itr_amount(self):
        """Gets the total_itr_amount of this PurchaseCreditNote.  # noqa: E501

        The total amount of input tax refund for the purchase credit note (Canada only)  # noqa: E501

        :return: The total_itr_amount of this PurchaseCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._total_itr_amount

    @total_itr_amount.setter
    def total_itr_amount(self, total_itr_amount):
        """Sets the total_itr_amount of this PurchaseCreditNote.

        The total amount of input tax refund for the purchase credit note (Canada only)  # noqa: E501

        :param total_itr_amount: The total_itr_amount of this PurchaseCreditNote.  # noqa: E501
        :type: float
        """

        self._total_itr_amount = total_itr_amount

    @property
    def part_recoverable(self):
        """Gets the part_recoverable of this PurchaseCreditNote.  # noqa: E501

        Indicates if the purchase credit note is part recoverable or not (Canada only)  # noqa: E501

        :return: The part_recoverable of this PurchaseCreditNote.  # noqa: E501
        :rtype: bool
        """
        return self._part_recoverable

    @part_recoverable.setter
    def part_recoverable(self, part_recoverable):
        """Sets the part_recoverable of this PurchaseCreditNote.

        Indicates if the purchase credit note is part recoverable or not (Canada only)  # noqa: E501

        :param part_recoverable: The part_recoverable of this PurchaseCreditNote.  # noqa: E501
        :type: bool
        """

        self._part_recoverable = part_recoverable

    @property
    def contact_name(self):
        """Gets the contact_name of this PurchaseCreditNote.  # noqa: E501

        The name of the contact when the credit note was created  # noqa: E501

        :return: The contact_name of this PurchaseCreditNote.  # noqa: E501
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """Sets the contact_name of this PurchaseCreditNote.

        The name of the contact when the credit note was created  # noqa: E501

        :param contact_name: The contact_name of this PurchaseCreditNote.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                contact_name is not None and len(contact_name) > 255):
            raise ValueError("Invalid value for `contact_name`, length must be less than or equal to `255`")  # noqa: E501

        self._contact_name = contact_name

    @property
    def contact_reference(self):
        """Gets the contact_reference of this PurchaseCreditNote.  # noqa: E501

        The reference of the contact when the credit note was created  # noqa: E501

        :return: The contact_reference of this PurchaseCreditNote.  # noqa: E501
        :rtype: str
        """
        return self._contact_reference

    @contact_reference.setter
    def contact_reference(self, contact_reference):
        """Sets the contact_reference of this PurchaseCreditNote.

        The reference of the contact when the credit note was created  # noqa: E501

        :param contact_reference: The contact_reference of this PurchaseCreditNote.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                contact_reference is not None and len(contact_reference) > 255):
            raise ValueError("Invalid value for `contact_reference`, length must be less than or equal to `255`")  # noqa: E501

        self._contact_reference = contact_reference

    @property
    def date(self):
        """Gets the date of this PurchaseCreditNote.  # noqa: E501

        The date of the credit note  # noqa: E501

        :return: The date of this PurchaseCreditNote.  # noqa: E501
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this PurchaseCreditNote.

        The date of the credit note  # noqa: E501

        :param date: The date of this PurchaseCreditNote.  # noqa: E501
        :type: date
        """

        self._date = date

    @property
    def original_invoice_date(self):
        """Gets the original_invoice_date of this PurchaseCreditNote.  # noqa: E501

        The date of the original invoice  # noqa: E501

        :return: The original_invoice_date of this PurchaseCreditNote.  # noqa: E501
        :rtype: date
        """
        return self._original_invoice_date

    @original_invoice_date.setter
    def original_invoice_date(self, original_invoice_date):
        """Sets the original_invoice_date of this PurchaseCreditNote.

        The date of the original invoice  # noqa: E501

        :param original_invoice_date: The original_invoice_date of this PurchaseCreditNote.  # noqa: E501
        :type: date
        """

        self._original_invoice_date = original_invoice_date

    @property
    def reference(self):
        """Gets the reference of this PurchaseCreditNote.  # noqa: E501

        The reference for the credit note  # noqa: E501

        :return: The reference of this PurchaseCreditNote.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this PurchaseCreditNote.

        The reference for the credit note  # noqa: E501

        :param reference: The reference of this PurchaseCreditNote.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                reference is not None and len(reference) > 25):
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `25`")  # noqa: E501

        self._reference = reference

    @property
    def vendor_reference(self):
        """Gets the vendor_reference of this PurchaseCreditNote.  # noqa: E501

        The vendor reference for the credit note  # noqa: E501

        :return: The vendor_reference of this PurchaseCreditNote.  # noqa: E501
        :rtype: str
        """
        return self._vendor_reference

    @vendor_reference.setter
    def vendor_reference(self, vendor_reference):
        """Sets the vendor_reference of this PurchaseCreditNote.

        The vendor reference for the credit note  # noqa: E501

        :param vendor_reference: The vendor_reference of this PurchaseCreditNote.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                vendor_reference is not None and len(vendor_reference) > 31):
            raise ValueError("Invalid value for `vendor_reference`, length must be less than or equal to `31`")  # noqa: E501

        self._vendor_reference = vendor_reference

    @property
    def notes(self):
        """Gets the notes of this PurchaseCreditNote.  # noqa: E501

        credit note notes  # noqa: E501

        :return: The notes of this PurchaseCreditNote.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this PurchaseCreditNote.

        credit note notes  # noqa: E501

        :param notes: The notes of this PurchaseCreditNote.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                notes is not None and len(notes) > 2000):
            raise ValueError("Invalid value for `notes`, length must be less than or equal to `2000`")  # noqa: E501

        self._notes = notes

    @property
    def total_quantity(self):
        """Gets the total_quantity of this PurchaseCreditNote.  # noqa: E501

        The total quantity of the credit note  # noqa: E501

        :return: The total_quantity of this PurchaseCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._total_quantity

    @total_quantity.setter
    def total_quantity(self, total_quantity):
        """Sets the total_quantity of this PurchaseCreditNote.

        The total quantity of the credit note  # noqa: E501

        :param total_quantity: The total_quantity of this PurchaseCreditNote.  # noqa: E501
        :type: float
        """

        self._total_quantity = total_quantity

    @property
    def net_amount(self):
        """Gets the net_amount of this PurchaseCreditNote.  # noqa: E501

        The net amount of the credit note  # noqa: E501

        :return: The net_amount of this PurchaseCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._net_amount

    @net_amount.setter
    def net_amount(self, net_amount):
        """Sets the net_amount of this PurchaseCreditNote.

        The net amount of the credit note  # noqa: E501

        :param net_amount: The net_amount of this PurchaseCreditNote.  # noqa: E501
        :type: float
        """

        self._net_amount = net_amount

    @property
    def tax_amount(self):
        """Gets the tax_amount of this PurchaseCreditNote.  # noqa: E501

        The tax amount of the credit note  # noqa: E501

        :return: The tax_amount of this PurchaseCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this PurchaseCreditNote.

        The tax amount of the credit note  # noqa: E501

        :param tax_amount: The tax_amount of this PurchaseCreditNote.  # noqa: E501
        :type: float
        """

        self._tax_amount = tax_amount

    @property
    def total_amount(self):
        """Gets the total_amount of this PurchaseCreditNote.  # noqa: E501

        The total amount of the credit note  # noqa: E501

        :return: The total_amount of this PurchaseCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this PurchaseCreditNote.

        The total amount of the credit note  # noqa: E501

        :param total_amount: The total_amount of this PurchaseCreditNote.  # noqa: E501
        :type: float
        """

        self._total_amount = total_amount

    @property
    def payments_allocations_total_amount(self):
        """Gets the payments_allocations_total_amount of this PurchaseCreditNote.  # noqa: E501

        The total amount of all payments and allocations  # noqa: E501

        :return: The payments_allocations_total_amount of this PurchaseCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._payments_allocations_total_amount

    @payments_allocations_total_amount.setter
    def payments_allocations_total_amount(self, payments_allocations_total_amount):
        """Sets the payments_allocations_total_amount of this PurchaseCreditNote.

        The total amount of all payments and allocations  # noqa: E501

        :param payments_allocations_total_amount: The payments_allocations_total_amount of this PurchaseCreditNote.  # noqa: E501
        :type: float
        """

        self._payments_allocations_total_amount = payments_allocations_total_amount

    @property
    def payments_allocations_total_discount(self):
        """Gets the payments_allocations_total_discount of this PurchaseCreditNote.  # noqa: E501

        The total discount of all payments and allocations  # noqa: E501

        :return: The payments_allocations_total_discount of this PurchaseCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._payments_allocations_total_discount

    @payments_allocations_total_discount.setter
    def payments_allocations_total_discount(self, payments_allocations_total_discount):
        """Sets the payments_allocations_total_discount of this PurchaseCreditNote.

        The total discount of all payments and allocations  # noqa: E501

        :param payments_allocations_total_discount: The payments_allocations_total_discount of this PurchaseCreditNote.  # noqa: E501
        :type: float
        """

        self._payments_allocations_total_discount = payments_allocations_total_discount

    @property
    def total_paid(self):
        """Gets the total_paid of this PurchaseCreditNote.  # noqa: E501

        The total paid amount of the credit note including any payments, allocations and discounts  # noqa: E501

        :return: The total_paid of this PurchaseCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._total_paid

    @total_paid.setter
    def total_paid(self, total_paid):
        """Sets the total_paid of this PurchaseCreditNote.

        The total paid amount of the credit note including any payments, allocations and discounts  # noqa: E501

        :param total_paid: The total_paid of this PurchaseCreditNote.  # noqa: E501
        :type: float
        """

        self._total_paid = total_paid

    @property
    def outstanding_amount(self):
        """Gets the outstanding_amount of this PurchaseCreditNote.  # noqa: E501

        The outstanding amount of the credit note  # noqa: E501

        :return: The outstanding_amount of this PurchaseCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._outstanding_amount

    @outstanding_amount.setter
    def outstanding_amount(self, outstanding_amount):
        """Sets the outstanding_amount of this PurchaseCreditNote.

        The outstanding amount of the credit note  # noqa: E501

        :param outstanding_amount: The outstanding_amount of this PurchaseCreditNote.  # noqa: E501
        :type: float
        """

        self._outstanding_amount = outstanding_amount

    @property
    def currency(self):
        """Gets the currency of this PurchaseCreditNote.  # noqa: E501


        :return: The currency of this PurchaseCreditNote.  # noqa: E501
        :rtype: Base
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PurchaseCreditNote.


        :param currency: The currency of this PurchaseCreditNote.  # noqa: E501
        :type: Base
        """

        self._currency = currency

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this PurchaseCreditNote.  # noqa: E501

        The exchange rate for the credit note  # noqa: E501

        :return: The exchange_rate of this PurchaseCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this PurchaseCreditNote.

        The exchange rate for the credit note  # noqa: E501

        :param exchange_rate: The exchange_rate of this PurchaseCreditNote.  # noqa: E501
        :type: float
        """

        self._exchange_rate = exchange_rate

    @property
    def inverse_exchange_rate(self):
        """Gets the inverse_exchange_rate of this PurchaseCreditNote.  # noqa: E501

        The inverse exchange rate for the credit note  # noqa: E501

        :return: The inverse_exchange_rate of this PurchaseCreditNote.  # noqa: E501
        :rtype: str
        """
        return self._inverse_exchange_rate

    @inverse_exchange_rate.setter
    def inverse_exchange_rate(self, inverse_exchange_rate):
        """Sets the inverse_exchange_rate of this PurchaseCreditNote.

        The inverse exchange rate for the credit note  # noqa: E501

        :param inverse_exchange_rate: The inverse_exchange_rate of this PurchaseCreditNote.  # noqa: E501
        :type: str
        """

        self._inverse_exchange_rate = inverse_exchange_rate

    @property
    def base_currency_net_amount(self):
        """Gets the base_currency_net_amount of this PurchaseCreditNote.  # noqa: E501

        The net amount of the credit note in base currency  # noqa: E501

        :return: The base_currency_net_amount of this PurchaseCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_net_amount

    @base_currency_net_amount.setter
    def base_currency_net_amount(self, base_currency_net_amount):
        """Sets the base_currency_net_amount of this PurchaseCreditNote.

        The net amount of the credit note in base currency  # noqa: E501

        :param base_currency_net_amount: The base_currency_net_amount of this PurchaseCreditNote.  # noqa: E501
        :type: float
        """

        self._base_currency_net_amount = base_currency_net_amount

    @property
    def base_currency_tax_amount(self):
        """Gets the base_currency_tax_amount of this PurchaseCreditNote.  # noqa: E501

        The tax amount of the credit note in base currency  # noqa: E501

        :return: The base_currency_tax_amount of this PurchaseCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_tax_amount

    @base_currency_tax_amount.setter
    def base_currency_tax_amount(self, base_currency_tax_amount):
        """Sets the base_currency_tax_amount of this PurchaseCreditNote.

        The tax amount of the credit note in base currency  # noqa: E501

        :param base_currency_tax_amount: The base_currency_tax_amount of this PurchaseCreditNote.  # noqa: E501
        :type: float
        """

        self._base_currency_tax_amount = base_currency_tax_amount

    @property
    def base_currency_total_amount(self):
        """Gets the base_currency_total_amount of this PurchaseCreditNote.  # noqa: E501

        The total amount of the credit note in base currency  # noqa: E501

        :return: The base_currency_total_amount of this PurchaseCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_total_amount

    @base_currency_total_amount.setter
    def base_currency_total_amount(self, base_currency_total_amount):
        """Sets the base_currency_total_amount of this PurchaseCreditNote.

        The total amount of the credit note in base currency  # noqa: E501

        :param base_currency_total_amount: The base_currency_total_amount of this PurchaseCreditNote.  # noqa: E501
        :type: float
        """

        self._base_currency_total_amount = base_currency_total_amount

    @property
    def base_currency_outstanding_amount(self):
        """Gets the base_currency_outstanding_amount of this PurchaseCreditNote.  # noqa: E501

        The outstanding amount of the credit note in base currency  # noqa: E501

        :return: The base_currency_outstanding_amount of this PurchaseCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_outstanding_amount

    @base_currency_outstanding_amount.setter
    def base_currency_outstanding_amount(self, base_currency_outstanding_amount):
        """Sets the base_currency_outstanding_amount of this PurchaseCreditNote.

        The outstanding amount of the credit note in base currency  # noqa: E501

        :param base_currency_outstanding_amount: The base_currency_outstanding_amount of this PurchaseCreditNote.  # noqa: E501
        :type: float
        """

        self._base_currency_outstanding_amount = base_currency_outstanding_amount

    @property
    def status(self):
        """Gets the status of this PurchaseCreditNote.  # noqa: E501


        :return: The status of this PurchaseCreditNote.  # noqa: E501
        :rtype: Base
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PurchaseCreditNote.


        :param status: The status of this PurchaseCreditNote.  # noqa: E501
        :type: Base
        """

        self._status = status

    @property
    def void_reason(self):
        """Gets the void_reason of this PurchaseCreditNote.  # noqa: E501

        The reason the credit note was voided  # noqa: E501

        :return: The void_reason of this PurchaseCreditNote.  # noqa: E501
        :rtype: str
        """
        return self._void_reason

    @void_reason.setter
    def void_reason(self, void_reason):
        """Sets the void_reason of this PurchaseCreditNote.

        The reason the credit note was voided  # noqa: E501

        :param void_reason: The void_reason of this PurchaseCreditNote.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                void_reason is not None and len(void_reason) > 255):
            raise ValueError("Invalid value for `void_reason`, length must be less than or equal to `255`")  # noqa: E501

        self._void_reason = void_reason

    @property
    def credit_note_lines(self):
        """Gets the credit_note_lines of this PurchaseCreditNote.  # noqa: E501

        The credit note lines of the credit note  # noqa: E501

        :return: The credit_note_lines of this PurchaseCreditNote.  # noqa: E501
        :rtype: list[PurchaseCreditNoteLineItem]
        """
        return self._credit_note_lines

    @credit_note_lines.setter
    def credit_note_lines(self, credit_note_lines):
        """Sets the credit_note_lines of this PurchaseCreditNote.

        The credit note lines of the credit note  # noqa: E501

        :param credit_note_lines: The credit_note_lines of this PurchaseCreditNote.  # noqa: E501
        :type: list[PurchaseCreditNoteLineItem]
        """

        self._credit_note_lines = credit_note_lines

    @property
    def tax_analysis(self):
        """Gets the tax_analysis of this PurchaseCreditNote.  # noqa: E501

        The credit note tax analysis  # noqa: E501

        :return: The tax_analysis of this PurchaseCreditNote.  # noqa: E501
        :rtype: list[ArtefactTaxAnalysis]
        """
        return self._tax_analysis

    @tax_analysis.setter
    def tax_analysis(self, tax_analysis):
        """Sets the tax_analysis of this PurchaseCreditNote.

        The credit note tax analysis  # noqa: E501

        :param tax_analysis: The tax_analysis of this PurchaseCreditNote.  # noqa: E501
        :type: list[ArtefactTaxAnalysis]
        """

        self._tax_analysis = tax_analysis

    @property
    def detailed_tax_analysis(self):
        """Gets the detailed_tax_analysis of this PurchaseCreditNote.  # noqa: E501


        :return: The detailed_tax_analysis of this PurchaseCreditNote.  # noqa: E501
        :rtype: ArtefactDetailedTaxAnalysis
        """
        return self._detailed_tax_analysis

    @detailed_tax_analysis.setter
    def detailed_tax_analysis(self, detailed_tax_analysis):
        """Sets the detailed_tax_analysis of this PurchaseCreditNote.


        :param detailed_tax_analysis: The detailed_tax_analysis of this PurchaseCreditNote.  # noqa: E501
        :type: ArtefactDetailedTaxAnalysis
        """

        self._detailed_tax_analysis = detailed_tax_analysis

    @property
    def payments_allocations(self):
        """Gets the payments_allocations of this PurchaseCreditNote.  # noqa: E501

        The associated payments and allocations  # noqa: E501

        :return: The payments_allocations of this PurchaseCreditNote.  # noqa: E501
        :rtype: list[PaymentAllocation]
        """
        return self._payments_allocations

    @payments_allocations.setter
    def payments_allocations(self, payments_allocations):
        """Sets the payments_allocations of this PurchaseCreditNote.

        The associated payments and allocations  # noqa: E501

        :param payments_allocations: The payments_allocations of this PurchaseCreditNote.  # noqa: E501
        :type: list[PaymentAllocation]
        """

        self._payments_allocations = payments_allocations

    @property
    def last_paid(self):
        """Gets the last_paid of this PurchaseCreditNote.  # noqa: E501

        The date of the last payment  # noqa: E501

        :return: The last_paid of this PurchaseCreditNote.  # noqa: E501
        :rtype: date
        """
        return self._last_paid

    @last_paid.setter
    def last_paid(self, last_paid):
        """Sets the last_paid of this PurchaseCreditNote.

        The date of the last payment  # noqa: E501

        :param last_paid: The last_paid of this PurchaseCreditNote.  # noqa: E501
        :type: date
        """

        self._last_paid = last_paid

    @property
    def tax_address_region(self):
        """Gets the tax_address_region of this PurchaseCreditNote.  # noqa: E501


        :return: The tax_address_region of this PurchaseCreditNote.  # noqa: E501
        :rtype: Base
        """
        return self._tax_address_region

    @tax_address_region.setter
    def tax_address_region(self, tax_address_region):
        """Sets the tax_address_region of this PurchaseCreditNote.


        :param tax_address_region: The tax_address_region of this PurchaseCreditNote.  # noqa: E501
        :type: Base
        """

        self._tax_address_region = tax_address_region

    @property
    def tax_reconciled(self):
        """Gets the tax_reconciled of this PurchaseCreditNote.  # noqa: E501

        Indicates if the purchase credit note is tax reconciled or not.  # noqa: E501

        :return: The tax_reconciled of this PurchaseCreditNote.  # noqa: E501
        :rtype: bool
        """
        return self._tax_reconciled

    @tax_reconciled.setter
    def tax_reconciled(self, tax_reconciled):
        """Sets the tax_reconciled of this PurchaseCreditNote.

        Indicates if the purchase credit note is tax reconciled or not.  # noqa: E501

        :param tax_reconciled: The tax_reconciled of this PurchaseCreditNote.  # noqa: E501
        :type: bool
        """

        self._tax_reconciled = tax_reconciled

    @property
    def migrated(self):
        """Gets the migrated of this PurchaseCreditNote.  # noqa: E501

        Indicates if the purchase credit note was migrated from another system.  # noqa: E501

        :return: The migrated of this PurchaseCreditNote.  # noqa: E501
        :rtype: bool
        """
        return self._migrated

    @migrated.setter
    def migrated(self, migrated):
        """Sets the migrated of this PurchaseCreditNote.

        Indicates if the purchase credit note was migrated from another system.  # noqa: E501

        :param migrated: The migrated of this PurchaseCreditNote.  # noqa: E501
        :type: bool
        """

        self._migrated = migrated

    @property
    def tax_calculation_method(self):
        """Gets the tax_calculation_method of this PurchaseCreditNote.  # noqa: E501

        The tax calculation method, if applicable, for this purchase credit note, returns invoice or cash.  # noqa: E501

        :return: The tax_calculation_method of this PurchaseCreditNote.  # noqa: E501
        :rtype: str
        """
        return self._tax_calculation_method

    @tax_calculation_method.setter
    def tax_calculation_method(self, tax_calculation_method):
        """Sets the tax_calculation_method of this PurchaseCreditNote.

        The tax calculation method, if applicable, for this purchase credit note, returns invoice or cash.  # noqa: E501

        :param tax_calculation_method: The tax_calculation_method of this PurchaseCreditNote.  # noqa: E501
        :type: str
        """

        self._tax_calculation_method = tax_calculation_method

    @property
    def withholding_tax_rate(self):
        """Gets the withholding_tax_rate of this PurchaseCreditNote.  # noqa: E501

        The withheld Tax Rate - only applicable in UK (CIS subcontractor tax rate)  # noqa: E501

        :return: The withholding_tax_rate of this PurchaseCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._withholding_tax_rate

    @withholding_tax_rate.setter
    def withholding_tax_rate(self, withholding_tax_rate):
        """Sets the withholding_tax_rate of this PurchaseCreditNote.

        The withheld Tax Rate - only applicable in UK (CIS subcontractor tax rate)  # noqa: E501

        :param withholding_tax_rate: The withholding_tax_rate of this PurchaseCreditNote.  # noqa: E501
        :type: float
        """

        self._withholding_tax_rate = withholding_tax_rate

    @property
    def withholding_tax_amount(self):
        """Gets the withholding_tax_amount of this PurchaseCreditNote.  # noqa: E501

        The withheld Tax Amount - only applicable in UK (CIS subcontractor tax)  # noqa: E501

        :return: The withholding_tax_amount of this PurchaseCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._withholding_tax_amount

    @withholding_tax_amount.setter
    def withholding_tax_amount(self, withholding_tax_amount):
        """Sets the withholding_tax_amount of this PurchaseCreditNote.

        The withheld Tax Amount - only applicable in UK (CIS subcontractor tax)  # noqa: E501

        :param withholding_tax_amount: The withholding_tax_amount of this PurchaseCreditNote.  # noqa: E501
        :type: float
        """

        self._withholding_tax_amount = withholding_tax_amount

    @property
    def base_currency_withholding_tax_amount(self):
        """Gets the base_currency_withholding_tax_amount of this PurchaseCreditNote.  # noqa: E501

        The withheld Tax Amount in the base currency - only applicable in UK (CIS subcontractor tax)  # noqa: E501

        :return: The base_currency_withholding_tax_amount of this PurchaseCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_withholding_tax_amount

    @base_currency_withholding_tax_amount.setter
    def base_currency_withholding_tax_amount(self, base_currency_withholding_tax_amount):
        """Sets the base_currency_withholding_tax_amount of this PurchaseCreditNote.

        The withheld Tax Amount in the base currency - only applicable in UK (CIS subcontractor tax)  # noqa: E501

        :param base_currency_withholding_tax_amount: The base_currency_withholding_tax_amount of this PurchaseCreditNote.  # noqa: E501
        :type: float
        """

        self._base_currency_withholding_tax_amount = base_currency_withholding_tax_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PurchaseCreditNote):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PurchaseCreditNote):
            return True

        return self.to_dict() != other.to_dict()
