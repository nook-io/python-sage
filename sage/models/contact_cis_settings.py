# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class ContactCisSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'registered_cis_name': 'str',
        'subcontractor_verification_number': 'str',
        'deduction_rate': 'ContactCisDeductionRate'
    }

    attribute_map = {
        'registered_cis_name': 'registered_cis_name',
        'subcontractor_verification_number': 'subcontractor_verification_number',
        'deduction_rate': 'deduction_rate'
    }

    def __init__(self, registered_cis_name=None, subcontractor_verification_number=None, deduction_rate=None, local_vars_configuration=None):  # noqa: E501
        """ContactCisSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._registered_cis_name = None
        self._subcontractor_verification_number = None
        self._deduction_rate = None
        self.discriminator = None

        if registered_cis_name is not None:
            self.registered_cis_name = registered_cis_name
        if subcontractor_verification_number is not None:
            self.subcontractor_verification_number = subcontractor_verification_number
        if deduction_rate is not None:
            self.deduction_rate = deduction_rate

    @property
    def registered_cis_name(self):
        """Gets the registered_cis_name of this ContactCisSettings.  # noqa: E501

        the CIS name for the Contact  # noqa: E501

        :return: The registered_cis_name of this ContactCisSettings.  # noqa: E501
        :rtype: str
        """
        return self._registered_cis_name

    @registered_cis_name.setter
    def registered_cis_name(self, registered_cis_name):
        """Sets the registered_cis_name of this ContactCisSettings.

        the CIS name for the Contact  # noqa: E501

        :param registered_cis_name: The registered_cis_name of this ContactCisSettings.  # noqa: E501
        :type: str
        """

        self._registered_cis_name = registered_cis_name

    @property
    def subcontractor_verification_number(self):
        """Gets the subcontractor_verification_number of this ContactCisSettings.  # noqa: E501

        The CIS Verification number for the contact  # noqa: E501

        :return: The subcontractor_verification_number of this ContactCisSettings.  # noqa: E501
        :rtype: str
        """
        return self._subcontractor_verification_number

    @subcontractor_verification_number.setter
    def subcontractor_verification_number(self, subcontractor_verification_number):
        """Sets the subcontractor_verification_number of this ContactCisSettings.

        The CIS Verification number for the contact  # noqa: E501

        :param subcontractor_verification_number: The subcontractor_verification_number of this ContactCisSettings.  # noqa: E501
        :type: str
        """

        self._subcontractor_verification_number = subcontractor_verification_number

    @property
    def deduction_rate(self):
        """Gets the deduction_rate of this ContactCisSettings.  # noqa: E501


        :return: The deduction_rate of this ContactCisSettings.  # noqa: E501
        :rtype: ContactCisDeductionRate
        """
        return self._deduction_rate

    @deduction_rate.setter
    def deduction_rate(self, deduction_rate):
        """Sets the deduction_rate of this ContactCisSettings.


        :param deduction_rate: The deduction_rate of this ContactCisSettings.  # noqa: E501
        :type: ContactCisDeductionRate
        """

        self._deduction_rate = deduction_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactCisSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContactCisSettings):
            return True

        return self.to_dict() != other.to_dict()
