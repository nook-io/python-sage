# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class PutSalesCreditNotesSalesCreditNote(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'contact_id': 'str',
        'date': 'date',
        'cis_applicable_amount': 'float',
        'base_currency_cis_applicable_amount': 'float',
        'total_after_cis_deduction': 'float',
        'base_currency_total_after_cis_deduction': 'float',
        'credit_note_number_prefix': 'str',
        'credit_note_number': 'str',
        'contact_name': 'str',
        'contact_reference': 'str',
        'original_invoice_date': 'date',
        'reference': 'str',
        'notes': 'str',
        'terms_and_conditions': 'str',
        'shipping_net_amount': 'float',
        'shipping_tax_rate_id': 'str',
        'shipping_tax_amount': 'float',
        'total_quantity': 'float',
        'shipping_total_amount': 'float',
        'net_amount': 'float',
        'tax_amount': 'float',
        'total_amount': 'float',
        'currency_id': 'str',
        'exchange_rate': 'float',
        'inverse_exchange_rate': 'float',
        'base_currency_shipping_net_amount': 'float',
        'base_currency_shipping_tax_amount': 'float',
        'base_currency_shipping_total_amount': 'float',
        'total_discount_amount': 'float',
        'base_currency_total_discount_amount': 'float',
        'base_currency_net_amount': 'float',
        'base_currency_tax_amount': 'float',
        'base_currency_total_amount': 'float',
        'status_id': 'str',
        'sent': 'bool',
        'tax_address_region_id': 'str',
        'withholding_tax_rate': 'float',
        'withholding_tax_amount': 'float',
        'base_currency_withholding_tax_amount': 'float',
        'main_address': 'PostSalesCorrectiveInvoicesSalesCorrectiveInvoiceMainAddress',
        'delivery_address': 'PostSalesCorrectiveInvoicesSalesCorrectiveInvoiceMainAddress',
        'credit_note_lines': 'list[PutSalesCreditNotesSalesCreditNoteCreditNoteLines]',
        'tax_analysis': 'list[PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysis]'
    }

    attribute_map = {
        'contact_id': 'contact_id',
        'date': 'date',
        'cis_applicable_amount': 'cis_applicable_amount',
        'base_currency_cis_applicable_amount': 'base_currency_cis_applicable_amount',
        'total_after_cis_deduction': 'total_after_cis_deduction',
        'base_currency_total_after_cis_deduction': 'base_currency_total_after_cis_deduction',
        'credit_note_number_prefix': 'credit_note_number_prefix',
        'credit_note_number': 'credit_note_number',
        'contact_name': 'contact_name',
        'contact_reference': 'contact_reference',
        'original_invoice_date': 'original_invoice_date',
        'reference': 'reference',
        'notes': 'notes',
        'terms_and_conditions': 'terms_and_conditions',
        'shipping_net_amount': 'shipping_net_amount',
        'shipping_tax_rate_id': 'shipping_tax_rate_id',
        'shipping_tax_amount': 'shipping_tax_amount',
        'total_quantity': 'total_quantity',
        'shipping_total_amount': 'shipping_total_amount',
        'net_amount': 'net_amount',
        'tax_amount': 'tax_amount',
        'total_amount': 'total_amount',
        'currency_id': 'currency_id',
        'exchange_rate': 'exchange_rate',
        'inverse_exchange_rate': 'inverse_exchange_rate',
        'base_currency_shipping_net_amount': 'base_currency_shipping_net_amount',
        'base_currency_shipping_tax_amount': 'base_currency_shipping_tax_amount',
        'base_currency_shipping_total_amount': 'base_currency_shipping_total_amount',
        'total_discount_amount': 'total_discount_amount',
        'base_currency_total_discount_amount': 'base_currency_total_discount_amount',
        'base_currency_net_amount': 'base_currency_net_amount',
        'base_currency_tax_amount': 'base_currency_tax_amount',
        'base_currency_total_amount': 'base_currency_total_amount',
        'status_id': 'status_id',
        'sent': 'sent',
        'tax_address_region_id': 'tax_address_region_id',
        'withholding_tax_rate': 'withholding_tax_rate',
        'withholding_tax_amount': 'withholding_tax_amount',
        'base_currency_withholding_tax_amount': 'base_currency_withholding_tax_amount',
        'main_address': 'main_address',
        'delivery_address': 'delivery_address',
        'credit_note_lines': 'credit_note_lines',
        'tax_analysis': 'tax_analysis'
    }

    def __init__(self, contact_id=None, date=None, cis_applicable_amount=None, base_currency_cis_applicable_amount=None, total_after_cis_deduction=None, base_currency_total_after_cis_deduction=None, credit_note_number_prefix=None, credit_note_number=None, contact_name=None, contact_reference=None, original_invoice_date=None, reference=None, notes=None, terms_and_conditions=None, shipping_net_amount=None, shipping_tax_rate_id=None, shipping_tax_amount=None, total_quantity=None, shipping_total_amount=None, net_amount=None, tax_amount=None, total_amount=None, currency_id=None, exchange_rate=None, inverse_exchange_rate=None, base_currency_shipping_net_amount=None, base_currency_shipping_tax_amount=None, base_currency_shipping_total_amount=None, total_discount_amount=None, base_currency_total_discount_amount=None, base_currency_net_amount=None, base_currency_tax_amount=None, base_currency_total_amount=None, status_id=None, sent=None, tax_address_region_id=None, withholding_tax_rate=None, withholding_tax_amount=None, base_currency_withholding_tax_amount=None, main_address=None, delivery_address=None, credit_note_lines=None, tax_analysis=None, local_vars_configuration=None):  # noqa: E501
        """PutSalesCreditNotesSalesCreditNote - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._contact_id = None
        self._date = None
        self._cis_applicable_amount = None
        self._base_currency_cis_applicable_amount = None
        self._total_after_cis_deduction = None
        self._base_currency_total_after_cis_deduction = None
        self._credit_note_number_prefix = None
        self._credit_note_number = None
        self._contact_name = None
        self._contact_reference = None
        self._original_invoice_date = None
        self._reference = None
        self._notes = None
        self._terms_and_conditions = None
        self._shipping_net_amount = None
        self._shipping_tax_rate_id = None
        self._shipping_tax_amount = None
        self._total_quantity = None
        self._shipping_total_amount = None
        self._net_amount = None
        self._tax_amount = None
        self._total_amount = None
        self._currency_id = None
        self._exchange_rate = None
        self._inverse_exchange_rate = None
        self._base_currency_shipping_net_amount = None
        self._base_currency_shipping_tax_amount = None
        self._base_currency_shipping_total_amount = None
        self._total_discount_amount = None
        self._base_currency_total_discount_amount = None
        self._base_currency_net_amount = None
        self._base_currency_tax_amount = None
        self._base_currency_total_amount = None
        self._status_id = None
        self._sent = None
        self._tax_address_region_id = None
        self._withholding_tax_rate = None
        self._withholding_tax_amount = None
        self._base_currency_withholding_tax_amount = None
        self._main_address = None
        self._delivery_address = None
        self._credit_note_lines = None
        self._tax_analysis = None
        self.discriminator = None

        if contact_id is not None:
            self.contact_id = contact_id
        if date is not None:
            self.date = date
        if cis_applicable_amount is not None:
            self.cis_applicable_amount = cis_applicable_amount
        if base_currency_cis_applicable_amount is not None:
            self.base_currency_cis_applicable_amount = base_currency_cis_applicable_amount
        if total_after_cis_deduction is not None:
            self.total_after_cis_deduction = total_after_cis_deduction
        if base_currency_total_after_cis_deduction is not None:
            self.base_currency_total_after_cis_deduction = base_currency_total_after_cis_deduction
        if credit_note_number_prefix is not None:
            self.credit_note_number_prefix = credit_note_number_prefix
        if credit_note_number is not None:
            self.credit_note_number = credit_note_number
        if contact_name is not None:
            self.contact_name = contact_name
        if contact_reference is not None:
            self.contact_reference = contact_reference
        if original_invoice_date is not None:
            self.original_invoice_date = original_invoice_date
        if reference is not None:
            self.reference = reference
        if notes is not None:
            self.notes = notes
        if terms_and_conditions is not None:
            self.terms_and_conditions = terms_and_conditions
        if shipping_net_amount is not None:
            self.shipping_net_amount = shipping_net_amount
        if shipping_tax_rate_id is not None:
            self.shipping_tax_rate_id = shipping_tax_rate_id
        if shipping_tax_amount is not None:
            self.shipping_tax_amount = shipping_tax_amount
        if total_quantity is not None:
            self.total_quantity = total_quantity
        if shipping_total_amount is not None:
            self.shipping_total_amount = shipping_total_amount
        if net_amount is not None:
            self.net_amount = net_amount
        if tax_amount is not None:
            self.tax_amount = tax_amount
        if total_amount is not None:
            self.total_amount = total_amount
        if currency_id is not None:
            self.currency_id = currency_id
        if exchange_rate is not None:
            self.exchange_rate = exchange_rate
        if inverse_exchange_rate is not None:
            self.inverse_exchange_rate = inverse_exchange_rate
        if base_currency_shipping_net_amount is not None:
            self.base_currency_shipping_net_amount = base_currency_shipping_net_amount
        if base_currency_shipping_tax_amount is not None:
            self.base_currency_shipping_tax_amount = base_currency_shipping_tax_amount
        if base_currency_shipping_total_amount is not None:
            self.base_currency_shipping_total_amount = base_currency_shipping_total_amount
        if total_discount_amount is not None:
            self.total_discount_amount = total_discount_amount
        if base_currency_total_discount_amount is not None:
            self.base_currency_total_discount_amount = base_currency_total_discount_amount
        if base_currency_net_amount is not None:
            self.base_currency_net_amount = base_currency_net_amount
        if base_currency_tax_amount is not None:
            self.base_currency_tax_amount = base_currency_tax_amount
        if base_currency_total_amount is not None:
            self.base_currency_total_amount = base_currency_total_amount
        if status_id is not None:
            self.status_id = status_id
        if sent is not None:
            self.sent = sent
        if tax_address_region_id is not None:
            self.tax_address_region_id = tax_address_region_id
        if withholding_tax_rate is not None:
            self.withholding_tax_rate = withholding_tax_rate
        if withholding_tax_amount is not None:
            self.withholding_tax_amount = withholding_tax_amount
        if base_currency_withholding_tax_amount is not None:
            self.base_currency_withholding_tax_amount = base_currency_withholding_tax_amount
        if main_address is not None:
            self.main_address = main_address
        if delivery_address is not None:
            self.delivery_address = delivery_address
        if credit_note_lines is not None:
            self.credit_note_lines = credit_note_lines
        if tax_analysis is not None:
            self.tax_analysis = tax_analysis

    @property
    def contact_id(self):
        """Gets the contact_id of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The contact the sales credit note relates to  # noqa: E501

        :return: The contact_id of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: str
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this PutSalesCreditNotesSalesCreditNote.

        The contact the sales credit note relates to  # noqa: E501

        :param contact_id: The contact_id of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: str
        """

        self._contact_id = contact_id

    @property
    def date(self):
        """Gets the date of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The date of the credit note  # noqa: E501

        :return: The date of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this PutSalesCreditNotesSalesCreditNote.

        The date of the credit note  # noqa: E501

        :param date: The date of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: date
        """

        self._date = date

    @property
    def cis_applicable_amount(self):
        """Gets the cis_applicable_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The total amount of CIS deductible labour - only applicable in UK  # noqa: E501

        :return: The cis_applicable_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._cis_applicable_amount

    @cis_applicable_amount.setter
    def cis_applicable_amount(self, cis_applicable_amount):
        """Sets the cis_applicable_amount of this PutSalesCreditNotesSalesCreditNote.

        The total amount of CIS deductible labour - only applicable in UK  # noqa: E501

        :param cis_applicable_amount: The cis_applicable_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: float
        """

        self._cis_applicable_amount = cis_applicable_amount

    @property
    def base_currency_cis_applicable_amount(self):
        """Gets the base_currency_cis_applicable_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The total amount of CIS deductible labour in the base currency - only applicable in UK  # noqa: E501

        :return: The base_currency_cis_applicable_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_cis_applicable_amount

    @base_currency_cis_applicable_amount.setter
    def base_currency_cis_applicable_amount(self, base_currency_cis_applicable_amount):
        """Sets the base_currency_cis_applicable_amount of this PutSalesCreditNotesSalesCreditNote.

        The total amount of CIS deductible labour in the base currency - only applicable in UK  # noqa: E501

        :param base_currency_cis_applicable_amount: The base_currency_cis_applicable_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: float
        """

        self._base_currency_cis_applicable_amount = base_currency_cis_applicable_amount

    @property
    def total_after_cis_deduction(self):
        """Gets the total_after_cis_deduction of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The total of the artefact with the total of CIS deducted - only applicable in UK  # noqa: E501

        :return: The total_after_cis_deduction of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._total_after_cis_deduction

    @total_after_cis_deduction.setter
    def total_after_cis_deduction(self, total_after_cis_deduction):
        """Sets the total_after_cis_deduction of this PutSalesCreditNotesSalesCreditNote.

        The total of the artefact with the total of CIS deducted - only applicable in UK  # noqa: E501

        :param total_after_cis_deduction: The total_after_cis_deduction of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: float
        """

        self._total_after_cis_deduction = total_after_cis_deduction

    @property
    def base_currency_total_after_cis_deduction(self):
        """Gets the base_currency_total_after_cis_deduction of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The total of the artefact with the total of CIS deducted in the base currency - only applicable in UK  # noqa: E501

        :return: The base_currency_total_after_cis_deduction of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_total_after_cis_deduction

    @base_currency_total_after_cis_deduction.setter
    def base_currency_total_after_cis_deduction(self, base_currency_total_after_cis_deduction):
        """Sets the base_currency_total_after_cis_deduction of this PutSalesCreditNotesSalesCreditNote.

        The total of the artefact with the total of CIS deducted in the base currency - only applicable in UK  # noqa: E501

        :param base_currency_total_after_cis_deduction: The base_currency_total_after_cis_deduction of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: float
        """

        self._base_currency_total_after_cis_deduction = base_currency_total_after_cis_deduction

    @property
    def credit_note_number_prefix(self):
        """Gets the credit_note_number_prefix of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The credit note number prefix  # noqa: E501

        :return: The credit_note_number_prefix of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: str
        """
        return self._credit_note_number_prefix

    @credit_note_number_prefix.setter
    def credit_note_number_prefix(self, credit_note_number_prefix):
        """Sets the credit_note_number_prefix of this PutSalesCreditNotesSalesCreditNote.

        The credit note number prefix  # noqa: E501

        :param credit_note_number_prefix: The credit_note_number_prefix of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: str
        """

        self._credit_note_number_prefix = credit_note_number_prefix

    @property
    def credit_note_number(self):
        """Gets the credit_note_number of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The generated credit note number  # noqa: E501

        :return: The credit_note_number of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: str
        """
        return self._credit_note_number

    @credit_note_number.setter
    def credit_note_number(self, credit_note_number):
        """Sets the credit_note_number of this PutSalesCreditNotesSalesCreditNote.

        The generated credit note number  # noqa: E501

        :param credit_note_number: The credit_note_number of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: str
        """

        self._credit_note_number = credit_note_number

    @property
    def contact_name(self):
        """Gets the contact_name of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The name of the contact when the credit note was created  # noqa: E501

        :return: The contact_name of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """Sets the contact_name of this PutSalesCreditNotesSalesCreditNote.

        The name of the contact when the credit note was created  # noqa: E501

        :param contact_name: The contact_name of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: str
        """

        self._contact_name = contact_name

    @property
    def contact_reference(self):
        """Gets the contact_reference of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The reference of the contact when the credit note was created  # noqa: E501

        :return: The contact_reference of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: str
        """
        return self._contact_reference

    @contact_reference.setter
    def contact_reference(self, contact_reference):
        """Sets the contact_reference of this PutSalesCreditNotesSalesCreditNote.

        The reference of the contact when the credit note was created  # noqa: E501

        :param contact_reference: The contact_reference of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: str
        """

        self._contact_reference = contact_reference

    @property
    def original_invoice_date(self):
        """Gets the original_invoice_date of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The date of the original invoice  # noqa: E501

        :return: The original_invoice_date of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: date
        """
        return self._original_invoice_date

    @original_invoice_date.setter
    def original_invoice_date(self, original_invoice_date):
        """Sets the original_invoice_date of this PutSalesCreditNotesSalesCreditNote.

        The date of the original invoice  # noqa: E501

        :param original_invoice_date: The original_invoice_date of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: date
        """

        self._original_invoice_date = original_invoice_date

    @property
    def reference(self):
        """Gets the reference of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The reference for the credit note  # noqa: E501

        :return: The reference of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this PutSalesCreditNotesSalesCreditNote.

        The reference for the credit note  # noqa: E501

        :param reference: The reference of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def notes(self):
        """Gets the notes of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        credit note notes  # noqa: E501

        :return: The notes of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this PutSalesCreditNotesSalesCreditNote.

        credit note notes  # noqa: E501

        :param notes: The notes of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def terms_and_conditions(self):
        """Gets the terms_and_conditions of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        Credit note terms and conditions  # noqa: E501

        :return: The terms_and_conditions of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: str
        """
        return self._terms_and_conditions

    @terms_and_conditions.setter
    def terms_and_conditions(self, terms_and_conditions):
        """Sets the terms_and_conditions of this PutSalesCreditNotesSalesCreditNote.

        Credit note terms and conditions  # noqa: E501

        :param terms_and_conditions: The terms_and_conditions of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: str
        """

        self._terms_and_conditions = terms_and_conditions

    @property
    def shipping_net_amount(self):
        """Gets the shipping_net_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The net shipping amount  # noqa: E501

        :return: The shipping_net_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._shipping_net_amount

    @shipping_net_amount.setter
    def shipping_net_amount(self, shipping_net_amount):
        """Sets the shipping_net_amount of this PutSalesCreditNotesSalesCreditNote.

        The net shipping amount  # noqa: E501

        :param shipping_net_amount: The shipping_net_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: float
        """

        self._shipping_net_amount = shipping_net_amount

    @property
    def shipping_tax_rate_id(self):
        """Gets the shipping_tax_rate_id of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The ID of the Shipping Tax Rate.  # noqa: E501

        :return: The shipping_tax_rate_id of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: str
        """
        return self._shipping_tax_rate_id

    @shipping_tax_rate_id.setter
    def shipping_tax_rate_id(self, shipping_tax_rate_id):
        """Sets the shipping_tax_rate_id of this PutSalesCreditNotesSalesCreditNote.

        The ID of the Shipping Tax Rate.  # noqa: E501

        :param shipping_tax_rate_id: The shipping_tax_rate_id of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: str
        """

        self._shipping_tax_rate_id = shipping_tax_rate_id

    @property
    def shipping_tax_amount(self):
        """Gets the shipping_tax_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The tax shipping amount. NOTE: This is not required for POST/PUT requests as the shipping tax is calculated based on the shipping_net_amount and the shipping_tax_rate.  # noqa: E501

        :return: The shipping_tax_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._shipping_tax_amount

    @shipping_tax_amount.setter
    def shipping_tax_amount(self, shipping_tax_amount):
        """Sets the shipping_tax_amount of this PutSalesCreditNotesSalesCreditNote.

        The tax shipping amount. NOTE: This is not required for POST/PUT requests as the shipping tax is calculated based on the shipping_net_amount and the shipping_tax_rate.  # noqa: E501

        :param shipping_tax_amount: The shipping_tax_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: float
        """

        self._shipping_tax_amount = shipping_tax_amount

    @property
    def total_quantity(self):
        """Gets the total_quantity of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The total quantity of the credit note  # noqa: E501

        :return: The total_quantity of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._total_quantity

    @total_quantity.setter
    def total_quantity(self, total_quantity):
        """Sets the total_quantity of this PutSalesCreditNotesSalesCreditNote.

        The total quantity of the credit note  # noqa: E501

        :param total_quantity: The total_quantity of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: float
        """

        self._total_quantity = total_quantity

    @property
    def shipping_total_amount(self):
        """Gets the shipping_total_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The total shipping amount  # noqa: E501

        :return: The shipping_total_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._shipping_total_amount

    @shipping_total_amount.setter
    def shipping_total_amount(self, shipping_total_amount):
        """Sets the shipping_total_amount of this PutSalesCreditNotesSalesCreditNote.

        The total shipping amount  # noqa: E501

        :param shipping_total_amount: The shipping_total_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: float
        """

        self._shipping_total_amount = shipping_total_amount

    @property
    def net_amount(self):
        """Gets the net_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The net amount of the credit note  # noqa: E501

        :return: The net_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._net_amount

    @net_amount.setter
    def net_amount(self, net_amount):
        """Sets the net_amount of this PutSalesCreditNotesSalesCreditNote.

        The net amount of the credit note  # noqa: E501

        :param net_amount: The net_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: float
        """

        self._net_amount = net_amount

    @property
    def tax_amount(self):
        """Gets the tax_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The tax amount of the credit note  # noqa: E501

        :return: The tax_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this PutSalesCreditNotesSalesCreditNote.

        The tax amount of the credit note  # noqa: E501

        :param tax_amount: The tax_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: float
        """

        self._tax_amount = tax_amount

    @property
    def total_amount(self):
        """Gets the total_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The total amount of the credit note  # noqa: E501

        :return: The total_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this PutSalesCreditNotesSalesCreditNote.

        The total amount of the credit note  # noqa: E501

        :param total_amount: The total_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: float
        """

        self._total_amount = total_amount

    @property
    def currency_id(self):
        """Gets the currency_id of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The ID of the Currency.  # noqa: E501

        :return: The currency_id of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: str
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """Sets the currency_id of this PutSalesCreditNotesSalesCreditNote.

        The ID of the Currency.  # noqa: E501

        :param currency_id: The currency_id of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: str
        """

        self._currency_id = currency_id

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The exchange rate for the credit note  # noqa: E501

        :return: The exchange_rate of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this PutSalesCreditNotesSalesCreditNote.

        The exchange rate for the credit note  # noqa: E501

        :param exchange_rate: The exchange_rate of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: float
        """

        self._exchange_rate = exchange_rate

    @property
    def inverse_exchange_rate(self):
        """Gets the inverse_exchange_rate of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The inverse exchange rate for the credit note  # noqa: E501

        :return: The inverse_exchange_rate of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._inverse_exchange_rate

    @inverse_exchange_rate.setter
    def inverse_exchange_rate(self, inverse_exchange_rate):
        """Sets the inverse_exchange_rate of this PutSalesCreditNotesSalesCreditNote.

        The inverse exchange rate for the credit note  # noqa: E501

        :param inverse_exchange_rate: The inverse_exchange_rate of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: float
        """

        self._inverse_exchange_rate = inverse_exchange_rate

    @property
    def base_currency_shipping_net_amount(self):
        """Gets the base_currency_shipping_net_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The net shipping amount in base currency  # noqa: E501

        :return: The base_currency_shipping_net_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_shipping_net_amount

    @base_currency_shipping_net_amount.setter
    def base_currency_shipping_net_amount(self, base_currency_shipping_net_amount):
        """Sets the base_currency_shipping_net_amount of this PutSalesCreditNotesSalesCreditNote.

        The net shipping amount in base currency  # noqa: E501

        :param base_currency_shipping_net_amount: The base_currency_shipping_net_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: float
        """

        self._base_currency_shipping_net_amount = base_currency_shipping_net_amount

    @property
    def base_currency_shipping_tax_amount(self):
        """Gets the base_currency_shipping_tax_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The tax shipping amount in base currency  # noqa: E501

        :return: The base_currency_shipping_tax_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_shipping_tax_amount

    @base_currency_shipping_tax_amount.setter
    def base_currency_shipping_tax_amount(self, base_currency_shipping_tax_amount):
        """Sets the base_currency_shipping_tax_amount of this PutSalesCreditNotesSalesCreditNote.

        The tax shipping amount in base currency  # noqa: E501

        :param base_currency_shipping_tax_amount: The base_currency_shipping_tax_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: float
        """

        self._base_currency_shipping_tax_amount = base_currency_shipping_tax_amount

    @property
    def base_currency_shipping_total_amount(self):
        """Gets the base_currency_shipping_total_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The total shipping amount in base currency  # noqa: E501

        :return: The base_currency_shipping_total_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_shipping_total_amount

    @base_currency_shipping_total_amount.setter
    def base_currency_shipping_total_amount(self, base_currency_shipping_total_amount):
        """Sets the base_currency_shipping_total_amount of this PutSalesCreditNotesSalesCreditNote.

        The total shipping amount in base currency  # noqa: E501

        :param base_currency_shipping_total_amount: The base_currency_shipping_total_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: float
        """

        self._base_currency_shipping_total_amount = base_currency_shipping_total_amount

    @property
    def total_discount_amount(self):
        """Gets the total_discount_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The discount amount on the credit note  # noqa: E501

        :return: The total_discount_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._total_discount_amount

    @total_discount_amount.setter
    def total_discount_amount(self, total_discount_amount):
        """Sets the total_discount_amount of this PutSalesCreditNotesSalesCreditNote.

        The discount amount on the credit note  # noqa: E501

        :param total_discount_amount: The total_discount_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: float
        """

        self._total_discount_amount = total_discount_amount

    @property
    def base_currency_total_discount_amount(self):
        """Gets the base_currency_total_discount_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The discount amount on the credit note in base currency  # noqa: E501

        :return: The base_currency_total_discount_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_total_discount_amount

    @base_currency_total_discount_amount.setter
    def base_currency_total_discount_amount(self, base_currency_total_discount_amount):
        """Sets the base_currency_total_discount_amount of this PutSalesCreditNotesSalesCreditNote.

        The discount amount on the credit note in base currency  # noqa: E501

        :param base_currency_total_discount_amount: The base_currency_total_discount_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: float
        """

        self._base_currency_total_discount_amount = base_currency_total_discount_amount

    @property
    def base_currency_net_amount(self):
        """Gets the base_currency_net_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The net amount of the credit note in base currency  # noqa: E501

        :return: The base_currency_net_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_net_amount

    @base_currency_net_amount.setter
    def base_currency_net_amount(self, base_currency_net_amount):
        """Sets the base_currency_net_amount of this PutSalesCreditNotesSalesCreditNote.

        The net amount of the credit note in base currency  # noqa: E501

        :param base_currency_net_amount: The base_currency_net_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: float
        """

        self._base_currency_net_amount = base_currency_net_amount

    @property
    def base_currency_tax_amount(self):
        """Gets the base_currency_tax_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The tax amount of the credit note in base currency  # noqa: E501

        :return: The base_currency_tax_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_tax_amount

    @base_currency_tax_amount.setter
    def base_currency_tax_amount(self, base_currency_tax_amount):
        """Sets the base_currency_tax_amount of this PutSalesCreditNotesSalesCreditNote.

        The tax amount of the credit note in base currency  # noqa: E501

        :param base_currency_tax_amount: The base_currency_tax_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: float
        """

        self._base_currency_tax_amount = base_currency_tax_amount

    @property
    def base_currency_total_amount(self):
        """Gets the base_currency_total_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The total amount of the credit note in base currency  # noqa: E501

        :return: The base_currency_total_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_total_amount

    @base_currency_total_amount.setter
    def base_currency_total_amount(self, base_currency_total_amount):
        """Sets the base_currency_total_amount of this PutSalesCreditNotesSalesCreditNote.

        The total amount of the credit note in base currency  # noqa: E501

        :param base_currency_total_amount: The base_currency_total_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: float
        """

        self._base_currency_total_amount = base_currency_total_amount

    @property
    def status_id(self):
        """Gets the status_id of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The ID of the Status.  # noqa: E501

        :return: The status_id of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: str
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """Sets the status_id of this PutSalesCreditNotesSalesCreditNote.

        The ID of the Status.  # noqa: E501

        :param status_id: The status_id of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: str
        """

        self._status_id = status_id

    @property
    def sent(self):
        """Gets the sent of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        Indicates whether the credit note has been sent  # noqa: E501

        :return: The sent of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: bool
        """
        return self._sent

    @sent.setter
    def sent(self, sent):
        """Sets the sent of this PutSalesCreditNotesSalesCreditNote.

        Indicates whether the credit note has been sent  # noqa: E501

        :param sent: The sent of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: bool
        """

        self._sent = sent

    @property
    def tax_address_region_id(self):
        """Gets the tax_address_region_id of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The ID of the Tax Address Region. (Canada only)  # noqa: E501

        :return: The tax_address_region_id of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: str
        """
        return self._tax_address_region_id

    @tax_address_region_id.setter
    def tax_address_region_id(self, tax_address_region_id):
        """Sets the tax_address_region_id of this PutSalesCreditNotesSalesCreditNote.

        The ID of the Tax Address Region. (Canada only)  # noqa: E501

        :param tax_address_region_id: The tax_address_region_id of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: str
        """

        self._tax_address_region_id = tax_address_region_id

    @property
    def withholding_tax_rate(self):
        """Gets the withholding_tax_rate of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The withheld Tax Rate - only applicable in UK (CIS subcontractor tax rate)  # noqa: E501

        :return: The withholding_tax_rate of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._withholding_tax_rate

    @withholding_tax_rate.setter
    def withholding_tax_rate(self, withholding_tax_rate):
        """Sets the withholding_tax_rate of this PutSalesCreditNotesSalesCreditNote.

        The withheld Tax Rate - only applicable in UK (CIS subcontractor tax rate)  # noqa: E501

        :param withholding_tax_rate: The withholding_tax_rate of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: float
        """

        self._withholding_tax_rate = withholding_tax_rate

    @property
    def withholding_tax_amount(self):
        """Gets the withholding_tax_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The withheld Tax Amount - only applicable in UK (CIS subcontractor tax)  # noqa: E501

        :return: The withholding_tax_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._withholding_tax_amount

    @withholding_tax_amount.setter
    def withholding_tax_amount(self, withholding_tax_amount):
        """Sets the withholding_tax_amount of this PutSalesCreditNotesSalesCreditNote.

        The withheld Tax Amount - only applicable in UK (CIS subcontractor tax)  # noqa: E501

        :param withholding_tax_amount: The withholding_tax_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: float
        """

        self._withholding_tax_amount = withholding_tax_amount

    @property
    def base_currency_withholding_tax_amount(self):
        """Gets the base_currency_withholding_tax_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501

        The withheld Tax Amount in the base currency - only applicable in UK (CIS subcontractor tax)  # noqa: E501

        :return: The base_currency_withholding_tax_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_withholding_tax_amount

    @base_currency_withholding_tax_amount.setter
    def base_currency_withholding_tax_amount(self, base_currency_withholding_tax_amount):
        """Sets the base_currency_withholding_tax_amount of this PutSalesCreditNotesSalesCreditNote.

        The withheld Tax Amount in the base currency - only applicable in UK (CIS subcontractor tax)  # noqa: E501

        :param base_currency_withholding_tax_amount: The base_currency_withholding_tax_amount of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: float
        """

        self._base_currency_withholding_tax_amount = base_currency_withholding_tax_amount

    @property
    def main_address(self):
        """Gets the main_address of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501


        :return: The main_address of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: PostSalesCorrectiveInvoicesSalesCorrectiveInvoiceMainAddress
        """
        return self._main_address

    @main_address.setter
    def main_address(self, main_address):
        """Sets the main_address of this PutSalesCreditNotesSalesCreditNote.


        :param main_address: The main_address of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: PostSalesCorrectiveInvoicesSalesCorrectiveInvoiceMainAddress
        """

        self._main_address = main_address

    @property
    def delivery_address(self):
        """Gets the delivery_address of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501


        :return: The delivery_address of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: PostSalesCorrectiveInvoicesSalesCorrectiveInvoiceMainAddress
        """
        return self._delivery_address

    @delivery_address.setter
    def delivery_address(self, delivery_address):
        """Sets the delivery_address of this PutSalesCreditNotesSalesCreditNote.


        :param delivery_address: The delivery_address of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: PostSalesCorrectiveInvoicesSalesCorrectiveInvoiceMainAddress
        """

        self._delivery_address = delivery_address

    @property
    def credit_note_lines(self):
        """Gets the credit_note_lines of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501


        :return: The credit_note_lines of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: list[PutSalesCreditNotesSalesCreditNoteCreditNoteLines]
        """
        return self._credit_note_lines

    @credit_note_lines.setter
    def credit_note_lines(self, credit_note_lines):
        """Sets the credit_note_lines of this PutSalesCreditNotesSalesCreditNote.


        :param credit_note_lines: The credit_note_lines of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: list[PutSalesCreditNotesSalesCreditNoteCreditNoteLines]
        """

        self._credit_note_lines = credit_note_lines

    @property
    def tax_analysis(self):
        """Gets the tax_analysis of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501


        :return: The tax_analysis of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :rtype: list[PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysis]
        """
        return self._tax_analysis

    @tax_analysis.setter
    def tax_analysis(self, tax_analysis):
        """Sets the tax_analysis of this PutSalesCreditNotesSalesCreditNote.


        :param tax_analysis: The tax_analysis of this PutSalesCreditNotesSalesCreditNote.  # noqa: E501
        :type: list[PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysis]
        """

        self._tax_analysis = tax_analysis

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PutSalesCreditNotesSalesCreditNote):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PutSalesCreditNotesSalesCreditNote):
            return True

        return self.to_dict() != other.to_dict()
