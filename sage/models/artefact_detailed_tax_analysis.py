# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class ArtefactDetailedTaxAnalysis(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'tax_rates_breakdown': 'ArtefactDetailedTaxAnalysisBreakdown',
        'total_net': 'float',
        'total_tax': 'float',
        'total': 'float',
        'total_goods_amount': 'float',
        'total_services_amount': 'float',
        'base_currency_total_net': 'float',
        'base_currency_total_tax': 'float',
        'base_currency_total': 'float',
        'base_currency_total_goods_amount': 'float',
        'base_currency_total_services_amount': 'float',
        'total_retailer_tax': 'float'
    }

    attribute_map = {
        'tax_rates_breakdown': 'tax_rates_breakdown',
        'total_net': 'total_net',
        'total_tax': 'total_tax',
        'total': 'total',
        'total_goods_amount': 'total_goods_amount',
        'total_services_amount': 'total_services_amount',
        'base_currency_total_net': 'base_currency_total_net',
        'base_currency_total_tax': 'base_currency_total_tax',
        'base_currency_total': 'base_currency_total',
        'base_currency_total_goods_amount': 'base_currency_total_goods_amount',
        'base_currency_total_services_amount': 'base_currency_total_services_amount',
        'total_retailer_tax': 'total_retailer_tax'
    }

    def __init__(self, tax_rates_breakdown=None, total_net=None, total_tax=None, total=None, total_goods_amount=None, total_services_amount=None, base_currency_total_net=None, base_currency_total_tax=None, base_currency_total=None, base_currency_total_goods_amount=None, base_currency_total_services_amount=None, total_retailer_tax=None, local_vars_configuration=None):  # noqa: E501
        """ArtefactDetailedTaxAnalysis - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._tax_rates_breakdown = None
        self._total_net = None
        self._total_tax = None
        self._total = None
        self._total_goods_amount = None
        self._total_services_amount = None
        self._base_currency_total_net = None
        self._base_currency_total_tax = None
        self._base_currency_total = None
        self._base_currency_total_goods_amount = None
        self._base_currency_total_services_amount = None
        self._total_retailer_tax = None
        self.discriminator = None

        if tax_rates_breakdown is not None:
            self.tax_rates_breakdown = tax_rates_breakdown
        if total_net is not None:
            self.total_net = total_net
        if total_tax is not None:
            self.total_tax = total_tax
        if total is not None:
            self.total = total
        if total_goods_amount is not None:
            self.total_goods_amount = total_goods_amount
        if total_services_amount is not None:
            self.total_services_amount = total_services_amount
        if base_currency_total_net is not None:
            self.base_currency_total_net = base_currency_total_net
        if base_currency_total_tax is not None:
            self.base_currency_total_tax = base_currency_total_tax
        if base_currency_total is not None:
            self.base_currency_total = base_currency_total
        if base_currency_total_goods_amount is not None:
            self.base_currency_total_goods_amount = base_currency_total_goods_amount
        if base_currency_total_services_amount is not None:
            self.base_currency_total_services_amount = base_currency_total_services_amount
        if total_retailer_tax is not None:
            self.total_retailer_tax = total_retailer_tax

    @property
    def tax_rates_breakdown(self):
        """Gets the tax_rates_breakdown of this ArtefactDetailedTaxAnalysis.  # noqa: E501


        :return: The tax_rates_breakdown of this ArtefactDetailedTaxAnalysis.  # noqa: E501
        :rtype: ArtefactDetailedTaxAnalysisBreakdown
        """
        return self._tax_rates_breakdown

    @tax_rates_breakdown.setter
    def tax_rates_breakdown(self, tax_rates_breakdown):
        """Sets the tax_rates_breakdown of this ArtefactDetailedTaxAnalysis.


        :param tax_rates_breakdown: The tax_rates_breakdown of this ArtefactDetailedTaxAnalysis.  # noqa: E501
        :type: ArtefactDetailedTaxAnalysisBreakdown
        """

        self._tax_rates_breakdown = tax_rates_breakdown

    @property
    def total_net(self):
        """Gets the total_net of this ArtefactDetailedTaxAnalysis.  # noqa: E501

        The total net amount for all tax rates  # noqa: E501

        :return: The total_net of this ArtefactDetailedTaxAnalysis.  # noqa: E501
        :rtype: float
        """
        return self._total_net

    @total_net.setter
    def total_net(self, total_net):
        """Sets the total_net of this ArtefactDetailedTaxAnalysis.

        The total net amount for all tax rates  # noqa: E501

        :param total_net: The total_net of this ArtefactDetailedTaxAnalysis.  # noqa: E501
        :type: float
        """

        self._total_net = total_net

    @property
    def total_tax(self):
        """Gets the total_tax of this ArtefactDetailedTaxAnalysis.  # noqa: E501

        The total tax amount for all tax rates  # noqa: E501

        :return: The total_tax of this ArtefactDetailedTaxAnalysis.  # noqa: E501
        :rtype: float
        """
        return self._total_tax

    @total_tax.setter
    def total_tax(self, total_tax):
        """Sets the total_tax of this ArtefactDetailedTaxAnalysis.

        The total tax amount for all tax rates  # noqa: E501

        :param total_tax: The total_tax of this ArtefactDetailedTaxAnalysis.  # noqa: E501
        :type: float
        """

        self._total_tax = total_tax

    @property
    def total(self):
        """Gets the total of this ArtefactDetailedTaxAnalysis.  # noqa: E501

        The total amount for all tax rates  # noqa: E501

        :return: The total of this ArtefactDetailedTaxAnalysis.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ArtefactDetailedTaxAnalysis.

        The total amount for all tax rates  # noqa: E501

        :param total: The total of this ArtefactDetailedTaxAnalysis.  # noqa: E501
        :type: float
        """

        self._total = total

    @property
    def total_goods_amount(self):
        """Gets the total_goods_amount of this ArtefactDetailedTaxAnalysis.  # noqa: E501

        The total amount relating to goods for all tax rates  # noqa: E501

        :return: The total_goods_amount of this ArtefactDetailedTaxAnalysis.  # noqa: E501
        :rtype: float
        """
        return self._total_goods_amount

    @total_goods_amount.setter
    def total_goods_amount(self, total_goods_amount):
        """Sets the total_goods_amount of this ArtefactDetailedTaxAnalysis.

        The total amount relating to goods for all tax rates  # noqa: E501

        :param total_goods_amount: The total_goods_amount of this ArtefactDetailedTaxAnalysis.  # noqa: E501
        :type: float
        """

        self._total_goods_amount = total_goods_amount

    @property
    def total_services_amount(self):
        """Gets the total_services_amount of this ArtefactDetailedTaxAnalysis.  # noqa: E501

        The total amount relating to services for all tax rates  # noqa: E501

        :return: The total_services_amount of this ArtefactDetailedTaxAnalysis.  # noqa: E501
        :rtype: float
        """
        return self._total_services_amount

    @total_services_amount.setter
    def total_services_amount(self, total_services_amount):
        """Sets the total_services_amount of this ArtefactDetailedTaxAnalysis.

        The total amount relating to services for all tax rates  # noqa: E501

        :param total_services_amount: The total_services_amount of this ArtefactDetailedTaxAnalysis.  # noqa: E501
        :type: float
        """

        self._total_services_amount = total_services_amount

    @property
    def base_currency_total_net(self):
        """Gets the base_currency_total_net of this ArtefactDetailedTaxAnalysis.  # noqa: E501

        The base currency total net amount for all tax rates  # noqa: E501

        :return: The base_currency_total_net of this ArtefactDetailedTaxAnalysis.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_total_net

    @base_currency_total_net.setter
    def base_currency_total_net(self, base_currency_total_net):
        """Sets the base_currency_total_net of this ArtefactDetailedTaxAnalysis.

        The base currency total net amount for all tax rates  # noqa: E501

        :param base_currency_total_net: The base_currency_total_net of this ArtefactDetailedTaxAnalysis.  # noqa: E501
        :type: float
        """

        self._base_currency_total_net = base_currency_total_net

    @property
    def base_currency_total_tax(self):
        """Gets the base_currency_total_tax of this ArtefactDetailedTaxAnalysis.  # noqa: E501

        The base currency total tax amount for all tax rates  # noqa: E501

        :return: The base_currency_total_tax of this ArtefactDetailedTaxAnalysis.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_total_tax

    @base_currency_total_tax.setter
    def base_currency_total_tax(self, base_currency_total_tax):
        """Sets the base_currency_total_tax of this ArtefactDetailedTaxAnalysis.

        The base currency total tax amount for all tax rates  # noqa: E501

        :param base_currency_total_tax: The base_currency_total_tax of this ArtefactDetailedTaxAnalysis.  # noqa: E501
        :type: float
        """

        self._base_currency_total_tax = base_currency_total_tax

    @property
    def base_currency_total(self):
        """Gets the base_currency_total of this ArtefactDetailedTaxAnalysis.  # noqa: E501

        The total base currency amount for all tax rates  # noqa: E501

        :return: The base_currency_total of this ArtefactDetailedTaxAnalysis.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_total

    @base_currency_total.setter
    def base_currency_total(self, base_currency_total):
        """Sets the base_currency_total of this ArtefactDetailedTaxAnalysis.

        The total base currency amount for all tax rates  # noqa: E501

        :param base_currency_total: The base_currency_total of this ArtefactDetailedTaxAnalysis.  # noqa: E501
        :type: float
        """

        self._base_currency_total = base_currency_total

    @property
    def base_currency_total_goods_amount(self):
        """Gets the base_currency_total_goods_amount of this ArtefactDetailedTaxAnalysis.  # noqa: E501

        The total base currency amount relating to goods for all tax rates  # noqa: E501

        :return: The base_currency_total_goods_amount of this ArtefactDetailedTaxAnalysis.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_total_goods_amount

    @base_currency_total_goods_amount.setter
    def base_currency_total_goods_amount(self, base_currency_total_goods_amount):
        """Sets the base_currency_total_goods_amount of this ArtefactDetailedTaxAnalysis.

        The total base currency amount relating to goods for all tax rates  # noqa: E501

        :param base_currency_total_goods_amount: The base_currency_total_goods_amount of this ArtefactDetailedTaxAnalysis.  # noqa: E501
        :type: float
        """

        self._base_currency_total_goods_amount = base_currency_total_goods_amount

    @property
    def base_currency_total_services_amount(self):
        """Gets the base_currency_total_services_amount of this ArtefactDetailedTaxAnalysis.  # noqa: E501

        The total base currency amount relating to services for all tax rates  # noqa: E501

        :return: The base_currency_total_services_amount of this ArtefactDetailedTaxAnalysis.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_total_services_amount

    @base_currency_total_services_amount.setter
    def base_currency_total_services_amount(self, base_currency_total_services_amount):
        """Sets the base_currency_total_services_amount of this ArtefactDetailedTaxAnalysis.

        The total base currency amount relating to services for all tax rates  # noqa: E501

        :param base_currency_total_services_amount: The base_currency_total_services_amount of this ArtefactDetailedTaxAnalysis.  # noqa: E501
        :type: float
        """

        self._base_currency_total_services_amount = base_currency_total_services_amount

    @property
    def total_retailer_tax(self):
        """Gets the total_retailer_tax of this ArtefactDetailedTaxAnalysis.  # noqa: E501

        The total retailer tax amount for all tax rates  # noqa: E501

        :return: The total_retailer_tax of this ArtefactDetailedTaxAnalysis.  # noqa: E501
        :rtype: float
        """
        return self._total_retailer_tax

    @total_retailer_tax.setter
    def total_retailer_tax(self, total_retailer_tax):
        """Sets the total_retailer_tax of this ArtefactDetailedTaxAnalysis.

        The total retailer tax amount for all tax rates  # noqa: E501

        :param total_retailer_tax: The total_retailer_tax of this ArtefactDetailedTaxAnalysis.  # noqa: E501
        :type: float
        """

        self._total_retailer_tax = total_retailer_tax

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArtefactDetailedTaxAnalysis):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ArtefactDetailedTaxAnalysis):
            return True

        return self.to_dict() != other.to_dict()
