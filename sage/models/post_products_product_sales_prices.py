# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class PostProductsProductSalesPrices(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'price_name': 'str',
        'price': 'float',
        'price_includes_tax': 'bool',
        'product_sales_price_type_id': 'str'
    }

    attribute_map = {
        'price_name': 'price_name',
        'price': 'price',
        'price_includes_tax': 'price_includes_tax',
        'product_sales_price_type_id': 'product_sales_price_type_id'
    }

    def __init__(self, price_name=None, price=None, price_includes_tax=None, product_sales_price_type_id=None, local_vars_configuration=None):  # noqa: E501
        """PostProductsProductSalesPrices - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._price_name = None
        self._price = None
        self._price_includes_tax = None
        self._product_sales_price_type_id = None
        self.discriminator = None

        if price_name is not None:
            self.price_name = price_name
        if price is not None:
            self.price = price
        if price_includes_tax is not None:
            self.price_includes_tax = price_includes_tax
        if product_sales_price_type_id is not None:
            self.product_sales_price_type_id = product_sales_price_type_id

    @property
    def price_name(self):
        """Gets the price_name of this PostProductsProductSalesPrices.  # noqa: E501

        The name of the product sales price  # noqa: E501

        :return: The price_name of this PostProductsProductSalesPrices.  # noqa: E501
        :rtype: str
        """
        return self._price_name

    @price_name.setter
    def price_name(self, price_name):
        """Sets the price_name of this PostProductsProductSalesPrices.

        The name of the product sales price  # noqa: E501

        :param price_name: The price_name of this PostProductsProductSalesPrices.  # noqa: E501
        :type: str
        """

        self._price_name = price_name

    @property
    def price(self):
        """Gets the price of this PostProductsProductSalesPrices.  # noqa: E501

        The sales price amount  # noqa: E501

        :return: The price of this PostProductsProductSalesPrices.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this PostProductsProductSalesPrices.

        The sales price amount  # noqa: E501

        :param price: The price of this PostProductsProductSalesPrices.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def price_includes_tax(self):
        """Gets the price_includes_tax of this PostProductsProductSalesPrices.  # noqa: E501

        Indicates whether the sales price already includes tax  # noqa: E501

        :return: The price_includes_tax of this PostProductsProductSalesPrices.  # noqa: E501
        :rtype: bool
        """
        return self._price_includes_tax

    @price_includes_tax.setter
    def price_includes_tax(self, price_includes_tax):
        """Sets the price_includes_tax of this PostProductsProductSalesPrices.

        Indicates whether the sales price already includes tax  # noqa: E501

        :param price_includes_tax: The price_includes_tax of this PostProductsProductSalesPrices.  # noqa: E501
        :type: bool
        """

        self._price_includes_tax = price_includes_tax

    @property
    def product_sales_price_type_id(self):
        """Gets the product_sales_price_type_id of this PostProductsProductSalesPrices.  # noqa: E501

        The ID of the Product Sales Price Type.  # noqa: E501

        :return: The product_sales_price_type_id of this PostProductsProductSalesPrices.  # noqa: E501
        :rtype: str
        """
        return self._product_sales_price_type_id

    @product_sales_price_type_id.setter
    def product_sales_price_type_id(self, product_sales_price_type_id):
        """Sets the product_sales_price_type_id of this PostProductsProductSalesPrices.

        The ID of the Product Sales Price Type.  # noqa: E501

        :param product_sales_price_type_id: The product_sales_price_type_id of this PostProductsProductSalesPrices.  # noqa: E501
        :type: str
        """

        self._product_sales_price_type_id = product_sales_price_type_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostProductsProductSalesPrices):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PostProductsProductSalesPrices):
            return True

        return self.to_dict() != other.to_dict()
