# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysis(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'tax_rate_id': 'str',
        'net_amount': 'float',
        'tax_amount': 'float',
        'total_amount': 'float',
        'goods_amount': 'float',
        'service_amount': 'float'
    }

    attribute_map = {
        'tax_rate_id': 'tax_rate_id',
        'net_amount': 'net_amount',
        'tax_amount': 'tax_amount',
        'total_amount': 'total_amount',
        'goods_amount': 'goods_amount',
        'service_amount': 'service_amount'
    }

    def __init__(self, tax_rate_id=None, net_amount=None, tax_amount=None, total_amount=None, goods_amount=None, service_amount=None, local_vars_configuration=None):  # noqa: E501
        """PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysis - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._tax_rate_id = None
        self._net_amount = None
        self._tax_amount = None
        self._total_amount = None
        self._goods_amount = None
        self._service_amount = None
        self.discriminator = None

        if tax_rate_id is not None:
            self.tax_rate_id = tax_rate_id
        if net_amount is not None:
            self.net_amount = net_amount
        if tax_amount is not None:
            self.tax_amount = tax_amount
        if total_amount is not None:
            self.total_amount = total_amount
        if goods_amount is not None:
            self.goods_amount = goods_amount
        if service_amount is not None:
            self.service_amount = service_amount

    @property
    def tax_rate_id(self):
        """Gets the tax_rate_id of this PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysis.  # noqa: E501

        The ID of the Tax Rate.  # noqa: E501

        :return: The tax_rate_id of this PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._tax_rate_id

    @tax_rate_id.setter
    def tax_rate_id(self, tax_rate_id):
        """Sets the tax_rate_id of this PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysis.

        The ID of the Tax Rate.  # noqa: E501

        :param tax_rate_id: The tax_rate_id of this PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysis.  # noqa: E501
        :type: str
        """

        self._tax_rate_id = tax_rate_id

    @property
    def net_amount(self):
        """Gets the net_amount of this PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysis.  # noqa: E501

        The net amount for the tax rate  # noqa: E501

        :return: The net_amount of this PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysis.  # noqa: E501
        :rtype: float
        """
        return self._net_amount

    @net_amount.setter
    def net_amount(self, net_amount):
        """Sets the net_amount of this PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysis.

        The net amount for the tax rate  # noqa: E501

        :param net_amount: The net_amount of this PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysis.  # noqa: E501
        :type: float
        """

        self._net_amount = net_amount

    @property
    def tax_amount(self):
        """Gets the tax_amount of this PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysis.  # noqa: E501

        The tax amount for the tax rate  # noqa: E501

        :return: The tax_amount of this PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysis.  # noqa: E501
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysis.

        The tax amount for the tax rate  # noqa: E501

        :param tax_amount: The tax_amount of this PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysis.  # noqa: E501
        :type: float
        """

        self._tax_amount = tax_amount

    @property
    def total_amount(self):
        """Gets the total_amount of this PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysis.  # noqa: E501

        The total amount for the tax rate  # noqa: E501

        :return: The total_amount of this PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysis.  # noqa: E501
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysis.

        The total amount for the tax rate  # noqa: E501

        :param total_amount: The total_amount of this PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysis.  # noqa: E501
        :type: float
        """

        self._total_amount = total_amount

    @property
    def goods_amount(self):
        """Gets the goods_amount of this PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysis.  # noqa: E501

        The total amount for the tax rate relating to goods  # noqa: E501

        :return: The goods_amount of this PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysis.  # noqa: E501
        :rtype: float
        """
        return self._goods_amount

    @goods_amount.setter
    def goods_amount(self, goods_amount):
        """Sets the goods_amount of this PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysis.

        The total amount for the tax rate relating to goods  # noqa: E501

        :param goods_amount: The goods_amount of this PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysis.  # noqa: E501
        :type: float
        """

        self._goods_amount = goods_amount

    @property
    def service_amount(self):
        """Gets the service_amount of this PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysis.  # noqa: E501

        The total amount for the tax rate relating to services  # noqa: E501

        :return: The service_amount of this PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysis.  # noqa: E501
        :rtype: float
        """
        return self._service_amount

    @service_amount.setter
    def service_amount(self, service_amount):
        """Sets the service_amount of this PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysis.

        The total amount for the tax rate relating to services  # noqa: E501

        :param service_amount: The service_amount of this PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysis.  # noqa: E501
        :type: float
        """

        self._service_amount = service_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysis):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PostPurchaseCorrectiveInvoicesPurchaseCorrectiveInvoiceTaxAnalysis):
            return True

        return self.to_dict() != other.to_dict()
