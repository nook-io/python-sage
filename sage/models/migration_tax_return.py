# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class MigrationTaxReturn(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'displayed_as': 'str',
        'path': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'from_date': 'date',
        'to_date': 'date',
        'tax_return_frequency': 'Base',
        'total_amount': 'float',
        'gb': 'GBBoxData',
        'ie': 'IEBoxData'
    }

    attribute_map = {
        'id': 'id',
        'displayed_as': 'displayed_as',
        'path': '$path',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'from_date': 'from_date',
        'to_date': 'to_date',
        'tax_return_frequency': 'tax_return_frequency',
        'total_amount': 'total_amount',
        'gb': 'gb',
        'ie': 'ie'
    }

    def __init__(self, id=None, displayed_as=None, path=None, created_at=None, updated_at=None, from_date=None, to_date=None, tax_return_frequency=None, total_amount=None, gb=None, ie=None, local_vars_configuration=None):  # noqa: E501
        """MigrationTaxReturn - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._displayed_as = None
        self._path = None
        self._created_at = None
        self._updated_at = None
        self._from_date = None
        self._to_date = None
        self._tax_return_frequency = None
        self._total_amount = None
        self._gb = None
        self._ie = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if displayed_as is not None:
            self.displayed_as = displayed_as
        if path is not None:
            self.path = path
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if from_date is not None:
            self.from_date = from_date
        if to_date is not None:
            self.to_date = to_date
        if tax_return_frequency is not None:
            self.tax_return_frequency = tax_return_frequency
        if total_amount is not None:
            self.total_amount = total_amount
        if gb is not None:
            self.gb = gb
        if ie is not None:
            self.ie = ie

    @property
    def id(self):
        """Gets the id of this MigrationTaxReturn.  # noqa: E501

        The unique identifier for the item  # noqa: E501

        :return: The id of this MigrationTaxReturn.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MigrationTaxReturn.

        The unique identifier for the item  # noqa: E501

        :param id: The id of this MigrationTaxReturn.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def displayed_as(self):
        """Gets the displayed_as of this MigrationTaxReturn.  # noqa: E501

        The name of the resource  # noqa: E501

        :return: The displayed_as of this MigrationTaxReturn.  # noqa: E501
        :rtype: str
        """
        return self._displayed_as

    @displayed_as.setter
    def displayed_as(self, displayed_as):
        """Sets the displayed_as of this MigrationTaxReturn.

        The name of the resource  # noqa: E501

        :param displayed_as: The displayed_as of this MigrationTaxReturn.  # noqa: E501
        :type: str
        """

        self._displayed_as = displayed_as

    @property
    def path(self):
        """Gets the path of this MigrationTaxReturn.  # noqa: E501

        The API path for the resource  # noqa: E501

        :return: The path of this MigrationTaxReturn.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this MigrationTaxReturn.

        The API path for the resource  # noqa: E501

        :param path: The path of this MigrationTaxReturn.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def created_at(self):
        """Gets the created_at of this MigrationTaxReturn.  # noqa: E501

        The datetime when the item was created  # noqa: E501

        :return: The created_at of this MigrationTaxReturn.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MigrationTaxReturn.

        The datetime when the item was created  # noqa: E501

        :param created_at: The created_at of this MigrationTaxReturn.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this MigrationTaxReturn.  # noqa: E501

        The datetime when the item was last updated  # noqa: E501

        :return: The updated_at of this MigrationTaxReturn.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MigrationTaxReturn.

        The datetime when the item was last updated  # noqa: E501

        :param updated_at: The updated_at of this MigrationTaxReturn.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def from_date(self):
        """Gets the from_date of this MigrationTaxReturn.  # noqa: E501

        The start date of the tax return  # noqa: E501

        :return: The from_date of this MigrationTaxReturn.  # noqa: E501
        :rtype: date
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this MigrationTaxReturn.

        The start date of the tax return  # noqa: E501

        :param from_date: The from_date of this MigrationTaxReturn.  # noqa: E501
        :type: date
        """

        self._from_date = from_date

    @property
    def to_date(self):
        """Gets the to_date of this MigrationTaxReturn.  # noqa: E501

        The end date of the tax return  # noqa: E501

        :return: The to_date of this MigrationTaxReturn.  # noqa: E501
        :rtype: date
        """
        return self._to_date

    @to_date.setter
    def to_date(self, to_date):
        """Sets the to_date of this MigrationTaxReturn.

        The end date of the tax return  # noqa: E501

        :param to_date: The to_date of this MigrationTaxReturn.  # noqa: E501
        :type: date
        """

        self._to_date = to_date

    @property
    def tax_return_frequency(self):
        """Gets the tax_return_frequency of this MigrationTaxReturn.  # noqa: E501


        :return: The tax_return_frequency of this MigrationTaxReturn.  # noqa: E501
        :rtype: Base
        """
        return self._tax_return_frequency

    @tax_return_frequency.setter
    def tax_return_frequency(self, tax_return_frequency):
        """Sets the tax_return_frequency of this MigrationTaxReturn.


        :param tax_return_frequency: The tax_return_frequency of this MigrationTaxReturn.  # noqa: E501
        :type: Base
        """

        self._tax_return_frequency = tax_return_frequency

    @property
    def total_amount(self):
        """Gets the total_amount of this MigrationTaxReturn.  # noqa: E501

        The total of the tax return  # noqa: E501

        :return: The total_amount of this MigrationTaxReturn.  # noqa: E501
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this MigrationTaxReturn.

        The total of the tax return  # noqa: E501

        :param total_amount: The total_amount of this MigrationTaxReturn.  # noqa: E501
        :type: float
        """

        self._total_amount = total_amount

    @property
    def gb(self):
        """Gets the gb of this MigrationTaxReturn.  # noqa: E501


        :return: The gb of this MigrationTaxReturn.  # noqa: E501
        :rtype: GBBoxData
        """
        return self._gb

    @gb.setter
    def gb(self, gb):
        """Sets the gb of this MigrationTaxReturn.


        :param gb: The gb of this MigrationTaxReturn.  # noqa: E501
        :type: GBBoxData
        """

        self._gb = gb

    @property
    def ie(self):
        """Gets the ie of this MigrationTaxReturn.  # noqa: E501


        :return: The ie of this MigrationTaxReturn.  # noqa: E501
        :rtype: IEBoxData
        """
        return self._ie

    @ie.setter
    def ie(self, ie):
        """Sets the ie of this MigrationTaxReturn.


        :param ie: The ie of this MigrationTaxReturn.  # noqa: E501
        :type: IEBoxData
        """

        self._ie = ie

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MigrationTaxReturn):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MigrationTaxReturn):
            return True

        return self.to_dict() != other.to_dict()
