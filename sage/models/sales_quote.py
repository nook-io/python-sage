# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class SalesQuote(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'displayed_as': 'str',
        'path': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'links': 'list[Link]',
        'editable': 'bool',
        'tax_calculation_method': 'str',
        'contact': 'Contact',
        'quote_number_prefix': 'str',
        'quote_number': 'str',
        'contact_name': 'str',
        'contact_reference': 'str',
        'date': 'date',
        'expiry_date': 'date',
        'reference': 'str',
        'main_address_free_form': 'str',
        'main_address': 'SalesArtefactAddress',
        'delivery_address_free_form': 'str',
        'delivery_address': 'SalesArtefactAddress',
        'notes': 'str',
        'terms_and_conditions': 'str',
        'shipping_net_amount': 'float',
        'shipping_tax_rate': 'Base',
        'shipping_tax_amount': 'float',
        'shipping_tax_breakdown': 'list[TaxBreakdown]',
        'shipping_total_amount': 'float',
        'net_amount': 'float',
        'tax_amount': 'float',
        'total_amount': 'float',
        'currency': 'Base',
        'exchange_rate': 'float',
        'inverse_exchange_rate': 'float',
        'base_currency_shipping_net_amount': 'float',
        'base_currency_shipping_tax_amount': 'float',
        'base_currency_shipping_tax_breakdown': 'list[TaxBreakdown]',
        'base_currency_shipping_total_amount': 'float',
        'total_quantity': 'float',
        'total_discount_amount': 'float',
        'base_currency_total_discount_amount': 'float',
        'base_currency_net_amount': 'float',
        'base_currency_tax_amount': 'float',
        'base_currency_total_amount': 'float',
        'payments_allocations_total_amount': 'float',
        'payments_allocations_total_discount': 'float',
        'total_paid': 'float',
        'status': 'QuoteStatus',
        'sent': 'bool',
        'sent_by_email': 'bool',
        'quote_lines': 'list[SalesQuoteLineItem]',
        'tax_analysis': 'list[ArtefactTaxAnalysis]',
        'detailed_tax_analysis': 'ArtefactDetailedTaxAnalysis',
        'tax_address_region': 'Base',
        'withholding_tax_rate': 'float',
        'withholding_tax_amount': 'float',
        'base_currency_withholding_tax_amount': 'float',
        'profit_analysis': 'ProfitAnalysis',
        'tax_reconciled': 'bool',
        'invoice': 'Generic'
    }

    attribute_map = {
        'id': 'id',
        'displayed_as': 'displayed_as',
        'path': '$path',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'links': 'links',
        'editable': 'editable',
        'tax_calculation_method': 'tax_calculation_method',
        'contact': 'contact',
        'quote_number_prefix': 'quote_number_prefix',
        'quote_number': 'quote_number',
        'contact_name': 'contact_name',
        'contact_reference': 'contact_reference',
        'date': 'date',
        'expiry_date': 'expiry_date',
        'reference': 'reference',
        'main_address_free_form': 'main_address_free_form',
        'main_address': 'main_address',
        'delivery_address_free_form': 'delivery_address_free_form',
        'delivery_address': 'delivery_address',
        'notes': 'notes',
        'terms_and_conditions': 'terms_and_conditions',
        'shipping_net_amount': 'shipping_net_amount',
        'shipping_tax_rate': 'shipping_tax_rate',
        'shipping_tax_amount': 'shipping_tax_amount',
        'shipping_tax_breakdown': 'shipping_tax_breakdown',
        'shipping_total_amount': 'shipping_total_amount',
        'net_amount': 'net_amount',
        'tax_amount': 'tax_amount',
        'total_amount': 'total_amount',
        'currency': 'currency',
        'exchange_rate': 'exchange_rate',
        'inverse_exchange_rate': 'inverse_exchange_rate',
        'base_currency_shipping_net_amount': 'base_currency_shipping_net_amount',
        'base_currency_shipping_tax_amount': 'base_currency_shipping_tax_amount',
        'base_currency_shipping_tax_breakdown': 'base_currency_shipping_tax_breakdown',
        'base_currency_shipping_total_amount': 'base_currency_shipping_total_amount',
        'total_quantity': 'total_quantity',
        'total_discount_amount': 'total_discount_amount',
        'base_currency_total_discount_amount': 'base_currency_total_discount_amount',
        'base_currency_net_amount': 'base_currency_net_amount',
        'base_currency_tax_amount': 'base_currency_tax_amount',
        'base_currency_total_amount': 'base_currency_total_amount',
        'payments_allocations_total_amount': 'payments_allocations_total_amount',
        'payments_allocations_total_discount': 'payments_allocations_total_discount',
        'total_paid': 'total_paid',
        'status': 'status',
        'sent': 'sent',
        'sent_by_email': 'sent_by_email',
        'quote_lines': 'quote_lines',
        'tax_analysis': 'tax_analysis',
        'detailed_tax_analysis': 'detailed_tax_analysis',
        'tax_address_region': 'tax_address_region',
        'withholding_tax_rate': 'withholding_tax_rate',
        'withholding_tax_amount': 'withholding_tax_amount',
        'base_currency_withholding_tax_amount': 'base_currency_withholding_tax_amount',
        'profit_analysis': 'profit_analysis',
        'tax_reconciled': 'tax_reconciled',
        'invoice': 'invoice'
    }

    def __init__(self, id=None, displayed_as=None, path=None, created_at=None, updated_at=None, links=None, editable=None, tax_calculation_method=None, contact=None, quote_number_prefix=None, quote_number=None, contact_name=None, contact_reference=None, date=None, expiry_date=None, reference=None, main_address_free_form=None, main_address=None, delivery_address_free_form=None, delivery_address=None, notes=None, terms_and_conditions=None, shipping_net_amount=None, shipping_tax_rate=None, shipping_tax_amount=None, shipping_tax_breakdown=None, shipping_total_amount=None, net_amount=None, tax_amount=None, total_amount=None, currency=None, exchange_rate=None, inverse_exchange_rate=None, base_currency_shipping_net_amount=None, base_currency_shipping_tax_amount=None, base_currency_shipping_tax_breakdown=None, base_currency_shipping_total_amount=None, total_quantity=None, total_discount_amount=None, base_currency_total_discount_amount=None, base_currency_net_amount=None, base_currency_tax_amount=None, base_currency_total_amount=None, payments_allocations_total_amount=None, payments_allocations_total_discount=None, total_paid=None, status=None, sent=None, sent_by_email=None, quote_lines=None, tax_analysis=None, detailed_tax_analysis=None, tax_address_region=None, withholding_tax_rate=None, withholding_tax_amount=None, base_currency_withholding_tax_amount=None, profit_analysis=None, tax_reconciled=None, invoice=None, local_vars_configuration=None):  # noqa: E501
        """SalesQuote - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._displayed_as = None
        self._path = None
        self._created_at = None
        self._updated_at = None
        self._links = None
        self._editable = None
        self._tax_calculation_method = None
        self._contact = None
        self._quote_number_prefix = None
        self._quote_number = None
        self._contact_name = None
        self._contact_reference = None
        self._date = None
        self._expiry_date = None
        self._reference = None
        self._main_address_free_form = None
        self._main_address = None
        self._delivery_address_free_form = None
        self._delivery_address = None
        self._notes = None
        self._terms_and_conditions = None
        self._shipping_net_amount = None
        self._shipping_tax_rate = None
        self._shipping_tax_amount = None
        self._shipping_tax_breakdown = None
        self._shipping_total_amount = None
        self._net_amount = None
        self._tax_amount = None
        self._total_amount = None
        self._currency = None
        self._exchange_rate = None
        self._inverse_exchange_rate = None
        self._base_currency_shipping_net_amount = None
        self._base_currency_shipping_tax_amount = None
        self._base_currency_shipping_tax_breakdown = None
        self._base_currency_shipping_total_amount = None
        self._total_quantity = None
        self._total_discount_amount = None
        self._base_currency_total_discount_amount = None
        self._base_currency_net_amount = None
        self._base_currency_tax_amount = None
        self._base_currency_total_amount = None
        self._payments_allocations_total_amount = None
        self._payments_allocations_total_discount = None
        self._total_paid = None
        self._status = None
        self._sent = None
        self._sent_by_email = None
        self._quote_lines = None
        self._tax_analysis = None
        self._detailed_tax_analysis = None
        self._tax_address_region = None
        self._withholding_tax_rate = None
        self._withholding_tax_amount = None
        self._base_currency_withholding_tax_amount = None
        self._profit_analysis = None
        self._tax_reconciled = None
        self._invoice = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if displayed_as is not None:
            self.displayed_as = displayed_as
        if path is not None:
            self.path = path
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if links is not None:
            self.links = links
        if editable is not None:
            self.editable = editable
        if tax_calculation_method is not None:
            self.tax_calculation_method = tax_calculation_method
        if contact is not None:
            self.contact = contact
        if quote_number_prefix is not None:
            self.quote_number_prefix = quote_number_prefix
        if quote_number is not None:
            self.quote_number = quote_number
        if contact_name is not None:
            self.contact_name = contact_name
        if contact_reference is not None:
            self.contact_reference = contact_reference
        if date is not None:
            self.date = date
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if reference is not None:
            self.reference = reference
        if main_address_free_form is not None:
            self.main_address_free_form = main_address_free_form
        if main_address is not None:
            self.main_address = main_address
        if delivery_address_free_form is not None:
            self.delivery_address_free_form = delivery_address_free_form
        if delivery_address is not None:
            self.delivery_address = delivery_address
        if notes is not None:
            self.notes = notes
        if terms_and_conditions is not None:
            self.terms_and_conditions = terms_and_conditions
        if shipping_net_amount is not None:
            self.shipping_net_amount = shipping_net_amount
        if shipping_tax_rate is not None:
            self.shipping_tax_rate = shipping_tax_rate
        if shipping_tax_amount is not None:
            self.shipping_tax_amount = shipping_tax_amount
        if shipping_tax_breakdown is not None:
            self.shipping_tax_breakdown = shipping_tax_breakdown
        if shipping_total_amount is not None:
            self.shipping_total_amount = shipping_total_amount
        if net_amount is not None:
            self.net_amount = net_amount
        if tax_amount is not None:
            self.tax_amount = tax_amount
        if total_amount is not None:
            self.total_amount = total_amount
        if currency is not None:
            self.currency = currency
        if exchange_rate is not None:
            self.exchange_rate = exchange_rate
        if inverse_exchange_rate is not None:
            self.inverse_exchange_rate = inverse_exchange_rate
        if base_currency_shipping_net_amount is not None:
            self.base_currency_shipping_net_amount = base_currency_shipping_net_amount
        if base_currency_shipping_tax_amount is not None:
            self.base_currency_shipping_tax_amount = base_currency_shipping_tax_amount
        if base_currency_shipping_tax_breakdown is not None:
            self.base_currency_shipping_tax_breakdown = base_currency_shipping_tax_breakdown
        if base_currency_shipping_total_amount is not None:
            self.base_currency_shipping_total_amount = base_currency_shipping_total_amount
        if total_quantity is not None:
            self.total_quantity = total_quantity
        if total_discount_amount is not None:
            self.total_discount_amount = total_discount_amount
        if base_currency_total_discount_amount is not None:
            self.base_currency_total_discount_amount = base_currency_total_discount_amount
        if base_currency_net_amount is not None:
            self.base_currency_net_amount = base_currency_net_amount
        if base_currency_tax_amount is not None:
            self.base_currency_tax_amount = base_currency_tax_amount
        if base_currency_total_amount is not None:
            self.base_currency_total_amount = base_currency_total_amount
        if payments_allocations_total_amount is not None:
            self.payments_allocations_total_amount = payments_allocations_total_amount
        if payments_allocations_total_discount is not None:
            self.payments_allocations_total_discount = payments_allocations_total_discount
        if total_paid is not None:
            self.total_paid = total_paid
        if status is not None:
            self.status = status
        if sent is not None:
            self.sent = sent
        if sent_by_email is not None:
            self.sent_by_email = sent_by_email
        if quote_lines is not None:
            self.quote_lines = quote_lines
        if tax_analysis is not None:
            self.tax_analysis = tax_analysis
        if detailed_tax_analysis is not None:
            self.detailed_tax_analysis = detailed_tax_analysis
        if tax_address_region is not None:
            self.tax_address_region = tax_address_region
        if withholding_tax_rate is not None:
            self.withholding_tax_rate = withholding_tax_rate
        if withholding_tax_amount is not None:
            self.withholding_tax_amount = withholding_tax_amount
        if base_currency_withholding_tax_amount is not None:
            self.base_currency_withholding_tax_amount = base_currency_withholding_tax_amount
        if profit_analysis is not None:
            self.profit_analysis = profit_analysis
        if tax_reconciled is not None:
            self.tax_reconciled = tax_reconciled
        if invoice is not None:
            self.invoice = invoice

    @property
    def id(self):
        """Gets the id of this SalesQuote.  # noqa: E501

        The unique identifier for the item  # noqa: E501

        :return: The id of this SalesQuote.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SalesQuote.

        The unique identifier for the item  # noqa: E501

        :param id: The id of this SalesQuote.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def displayed_as(self):
        """Gets the displayed_as of this SalesQuote.  # noqa: E501

        The name of the resource  # noqa: E501

        :return: The displayed_as of this SalesQuote.  # noqa: E501
        :rtype: str
        """
        return self._displayed_as

    @displayed_as.setter
    def displayed_as(self, displayed_as):
        """Sets the displayed_as of this SalesQuote.

        The name of the resource  # noqa: E501

        :param displayed_as: The displayed_as of this SalesQuote.  # noqa: E501
        :type: str
        """

        self._displayed_as = displayed_as

    @property
    def path(self):
        """Gets the path of this SalesQuote.  # noqa: E501

        The API path for the resource  # noqa: E501

        :return: The path of this SalesQuote.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this SalesQuote.

        The API path for the resource  # noqa: E501

        :param path: The path of this SalesQuote.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def created_at(self):
        """Gets the created_at of this SalesQuote.  # noqa: E501

        The datetime when the item was created  # noqa: E501

        :return: The created_at of this SalesQuote.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SalesQuote.

        The datetime when the item was created  # noqa: E501

        :param created_at: The created_at of this SalesQuote.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this SalesQuote.  # noqa: E501

        The datetime when the item was last updated  # noqa: E501

        :return: The updated_at of this SalesQuote.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SalesQuote.

        The datetime when the item was last updated  # noqa: E501

        :param updated_at: The updated_at of this SalesQuote.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def links(self):
        """Gets the links of this SalesQuote.  # noqa: E501

        Links for the resource  # noqa: E501

        :return: The links of this SalesQuote.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this SalesQuote.

        Links for the resource  # noqa: E501

        :param links: The links of this SalesQuote.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def editable(self):
        """Gets the editable of this SalesQuote.  # noqa: E501

        Indicates whether artefact can be edited  # noqa: E501

        :return: The editable of this SalesQuote.  # noqa: E501
        :rtype: bool
        """
        return self._editable

    @editable.setter
    def editable(self, editable):
        """Sets the editable of this SalesQuote.

        Indicates whether artefact can be edited  # noqa: E501

        :param editable: The editable of this SalesQuote.  # noqa: E501
        :type: bool
        """

        self._editable = editable

    @property
    def tax_calculation_method(self):
        """Gets the tax_calculation_method of this SalesQuote.  # noqa: E501

        The tax calculation method, if applicable, for this sales invoice, returns invoice, cash or retailer.  # noqa: E501

        :return: The tax_calculation_method of this SalesQuote.  # noqa: E501
        :rtype: str
        """
        return self._tax_calculation_method

    @tax_calculation_method.setter
    def tax_calculation_method(self, tax_calculation_method):
        """Sets the tax_calculation_method of this SalesQuote.

        The tax calculation method, if applicable, for this sales invoice, returns invoice, cash or retailer.  # noqa: E501

        :param tax_calculation_method: The tax_calculation_method of this SalesQuote.  # noqa: E501
        :type: str
        """

        self._tax_calculation_method = tax_calculation_method

    @property
    def contact(self):
        """Gets the contact of this SalesQuote.  # noqa: E501


        :return: The contact of this SalesQuote.  # noqa: E501
        :rtype: Contact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this SalesQuote.


        :param contact: The contact of this SalesQuote.  # noqa: E501
        :type: Contact
        """

        self._contact = contact

    @property
    def quote_number_prefix(self):
        """Gets the quote_number_prefix of this SalesQuote.  # noqa: E501

        The quote number prefix  # noqa: E501

        :return: The quote_number_prefix of this SalesQuote.  # noqa: E501
        :rtype: str
        """
        return self._quote_number_prefix

    @quote_number_prefix.setter
    def quote_number_prefix(self, quote_number_prefix):
        """Sets the quote_number_prefix of this SalesQuote.

        The quote number prefix  # noqa: E501

        :param quote_number_prefix: The quote_number_prefix of this SalesQuote.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                quote_number_prefix is not None and len(quote_number_prefix) > 6):
            raise ValueError("Invalid value for `quote_number_prefix`, length must be less than or equal to `6`")  # noqa: E501

        self._quote_number_prefix = quote_number_prefix

    @property
    def quote_number(self):
        """Gets the quote_number of this SalesQuote.  # noqa: E501

        The generated quote number  # noqa: E501

        :return: The quote_number of this SalesQuote.  # noqa: E501
        :rtype: str
        """
        return self._quote_number

    @quote_number.setter
    def quote_number(self, quote_number):
        """Sets the quote_number of this SalesQuote.

        The generated quote number  # noqa: E501

        :param quote_number: The quote_number of this SalesQuote.  # noqa: E501
        :type: str
        """

        self._quote_number = quote_number

    @property
    def contact_name(self):
        """Gets the contact_name of this SalesQuote.  # noqa: E501

        The name of the contact when the quote was created  # noqa: E501

        :return: The contact_name of this SalesQuote.  # noqa: E501
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """Sets the contact_name of this SalesQuote.

        The name of the contact when the quote was created  # noqa: E501

        :param contact_name: The contact_name of this SalesQuote.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                contact_name is not None and len(contact_name) > 255):
            raise ValueError("Invalid value for `contact_name`, length must be less than or equal to `255`")  # noqa: E501

        self._contact_name = contact_name

    @property
    def contact_reference(self):
        """Gets the contact_reference of this SalesQuote.  # noqa: E501

        The reference of the contact when the quote was created  # noqa: E501

        :return: The contact_reference of this SalesQuote.  # noqa: E501
        :rtype: str
        """
        return self._contact_reference

    @contact_reference.setter
    def contact_reference(self, contact_reference):
        """Sets the contact_reference of this SalesQuote.

        The reference of the contact when the quote was created  # noqa: E501

        :param contact_reference: The contact_reference of this SalesQuote.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                contact_reference is not None and len(contact_reference) > 255):
            raise ValueError("Invalid value for `contact_reference`, length must be less than or equal to `255`")  # noqa: E501

        self._contact_reference = contact_reference

    @property
    def date(self):
        """Gets the date of this SalesQuote.  # noqa: E501

        The date of the quote  # noqa: E501

        :return: The date of this SalesQuote.  # noqa: E501
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this SalesQuote.

        The date of the quote  # noqa: E501

        :param date: The date of this SalesQuote.  # noqa: E501
        :type: date
        """

        self._date = date

    @property
    def expiry_date(self):
        """Gets the expiry_date of this SalesQuote.  # noqa: E501

        The expiry date of the quote  # noqa: E501

        :return: The expiry_date of this SalesQuote.  # noqa: E501
        :rtype: date
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this SalesQuote.

        The expiry date of the quote  # noqa: E501

        :param expiry_date: The expiry_date of this SalesQuote.  # noqa: E501
        :type: date
        """

        self._expiry_date = expiry_date

    @property
    def reference(self):
        """Gets the reference of this SalesQuote.  # noqa: E501

        The reference for the quote  # noqa: E501

        :return: The reference of this SalesQuote.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this SalesQuote.

        The reference for the quote  # noqa: E501

        :param reference: The reference of this SalesQuote.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                reference is not None and len(reference) > 25):
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `25`")  # noqa: E501

        self._reference = reference

    @property
    def main_address_free_form(self):
        """Gets the main_address_free_form of this SalesQuote.  # noqa: E501

        The free-form main address of the quote Note: An upper length limit of 500 characters is imposed conditionally and may not apply in every request. A hard upper limit of 65535 characters is imposed by the storage layer, though.  # noqa: E501

        :return: The main_address_free_form of this SalesQuote.  # noqa: E501
        :rtype: str
        """
        return self._main_address_free_form

    @main_address_free_form.setter
    def main_address_free_form(self, main_address_free_form):
        """Sets the main_address_free_form of this SalesQuote.

        The free-form main address of the quote Note: An upper length limit of 500 characters is imposed conditionally and may not apply in every request. A hard upper limit of 65535 characters is imposed by the storage layer, though.  # noqa: E501

        :param main_address_free_form: The main_address_free_form of this SalesQuote.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                main_address_free_form is not None and len(main_address_free_form) > 500):
            raise ValueError("Invalid value for `main_address_free_form`, length must be less than or equal to `500`")  # noqa: E501

        self._main_address_free_form = main_address_free_form

    @property
    def main_address(self):
        """Gets the main_address of this SalesQuote.  # noqa: E501


        :return: The main_address of this SalesQuote.  # noqa: E501
        :rtype: SalesArtefactAddress
        """
        return self._main_address

    @main_address.setter
    def main_address(self, main_address):
        """Sets the main_address of this SalesQuote.


        :param main_address: The main_address of this SalesQuote.  # noqa: E501
        :type: SalesArtefactAddress
        """

        self._main_address = main_address

    @property
    def delivery_address_free_form(self):
        """Gets the delivery_address_free_form of this SalesQuote.  # noqa: E501

        The free-form delivery address of the quote Note: An upper length limit of 500 characters is imposed conditionally and may not apply in every request. A hard upper limit of 65535 characters is imposed by the storage layer, though.  # noqa: E501

        :return: The delivery_address_free_form of this SalesQuote.  # noqa: E501
        :rtype: str
        """
        return self._delivery_address_free_form

    @delivery_address_free_form.setter
    def delivery_address_free_form(self, delivery_address_free_form):
        """Sets the delivery_address_free_form of this SalesQuote.

        The free-form delivery address of the quote Note: An upper length limit of 500 characters is imposed conditionally and may not apply in every request. A hard upper limit of 65535 characters is imposed by the storage layer, though.  # noqa: E501

        :param delivery_address_free_form: The delivery_address_free_form of this SalesQuote.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                delivery_address_free_form is not None and len(delivery_address_free_form) > 500):
            raise ValueError("Invalid value for `delivery_address_free_form`, length must be less than or equal to `500`")  # noqa: E501

        self._delivery_address_free_form = delivery_address_free_form

    @property
    def delivery_address(self):
        """Gets the delivery_address of this SalesQuote.  # noqa: E501


        :return: The delivery_address of this SalesQuote.  # noqa: E501
        :rtype: SalesArtefactAddress
        """
        return self._delivery_address

    @delivery_address.setter
    def delivery_address(self, delivery_address):
        """Sets the delivery_address of this SalesQuote.


        :param delivery_address: The delivery_address of this SalesQuote.  # noqa: E501
        :type: SalesArtefactAddress
        """

        self._delivery_address = delivery_address

    @property
    def notes(self):
        """Gets the notes of this SalesQuote.  # noqa: E501

        Quote notes  # noqa: E501

        :return: The notes of this SalesQuote.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this SalesQuote.

        Quote notes  # noqa: E501

        :param notes: The notes of this SalesQuote.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                notes is not None and len(notes) > 2000):
            raise ValueError("Invalid value for `notes`, length must be less than or equal to `2000`")  # noqa: E501

        self._notes = notes

    @property
    def terms_and_conditions(self):
        """Gets the terms_and_conditions of this SalesQuote.  # noqa: E501

        Quote terms and conditions  # noqa: E501

        :return: The terms_and_conditions of this SalesQuote.  # noqa: E501
        :rtype: str
        """
        return self._terms_and_conditions

    @terms_and_conditions.setter
    def terms_and_conditions(self, terms_and_conditions):
        """Sets the terms_and_conditions of this SalesQuote.

        Quote terms and conditions  # noqa: E501

        :param terms_and_conditions: The terms_and_conditions of this SalesQuote.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                terms_and_conditions is not None and len(terms_and_conditions) > 2000):
            raise ValueError("Invalid value for `terms_and_conditions`, length must be less than or equal to `2000`")  # noqa: E501

        self._terms_and_conditions = terms_and_conditions

    @property
    def shipping_net_amount(self):
        """Gets the shipping_net_amount of this SalesQuote.  # noqa: E501

        The net shipping amount  # noqa: E501

        :return: The shipping_net_amount of this SalesQuote.  # noqa: E501
        :rtype: float
        """
        return self._shipping_net_amount

    @shipping_net_amount.setter
    def shipping_net_amount(self, shipping_net_amount):
        """Sets the shipping_net_amount of this SalesQuote.

        The net shipping amount  # noqa: E501

        :param shipping_net_amount: The shipping_net_amount of this SalesQuote.  # noqa: E501
        :type: float
        """

        self._shipping_net_amount = shipping_net_amount

    @property
    def shipping_tax_rate(self):
        """Gets the shipping_tax_rate of this SalesQuote.  # noqa: E501


        :return: The shipping_tax_rate of this SalesQuote.  # noqa: E501
        :rtype: Base
        """
        return self._shipping_tax_rate

    @shipping_tax_rate.setter
    def shipping_tax_rate(self, shipping_tax_rate):
        """Sets the shipping_tax_rate of this SalesQuote.


        :param shipping_tax_rate: The shipping_tax_rate of this SalesQuote.  # noqa: E501
        :type: Base
        """

        self._shipping_tax_rate = shipping_tax_rate

    @property
    def shipping_tax_amount(self):
        """Gets the shipping_tax_amount of this SalesQuote.  # noqa: E501

        The tax shipping amount. NOTE: This is not required for POST/PUT requests as the shipping tax is calculated based on the shipping_net_amount and the shipping_tax_rate.  # noqa: E501

        :return: The shipping_tax_amount of this SalesQuote.  # noqa: E501
        :rtype: float
        """
        return self._shipping_tax_amount

    @shipping_tax_amount.setter
    def shipping_tax_amount(self, shipping_tax_amount):
        """Sets the shipping_tax_amount of this SalesQuote.

        The tax shipping amount. NOTE: This is not required for POST/PUT requests as the shipping tax is calculated based on the shipping_net_amount and the shipping_tax_rate.  # noqa: E501

        :param shipping_tax_amount: The shipping_tax_amount of this SalesQuote.  # noqa: E501
        :type: float
        """

        self._shipping_tax_amount = shipping_tax_amount

    @property
    def shipping_tax_breakdown(self):
        """Gets the shipping_tax_breakdown of this SalesQuote.  # noqa: E501

        The shipping tax breakdown for the quote  # noqa: E501

        :return: The shipping_tax_breakdown of this SalesQuote.  # noqa: E501
        :rtype: list[TaxBreakdown]
        """
        return self._shipping_tax_breakdown

    @shipping_tax_breakdown.setter
    def shipping_tax_breakdown(self, shipping_tax_breakdown):
        """Sets the shipping_tax_breakdown of this SalesQuote.

        The shipping tax breakdown for the quote  # noqa: E501

        :param shipping_tax_breakdown: The shipping_tax_breakdown of this SalesQuote.  # noqa: E501
        :type: list[TaxBreakdown]
        """

        self._shipping_tax_breakdown = shipping_tax_breakdown

    @property
    def shipping_total_amount(self):
        """Gets the shipping_total_amount of this SalesQuote.  # noqa: E501

        The total shipping amount  # noqa: E501

        :return: The shipping_total_amount of this SalesQuote.  # noqa: E501
        :rtype: float
        """
        return self._shipping_total_amount

    @shipping_total_amount.setter
    def shipping_total_amount(self, shipping_total_amount):
        """Sets the shipping_total_amount of this SalesQuote.

        The total shipping amount  # noqa: E501

        :param shipping_total_amount: The shipping_total_amount of this SalesQuote.  # noqa: E501
        :type: float
        """

        self._shipping_total_amount = shipping_total_amount

    @property
    def net_amount(self):
        """Gets the net_amount of this SalesQuote.  # noqa: E501

        The net amount of the quote  # noqa: E501

        :return: The net_amount of this SalesQuote.  # noqa: E501
        :rtype: float
        """
        return self._net_amount

    @net_amount.setter
    def net_amount(self, net_amount):
        """Sets the net_amount of this SalesQuote.

        The net amount of the quote  # noqa: E501

        :param net_amount: The net_amount of this SalesQuote.  # noqa: E501
        :type: float
        """

        self._net_amount = net_amount

    @property
    def tax_amount(self):
        """Gets the tax_amount of this SalesQuote.  # noqa: E501

        The tax amount of the quote  # noqa: E501

        :return: The tax_amount of this SalesQuote.  # noqa: E501
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this SalesQuote.

        The tax amount of the quote  # noqa: E501

        :param tax_amount: The tax_amount of this SalesQuote.  # noqa: E501
        :type: float
        """

        self._tax_amount = tax_amount

    @property
    def total_amount(self):
        """Gets the total_amount of this SalesQuote.  # noqa: E501

        The total amount of the quote  # noqa: E501

        :return: The total_amount of this SalesQuote.  # noqa: E501
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this SalesQuote.

        The total amount of the quote  # noqa: E501

        :param total_amount: The total_amount of this SalesQuote.  # noqa: E501
        :type: float
        """

        self._total_amount = total_amount

    @property
    def currency(self):
        """Gets the currency of this SalesQuote.  # noqa: E501


        :return: The currency of this SalesQuote.  # noqa: E501
        :rtype: Base
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SalesQuote.


        :param currency: The currency of this SalesQuote.  # noqa: E501
        :type: Base
        """

        self._currency = currency

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this SalesQuote.  # noqa: E501

        The exchange rate for the quote  # noqa: E501

        :return: The exchange_rate of this SalesQuote.  # noqa: E501
        :rtype: float
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this SalesQuote.

        The exchange rate for the quote  # noqa: E501

        :param exchange_rate: The exchange_rate of this SalesQuote.  # noqa: E501
        :type: float
        """

        self._exchange_rate = exchange_rate

    @property
    def inverse_exchange_rate(self):
        """Gets the inverse_exchange_rate of this SalesQuote.  # noqa: E501

        The inverse exchange rate for the quote  # noqa: E501

        :return: The inverse_exchange_rate of this SalesQuote.  # noqa: E501
        :rtype: float
        """
        return self._inverse_exchange_rate

    @inverse_exchange_rate.setter
    def inverse_exchange_rate(self, inverse_exchange_rate):
        """Sets the inverse_exchange_rate of this SalesQuote.

        The inverse exchange rate for the quote  # noqa: E501

        :param inverse_exchange_rate: The inverse_exchange_rate of this SalesQuote.  # noqa: E501
        :type: float
        """

        self._inverse_exchange_rate = inverse_exchange_rate

    @property
    def base_currency_shipping_net_amount(self):
        """Gets the base_currency_shipping_net_amount of this SalesQuote.  # noqa: E501

        The net shipping amount in base currency  # noqa: E501

        :return: The base_currency_shipping_net_amount of this SalesQuote.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_shipping_net_amount

    @base_currency_shipping_net_amount.setter
    def base_currency_shipping_net_amount(self, base_currency_shipping_net_amount):
        """Sets the base_currency_shipping_net_amount of this SalesQuote.

        The net shipping amount in base currency  # noqa: E501

        :param base_currency_shipping_net_amount: The base_currency_shipping_net_amount of this SalesQuote.  # noqa: E501
        :type: float
        """

        self._base_currency_shipping_net_amount = base_currency_shipping_net_amount

    @property
    def base_currency_shipping_tax_amount(self):
        """Gets the base_currency_shipping_tax_amount of this SalesQuote.  # noqa: E501

        The tax shipping amount in base currency  # noqa: E501

        :return: The base_currency_shipping_tax_amount of this SalesQuote.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_shipping_tax_amount

    @base_currency_shipping_tax_amount.setter
    def base_currency_shipping_tax_amount(self, base_currency_shipping_tax_amount):
        """Sets the base_currency_shipping_tax_amount of this SalesQuote.

        The tax shipping amount in base currency  # noqa: E501

        :param base_currency_shipping_tax_amount: The base_currency_shipping_tax_amount of this SalesQuote.  # noqa: E501
        :type: float
        """

        self._base_currency_shipping_tax_amount = base_currency_shipping_tax_amount

    @property
    def base_currency_shipping_tax_breakdown(self):
        """Gets the base_currency_shipping_tax_breakdown of this SalesQuote.  # noqa: E501

        The shipping tax breakdown for the  quote in base currency  # noqa: E501

        :return: The base_currency_shipping_tax_breakdown of this SalesQuote.  # noqa: E501
        :rtype: list[TaxBreakdown]
        """
        return self._base_currency_shipping_tax_breakdown

    @base_currency_shipping_tax_breakdown.setter
    def base_currency_shipping_tax_breakdown(self, base_currency_shipping_tax_breakdown):
        """Sets the base_currency_shipping_tax_breakdown of this SalesQuote.

        The shipping tax breakdown for the  quote in base currency  # noqa: E501

        :param base_currency_shipping_tax_breakdown: The base_currency_shipping_tax_breakdown of this SalesQuote.  # noqa: E501
        :type: list[TaxBreakdown]
        """

        self._base_currency_shipping_tax_breakdown = base_currency_shipping_tax_breakdown

    @property
    def base_currency_shipping_total_amount(self):
        """Gets the base_currency_shipping_total_amount of this SalesQuote.  # noqa: E501

        The total shipping amount in base currency  # noqa: E501

        :return: The base_currency_shipping_total_amount of this SalesQuote.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_shipping_total_amount

    @base_currency_shipping_total_amount.setter
    def base_currency_shipping_total_amount(self, base_currency_shipping_total_amount):
        """Sets the base_currency_shipping_total_amount of this SalesQuote.

        The total shipping amount in base currency  # noqa: E501

        :param base_currency_shipping_total_amount: The base_currency_shipping_total_amount of this SalesQuote.  # noqa: E501
        :type: float
        """

        self._base_currency_shipping_total_amount = base_currency_shipping_total_amount

    @property
    def total_quantity(self):
        """Gets the total_quantity of this SalesQuote.  # noqa: E501

        The total quantity of the quote  # noqa: E501

        :return: The total_quantity of this SalesQuote.  # noqa: E501
        :rtype: float
        """
        return self._total_quantity

    @total_quantity.setter
    def total_quantity(self, total_quantity):
        """Sets the total_quantity of this SalesQuote.

        The total quantity of the quote  # noqa: E501

        :param total_quantity: The total_quantity of this SalesQuote.  # noqa: E501
        :type: float
        """

        self._total_quantity = total_quantity

    @property
    def total_discount_amount(self):
        """Gets the total_discount_amount of this SalesQuote.  # noqa: E501

        The discount amount on the  quote  # noqa: E501

        :return: The total_discount_amount of this SalesQuote.  # noqa: E501
        :rtype: float
        """
        return self._total_discount_amount

    @total_discount_amount.setter
    def total_discount_amount(self, total_discount_amount):
        """Sets the total_discount_amount of this SalesQuote.

        The discount amount on the  quote  # noqa: E501

        :param total_discount_amount: The total_discount_amount of this SalesQuote.  # noqa: E501
        :type: float
        """

        self._total_discount_amount = total_discount_amount

    @property
    def base_currency_total_discount_amount(self):
        """Gets the base_currency_total_discount_amount of this SalesQuote.  # noqa: E501

        The discount amount on the  quote in base currency  # noqa: E501

        :return: The base_currency_total_discount_amount of this SalesQuote.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_total_discount_amount

    @base_currency_total_discount_amount.setter
    def base_currency_total_discount_amount(self, base_currency_total_discount_amount):
        """Sets the base_currency_total_discount_amount of this SalesQuote.

        The discount amount on the  quote in base currency  # noqa: E501

        :param base_currency_total_discount_amount: The base_currency_total_discount_amount of this SalesQuote.  # noqa: E501
        :type: float
        """

        self._base_currency_total_discount_amount = base_currency_total_discount_amount

    @property
    def base_currency_net_amount(self):
        """Gets the base_currency_net_amount of this SalesQuote.  # noqa: E501

        The net amount of the quote in base currency  # noqa: E501

        :return: The base_currency_net_amount of this SalesQuote.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_net_amount

    @base_currency_net_amount.setter
    def base_currency_net_amount(self, base_currency_net_amount):
        """Sets the base_currency_net_amount of this SalesQuote.

        The net amount of the quote in base currency  # noqa: E501

        :param base_currency_net_amount: The base_currency_net_amount of this SalesQuote.  # noqa: E501
        :type: float
        """

        self._base_currency_net_amount = base_currency_net_amount

    @property
    def base_currency_tax_amount(self):
        """Gets the base_currency_tax_amount of this SalesQuote.  # noqa: E501

        The tax amount of the quote in base currency  # noqa: E501

        :return: The base_currency_tax_amount of this SalesQuote.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_tax_amount

    @base_currency_tax_amount.setter
    def base_currency_tax_amount(self, base_currency_tax_amount):
        """Sets the base_currency_tax_amount of this SalesQuote.

        The tax amount of the quote in base currency  # noqa: E501

        :param base_currency_tax_amount: The base_currency_tax_amount of this SalesQuote.  # noqa: E501
        :type: float
        """

        self._base_currency_tax_amount = base_currency_tax_amount

    @property
    def base_currency_total_amount(self):
        """Gets the base_currency_total_amount of this SalesQuote.  # noqa: E501

        The total amount of the quote in base currency  # noqa: E501

        :return: The base_currency_total_amount of this SalesQuote.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_total_amount

    @base_currency_total_amount.setter
    def base_currency_total_amount(self, base_currency_total_amount):
        """Sets the base_currency_total_amount of this SalesQuote.

        The total amount of the quote in base currency  # noqa: E501

        :param base_currency_total_amount: The base_currency_total_amount of this SalesQuote.  # noqa: E501
        :type: float
        """

        self._base_currency_total_amount = base_currency_total_amount

    @property
    def payments_allocations_total_amount(self):
        """Gets the payments_allocations_total_amount of this SalesQuote.  # noqa: E501

        The total amount of all payments and allocations  # noqa: E501

        :return: The payments_allocations_total_amount of this SalesQuote.  # noqa: E501
        :rtype: float
        """
        return self._payments_allocations_total_amount

    @payments_allocations_total_amount.setter
    def payments_allocations_total_amount(self, payments_allocations_total_amount):
        """Sets the payments_allocations_total_amount of this SalesQuote.

        The total amount of all payments and allocations  # noqa: E501

        :param payments_allocations_total_amount: The payments_allocations_total_amount of this SalesQuote.  # noqa: E501
        :type: float
        """

        self._payments_allocations_total_amount = payments_allocations_total_amount

    @property
    def payments_allocations_total_discount(self):
        """Gets the payments_allocations_total_discount of this SalesQuote.  # noqa: E501

        The total discount of all payments and allocations  # noqa: E501

        :return: The payments_allocations_total_discount of this SalesQuote.  # noqa: E501
        :rtype: float
        """
        return self._payments_allocations_total_discount

    @payments_allocations_total_discount.setter
    def payments_allocations_total_discount(self, payments_allocations_total_discount):
        """Sets the payments_allocations_total_discount of this SalesQuote.

        The total discount of all payments and allocations  # noqa: E501

        :param payments_allocations_total_discount: The payments_allocations_total_discount of this SalesQuote.  # noqa: E501
        :type: float
        """

        self._payments_allocations_total_discount = payments_allocations_total_discount

    @property
    def total_paid(self):
        """Gets the total_paid of this SalesQuote.  # noqa: E501

        The total paid amount of the quote including any payments, allocations and discounts  # noqa: E501

        :return: The total_paid of this SalesQuote.  # noqa: E501
        :rtype: float
        """
        return self._total_paid

    @total_paid.setter
    def total_paid(self, total_paid):
        """Sets the total_paid of this SalesQuote.

        The total paid amount of the quote including any payments, allocations and discounts  # noqa: E501

        :param total_paid: The total_paid of this SalesQuote.  # noqa: E501
        :type: float
        """

        self._total_paid = total_paid

    @property
    def status(self):
        """Gets the status of this SalesQuote.  # noqa: E501


        :return: The status of this SalesQuote.  # noqa: E501
        :rtype: QuoteStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SalesQuote.


        :param status: The status of this SalesQuote.  # noqa: E501
        :type: QuoteStatus
        """

        self._status = status

    @property
    def sent(self):
        """Gets the sent of this SalesQuote.  # noqa: E501

        Indicates whether the quote has been sent  # noqa: E501

        :return: The sent of this SalesQuote.  # noqa: E501
        :rtype: bool
        """
        return self._sent

    @sent.setter
    def sent(self, sent):
        """Sets the sent of this SalesQuote.

        Indicates whether the quote has been sent  # noqa: E501

        :param sent: The sent of this SalesQuote.  # noqa: E501
        :type: bool
        """

        self._sent = sent

    @property
    def sent_by_email(self):
        """Gets the sent_by_email of this SalesQuote.  # noqa: E501

        Indicates whether the quote has been emailed  # noqa: E501

        :return: The sent_by_email of this SalesQuote.  # noqa: E501
        :rtype: bool
        """
        return self._sent_by_email

    @sent_by_email.setter
    def sent_by_email(self, sent_by_email):
        """Sets the sent_by_email of this SalesQuote.

        Indicates whether the quote has been emailed  # noqa: E501

        :param sent_by_email: The sent_by_email of this SalesQuote.  # noqa: E501
        :type: bool
        """

        self._sent_by_email = sent_by_email

    @property
    def quote_lines(self):
        """Gets the quote_lines of this SalesQuote.  # noqa: E501

        The quote lines of the quote  # noqa: E501

        :return: The quote_lines of this SalesQuote.  # noqa: E501
        :rtype: list[SalesQuoteLineItem]
        """
        return self._quote_lines

    @quote_lines.setter
    def quote_lines(self, quote_lines):
        """Sets the quote_lines of this SalesQuote.

        The quote lines of the quote  # noqa: E501

        :param quote_lines: The quote_lines of this SalesQuote.  # noqa: E501
        :type: list[SalesQuoteLineItem]
        """

        self._quote_lines = quote_lines

    @property
    def tax_analysis(self):
        """Gets the tax_analysis of this SalesQuote.  # noqa: E501

        The quote tax analysis  # noqa: E501

        :return: The tax_analysis of this SalesQuote.  # noqa: E501
        :rtype: list[ArtefactTaxAnalysis]
        """
        return self._tax_analysis

    @tax_analysis.setter
    def tax_analysis(self, tax_analysis):
        """Sets the tax_analysis of this SalesQuote.

        The quote tax analysis  # noqa: E501

        :param tax_analysis: The tax_analysis of this SalesQuote.  # noqa: E501
        :type: list[ArtefactTaxAnalysis]
        """

        self._tax_analysis = tax_analysis

    @property
    def detailed_tax_analysis(self):
        """Gets the detailed_tax_analysis of this SalesQuote.  # noqa: E501


        :return: The detailed_tax_analysis of this SalesQuote.  # noqa: E501
        :rtype: ArtefactDetailedTaxAnalysis
        """
        return self._detailed_tax_analysis

    @detailed_tax_analysis.setter
    def detailed_tax_analysis(self, detailed_tax_analysis):
        """Sets the detailed_tax_analysis of this SalesQuote.


        :param detailed_tax_analysis: The detailed_tax_analysis of this SalesQuote.  # noqa: E501
        :type: ArtefactDetailedTaxAnalysis
        """

        self._detailed_tax_analysis = detailed_tax_analysis

    @property
    def tax_address_region(self):
        """Gets the tax_address_region of this SalesQuote.  # noqa: E501


        :return: The tax_address_region of this SalesQuote.  # noqa: E501
        :rtype: Base
        """
        return self._tax_address_region

    @tax_address_region.setter
    def tax_address_region(self, tax_address_region):
        """Sets the tax_address_region of this SalesQuote.


        :param tax_address_region: The tax_address_region of this SalesQuote.  # noqa: E501
        :type: Base
        """

        self._tax_address_region = tax_address_region

    @property
    def withholding_tax_rate(self):
        """Gets the withholding_tax_rate of this SalesQuote.  # noqa: E501

        IRPF withheld Tax Rate (Spain only)  # noqa: E501

        :return: The withholding_tax_rate of this SalesQuote.  # noqa: E501
        :rtype: float
        """
        return self._withholding_tax_rate

    @withholding_tax_rate.setter
    def withholding_tax_rate(self, withholding_tax_rate):
        """Sets the withholding_tax_rate of this SalesQuote.

        IRPF withheld Tax Rate (Spain only)  # noqa: E501

        :param withholding_tax_rate: The withholding_tax_rate of this SalesQuote.  # noqa: E501
        :type: float
        """

        self._withholding_tax_rate = withholding_tax_rate

    @property
    def withholding_tax_amount(self):
        """Gets the withholding_tax_amount of this SalesQuote.  # noqa: E501

        IRPF withheld Tax Amount (Spain only)  # noqa: E501

        :return: The withholding_tax_amount of this SalesQuote.  # noqa: E501
        :rtype: float
        """
        return self._withholding_tax_amount

    @withholding_tax_amount.setter
    def withholding_tax_amount(self, withholding_tax_amount):
        """Sets the withholding_tax_amount of this SalesQuote.

        IRPF withheld Tax Amount (Spain only)  # noqa: E501

        :param withholding_tax_amount: The withholding_tax_amount of this SalesQuote.  # noqa: E501
        :type: float
        """

        self._withholding_tax_amount = withholding_tax_amount

    @property
    def base_currency_withholding_tax_amount(self):
        """Gets the base_currency_withholding_tax_amount of this SalesQuote.  # noqa: E501

        IRPF withheld Tax Amount (Spain only) in the base currency  # noqa: E501

        :return: The base_currency_withholding_tax_amount of this SalesQuote.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_withholding_tax_amount

    @base_currency_withholding_tax_amount.setter
    def base_currency_withholding_tax_amount(self, base_currency_withholding_tax_amount):
        """Sets the base_currency_withholding_tax_amount of this SalesQuote.

        IRPF withheld Tax Amount (Spain only) in the base currency  # noqa: E501

        :param base_currency_withholding_tax_amount: The base_currency_withholding_tax_amount of this SalesQuote.  # noqa: E501
        :type: float
        """

        self._base_currency_withholding_tax_amount = base_currency_withholding_tax_amount

    @property
    def profit_analysis(self):
        """Gets the profit_analysis of this SalesQuote.  # noqa: E501


        :return: The profit_analysis of this SalesQuote.  # noqa: E501
        :rtype: ProfitAnalysis
        """
        return self._profit_analysis

    @profit_analysis.setter
    def profit_analysis(self, profit_analysis):
        """Sets the profit_analysis of this SalesQuote.


        :param profit_analysis: The profit_analysis of this SalesQuote.  # noqa: E501
        :type: ProfitAnalysis
        """

        self._profit_analysis = profit_analysis

    @property
    def tax_reconciled(self):
        """Gets the tax_reconciled of this SalesQuote.  # noqa: E501

        Indicates if the quote/estimate is tax reconciled or not.  # noqa: E501

        :return: The tax_reconciled of this SalesQuote.  # noqa: E501
        :rtype: bool
        """
        return self._tax_reconciled

    @tax_reconciled.setter
    def tax_reconciled(self, tax_reconciled):
        """Sets the tax_reconciled of this SalesQuote.

        Indicates if the quote/estimate is tax reconciled or not.  # noqa: E501

        :param tax_reconciled: The tax_reconciled of this SalesQuote.  # noqa: E501
        :type: bool
        """

        self._tax_reconciled = tax_reconciled

    @property
    def invoice(self):
        """Gets the invoice of this SalesQuote.  # noqa: E501


        :return: The invoice of this SalesQuote.  # noqa: E501
        :rtype: Generic
        """
        return self._invoice

    @invoice.setter
    def invoice(self, invoice):
        """Sets the invoice of this SalesQuote.


        :param invoice: The invoice of this SalesQuote.  # noqa: E501
        :type: Generic
        """

        self._invoice = invoice

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SalesQuote):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SalesQuote):
            return True

        return self.to_dict() != other.to_dict()
