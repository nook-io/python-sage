# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class PaymentAllocation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'links': 'list[Link]',
        'date': 'date',
        'type': 'str',
        'reference': 'str',
        'amount': 'float',
        'discount': 'float',
        'stripe_transaction_id': 'str',
        'contact_allocation': 'ContactAllocation',
        'artefact': 'Generic',
        'contact_payment': 'ContactPayment',
        'displayed_as': 'str',
        'negative_payment': 'bool'
    }

    attribute_map = {
        'links': 'links',
        'date': 'date',
        'type': 'type',
        'reference': 'reference',
        'amount': 'amount',
        'discount': 'discount',
        'stripe_transaction_id': 'stripe_transaction_id',
        'contact_allocation': 'contact_allocation',
        'artefact': 'artefact',
        'contact_payment': 'contact_payment',
        'displayed_as': 'displayed_as',
        'negative_payment': 'negative_payment'
    }

    def __init__(self, links=None, date=None, type=None, reference=None, amount=None, discount=None, stripe_transaction_id=None, contact_allocation=None, artefact=None, contact_payment=None, displayed_as=None, negative_payment=None, local_vars_configuration=None):  # noqa: E501
        """PaymentAllocation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._links = None
        self._date = None
        self._type = None
        self._reference = None
        self._amount = None
        self._discount = None
        self._stripe_transaction_id = None
        self._contact_allocation = None
        self._artefact = None
        self._contact_payment = None
        self._displayed_as = None
        self._negative_payment = None
        self.discriminator = None

        if links is not None:
            self.links = links
        if date is not None:
            self.date = date
        if type is not None:
            self.type = type
        if reference is not None:
            self.reference = reference
        if amount is not None:
            self.amount = amount
        if discount is not None:
            self.discount = discount
        if stripe_transaction_id is not None:
            self.stripe_transaction_id = stripe_transaction_id
        if contact_allocation is not None:
            self.contact_allocation = contact_allocation
        if artefact is not None:
            self.artefact = artefact
        if contact_payment is not None:
            self.contact_payment = contact_payment
        if displayed_as is not None:
            self.displayed_as = displayed_as
        if negative_payment is not None:
            self.negative_payment = negative_payment

    @property
    def links(self):
        """Gets the links of this PaymentAllocation.  # noqa: E501

        Links for the resource  # noqa: E501

        :return: The links of this PaymentAllocation.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PaymentAllocation.

        Links for the resource  # noqa: E501

        :param links: The links of this PaymentAllocation.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def date(self):
        """Gets the date of this PaymentAllocation.  # noqa: E501

        The date for the payment/allocation  # noqa: E501

        :return: The date of this PaymentAllocation.  # noqa: E501
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this PaymentAllocation.

        The date for the payment/allocation  # noqa: E501

        :param date: The date of this PaymentAllocation.  # noqa: E501
        :type: date
        """

        self._date = date

    @property
    def type(self):
        """Gets the type of this PaymentAllocation.  # noqa: E501

        The type of the payment/allocation  # noqa: E501

        :return: The type of this PaymentAllocation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PaymentAllocation.

        The type of the payment/allocation  # noqa: E501

        :param type: The type of this PaymentAllocation.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def reference(self):
        """Gets the reference of this PaymentAllocation.  # noqa: E501

        The reference for the payment/allocation  # noqa: E501

        :return: The reference of this PaymentAllocation.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this PaymentAllocation.

        The reference for the payment/allocation  # noqa: E501

        :param reference: The reference of this PaymentAllocation.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def amount(self):
        """Gets the amount of this PaymentAllocation.  # noqa: E501

        The allocated amount of the payment/allocation  # noqa: E501

        :return: The amount of this PaymentAllocation.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PaymentAllocation.

        The allocated amount of the payment/allocation  # noqa: E501

        :param amount: The amount of this PaymentAllocation.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def discount(self):
        """Gets the discount of this PaymentAllocation.  # noqa: E501

        The discount amount of the payment/allocation  # noqa: E501

        :return: The discount of this PaymentAllocation.  # noqa: E501
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this PaymentAllocation.

        The discount amount of the payment/allocation  # noqa: E501

        :param discount: The discount of this PaymentAllocation.  # noqa: E501
        :type: float
        """

        self._discount = discount

    @property
    def stripe_transaction_id(self):
        """Gets the stripe_transaction_id of this PaymentAllocation.  # noqa: E501


        :return: The stripe_transaction_id of this PaymentAllocation.  # noqa: E501
        :rtype: str
        """
        return self._stripe_transaction_id

    @stripe_transaction_id.setter
    def stripe_transaction_id(self, stripe_transaction_id):
        """Sets the stripe_transaction_id of this PaymentAllocation.


        :param stripe_transaction_id: The stripe_transaction_id of this PaymentAllocation.  # noqa: E501
        :type: str
        """

        self._stripe_transaction_id = stripe_transaction_id

    @property
    def contact_allocation(self):
        """Gets the contact_allocation of this PaymentAllocation.  # noqa: E501


        :return: The contact_allocation of this PaymentAllocation.  # noqa: E501
        :rtype: ContactAllocation
        """
        return self._contact_allocation

    @contact_allocation.setter
    def contact_allocation(self, contact_allocation):
        """Sets the contact_allocation of this PaymentAllocation.


        :param contact_allocation: The contact_allocation of this PaymentAllocation.  # noqa: E501
        :type: ContactAllocation
        """

        self._contact_allocation = contact_allocation

    @property
    def artefact(self):
        """Gets the artefact of this PaymentAllocation.  # noqa: E501


        :return: The artefact of this PaymentAllocation.  # noqa: E501
        :rtype: Generic
        """
        return self._artefact

    @artefact.setter
    def artefact(self, artefact):
        """Sets the artefact of this PaymentAllocation.


        :param artefact: The artefact of this PaymentAllocation.  # noqa: E501
        :type: Generic
        """

        self._artefact = artefact

    @property
    def contact_payment(self):
        """Gets the contact_payment of this PaymentAllocation.  # noqa: E501


        :return: The contact_payment of this PaymentAllocation.  # noqa: E501
        :rtype: ContactPayment
        """
        return self._contact_payment

    @contact_payment.setter
    def contact_payment(self, contact_payment):
        """Sets the contact_payment of this PaymentAllocation.


        :param contact_payment: The contact_payment of this PaymentAllocation.  # noqa: E501
        :type: ContactPayment
        """

        self._contact_payment = contact_payment

    @property
    def displayed_as(self):
        """Gets the displayed_as of this PaymentAllocation.  # noqa: E501

        Display text for the item  # noqa: E501

        :return: The displayed_as of this PaymentAllocation.  # noqa: E501
        :rtype: str
        """
        return self._displayed_as

    @displayed_as.setter
    def displayed_as(self, displayed_as):
        """Sets the displayed_as of this PaymentAllocation.

        Display text for the item  # noqa: E501

        :param displayed_as: The displayed_as of this PaymentAllocation.  # noqa: E501
        :type: str
        """

        self._displayed_as = displayed_as

    @property
    def negative_payment(self):
        """Gets the negative_payment of this PaymentAllocation.  # noqa: E501

        This is a negative payment  # noqa: E501

        :return: The negative_payment of this PaymentAllocation.  # noqa: E501
        :rtype: bool
        """
        return self._negative_payment

    @negative_payment.setter
    def negative_payment(self, negative_payment):
        """Sets the negative_payment of this PaymentAllocation.

        This is a negative payment  # noqa: E501

        :param negative_payment: The negative_payment of this PaymentAllocation.  # noqa: E501
        :type: bool
        """

        self._negative_payment = negative_payment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentAllocation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PaymentAllocation):
            return True

        return self.to_dict() != other.to_dict()
