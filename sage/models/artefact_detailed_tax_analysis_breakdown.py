# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class ArtefactDetailedTaxAnalysisBreakdown(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'tax_rate': 'TaxRate',
        'name': 'str',
        'percentage': 'float',
        'net_amount': 'float',
        'tax_amount': 'float',
        'retail_tax_amount': 'float',
        'total_amount': 'float',
        'goods_amount': 'float',
        'services_amount': 'float',
        'base_currency_net_amount': 'float',
        'base_currency_tax_amount': 'float',
        'base_currency_total_amount': 'float',
        'base_currency_goods_amount': 'float',
        'base_currency_services_amount': 'float'
    }

    attribute_map = {
        'tax_rate': 'tax_rate',
        'name': 'name',
        'percentage': 'percentage',
        'net_amount': 'net_amount',
        'tax_amount': 'tax_amount',
        'retail_tax_amount': 'retail_tax_amount',
        'total_amount': 'total_amount',
        'goods_amount': 'goods_amount',
        'services_amount': 'services_amount',
        'base_currency_net_amount': 'base_currency_net_amount',
        'base_currency_tax_amount': 'base_currency_tax_amount',
        'base_currency_total_amount': 'base_currency_total_amount',
        'base_currency_goods_amount': 'base_currency_goods_amount',
        'base_currency_services_amount': 'base_currency_services_amount'
    }

    def __init__(self, tax_rate=None, name=None, percentage=None, net_amount=None, tax_amount=None, retail_tax_amount=None, total_amount=None, goods_amount=None, services_amount=None, base_currency_net_amount=None, base_currency_tax_amount=None, base_currency_total_amount=None, base_currency_goods_amount=None, base_currency_services_amount=None, local_vars_configuration=None):  # noqa: E501
        """ArtefactDetailedTaxAnalysisBreakdown - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._tax_rate = None
        self._name = None
        self._percentage = None
        self._net_amount = None
        self._tax_amount = None
        self._retail_tax_amount = None
        self._total_amount = None
        self._goods_amount = None
        self._services_amount = None
        self._base_currency_net_amount = None
        self._base_currency_tax_amount = None
        self._base_currency_total_amount = None
        self._base_currency_goods_amount = None
        self._base_currency_services_amount = None
        self.discriminator = None

        if tax_rate is not None:
            self.tax_rate = tax_rate
        if name is not None:
            self.name = name
        if percentage is not None:
            self.percentage = percentage
        if net_amount is not None:
            self.net_amount = net_amount
        if tax_amount is not None:
            self.tax_amount = tax_amount
        if retail_tax_amount is not None:
            self.retail_tax_amount = retail_tax_amount
        if total_amount is not None:
            self.total_amount = total_amount
        if goods_amount is not None:
            self.goods_amount = goods_amount
        if services_amount is not None:
            self.services_amount = services_amount
        if base_currency_net_amount is not None:
            self.base_currency_net_amount = base_currency_net_amount
        if base_currency_tax_amount is not None:
            self.base_currency_tax_amount = base_currency_tax_amount
        if base_currency_total_amount is not None:
            self.base_currency_total_amount = base_currency_total_amount
        if base_currency_goods_amount is not None:
            self.base_currency_goods_amount = base_currency_goods_amount
        if base_currency_services_amount is not None:
            self.base_currency_services_amount = base_currency_services_amount

    @property
    def tax_rate(self):
        """Gets the tax_rate of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501


        :return: The tax_rate of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501
        :rtype: TaxRate
        """
        return self._tax_rate

    @tax_rate.setter
    def tax_rate(self, tax_rate):
        """Sets the tax_rate of this ArtefactDetailedTaxAnalysisBreakdown.


        :param tax_rate: The tax_rate of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501
        :type: TaxRate
        """

        self._tax_rate = tax_rate

    @property
    def name(self):
        """Gets the name of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501

        The tax rate name  # noqa: E501

        :return: The name of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ArtefactDetailedTaxAnalysisBreakdown.

        The tax rate name  # noqa: E501

        :param name: The name of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def percentage(self):
        """Gets the percentage of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501

        The tax rate percentage  # noqa: E501

        :return: The percentage of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this ArtefactDetailedTaxAnalysisBreakdown.

        The tax rate percentage  # noqa: E501

        :param percentage: The percentage of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501
        :type: float
        """

        self._percentage = percentage

    @property
    def net_amount(self):
        """Gets the net_amount of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501

        The net amount for the tax rate  # noqa: E501

        :return: The net_amount of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._net_amount

    @net_amount.setter
    def net_amount(self, net_amount):
        """Sets the net_amount of this ArtefactDetailedTaxAnalysisBreakdown.

        The net amount for the tax rate  # noqa: E501

        :param net_amount: The net_amount of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501
        :type: float
        """

        self._net_amount = net_amount

    @property
    def tax_amount(self):
        """Gets the tax_amount of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501

        The tax amount for the tax rate  # noqa: E501

        :return: The tax_amount of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this ArtefactDetailedTaxAnalysisBreakdown.

        The tax amount for the tax rate  # noqa: E501

        :param tax_amount: The tax_amount of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501
        :type: float
        """

        self._tax_amount = tax_amount

    @property
    def retail_tax_amount(self):
        """Gets the retail_tax_amount of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501

        The retailer tax amount for the tax rate  # noqa: E501

        :return: The retail_tax_amount of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._retail_tax_amount

    @retail_tax_amount.setter
    def retail_tax_amount(self, retail_tax_amount):
        """Sets the retail_tax_amount of this ArtefactDetailedTaxAnalysisBreakdown.

        The retailer tax amount for the tax rate  # noqa: E501

        :param retail_tax_amount: The retail_tax_amount of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501
        :type: float
        """

        self._retail_tax_amount = retail_tax_amount

    @property
    def total_amount(self):
        """Gets the total_amount of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501

        The total amount for the tax rate  # noqa: E501

        :return: The total_amount of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this ArtefactDetailedTaxAnalysisBreakdown.

        The total amount for the tax rate  # noqa: E501

        :param total_amount: The total_amount of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501
        :type: float
        """

        self._total_amount = total_amount

    @property
    def goods_amount(self):
        """Gets the goods_amount of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501

        The total amount for the tax rate relating to goods  # noqa: E501

        :return: The goods_amount of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._goods_amount

    @goods_amount.setter
    def goods_amount(self, goods_amount):
        """Sets the goods_amount of this ArtefactDetailedTaxAnalysisBreakdown.

        The total amount for the tax rate relating to goods  # noqa: E501

        :param goods_amount: The goods_amount of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501
        :type: float
        """

        self._goods_amount = goods_amount

    @property
    def services_amount(self):
        """Gets the services_amount of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501

        The total amount for the tax rate relating to services  # noqa: E501

        :return: The services_amount of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._services_amount

    @services_amount.setter
    def services_amount(self, services_amount):
        """Sets the services_amount of this ArtefactDetailedTaxAnalysisBreakdown.

        The total amount for the tax rate relating to services  # noqa: E501

        :param services_amount: The services_amount of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501
        :type: float
        """

        self._services_amount = services_amount

    @property
    def base_currency_net_amount(self):
        """Gets the base_currency_net_amount of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501

        The base currency net amount for the tax rate  # noqa: E501

        :return: The base_currency_net_amount of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_net_amount

    @base_currency_net_amount.setter
    def base_currency_net_amount(self, base_currency_net_amount):
        """Sets the base_currency_net_amount of this ArtefactDetailedTaxAnalysisBreakdown.

        The base currency net amount for the tax rate  # noqa: E501

        :param base_currency_net_amount: The base_currency_net_amount of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501
        :type: float
        """

        self._base_currency_net_amount = base_currency_net_amount

    @property
    def base_currency_tax_amount(self):
        """Gets the base_currency_tax_amount of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501

        The base currency tax amount for the tax rate  # noqa: E501

        :return: The base_currency_tax_amount of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_tax_amount

    @base_currency_tax_amount.setter
    def base_currency_tax_amount(self, base_currency_tax_amount):
        """Sets the base_currency_tax_amount of this ArtefactDetailedTaxAnalysisBreakdown.

        The base currency tax amount for the tax rate  # noqa: E501

        :param base_currency_tax_amount: The base_currency_tax_amount of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501
        :type: float
        """

        self._base_currency_tax_amount = base_currency_tax_amount

    @property
    def base_currency_total_amount(self):
        """Gets the base_currency_total_amount of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501

        The base currency total amount for the tax rate  # noqa: E501

        :return: The base_currency_total_amount of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_total_amount

    @base_currency_total_amount.setter
    def base_currency_total_amount(self, base_currency_total_amount):
        """Sets the base_currency_total_amount of this ArtefactDetailedTaxAnalysisBreakdown.

        The base currency total amount for the tax rate  # noqa: E501

        :param base_currency_total_amount: The base_currency_total_amount of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501
        :type: float
        """

        self._base_currency_total_amount = base_currency_total_amount

    @property
    def base_currency_goods_amount(self):
        """Gets the base_currency_goods_amount of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501

        The total base currency amount for the tax rate relating to goods  # noqa: E501

        :return: The base_currency_goods_amount of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_goods_amount

    @base_currency_goods_amount.setter
    def base_currency_goods_amount(self, base_currency_goods_amount):
        """Sets the base_currency_goods_amount of this ArtefactDetailedTaxAnalysisBreakdown.

        The total base currency amount for the tax rate relating to goods  # noqa: E501

        :param base_currency_goods_amount: The base_currency_goods_amount of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501
        :type: float
        """

        self._base_currency_goods_amount = base_currency_goods_amount

    @property
    def base_currency_services_amount(self):
        """Gets the base_currency_services_amount of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501

        The total base currency amount for the tax rate relating to services  # noqa: E501

        :return: The base_currency_services_amount of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_services_amount

    @base_currency_services_amount.setter
    def base_currency_services_amount(self, base_currency_services_amount):
        """Sets the base_currency_services_amount of this ArtefactDetailedTaxAnalysisBreakdown.

        The total base currency amount for the tax rate relating to services  # noqa: E501

        :param base_currency_services_amount: The base_currency_services_amount of this ArtefactDetailedTaxAnalysisBreakdown.  # noqa: E501
        :type: float
        """

        self._base_currency_services_amount = base_currency_services_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArtefactDetailedTaxAnalysisBreakdown):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ArtefactDetailedTaxAnalysisBreakdown):
            return True

        return self.to_dict() != other.to_dict()
