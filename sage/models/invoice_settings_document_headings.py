# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class InvoiceSettingsDocumentHeadings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'sales_invoice': 'str',
        'sales_credit_note': 'str',
        'sales_corrective_invoice': 'str',
        'sales_quote': 'str',
        'sales_estimate': 'str',
        'pro_forma': 'str',
        'remittance_advice': 'str',
        'statement': 'str',
        'delivery_note': 'str'
    }

    attribute_map = {
        'sales_invoice': 'sales_invoice',
        'sales_credit_note': 'sales_credit_note',
        'sales_corrective_invoice': 'sales_corrective_invoice',
        'sales_quote': 'sales_quote',
        'sales_estimate': 'sales_estimate',
        'pro_forma': 'pro_forma',
        'remittance_advice': 'remittance_advice',
        'statement': 'statement',
        'delivery_note': 'delivery_note'
    }

    def __init__(self, sales_invoice=None, sales_credit_note=None, sales_corrective_invoice=None, sales_quote=None, sales_estimate=None, pro_forma=None, remittance_advice=None, statement=None, delivery_note=None, local_vars_configuration=None):  # noqa: E501
        """InvoiceSettingsDocumentHeadings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._sales_invoice = None
        self._sales_credit_note = None
        self._sales_corrective_invoice = None
        self._sales_quote = None
        self._sales_estimate = None
        self._pro_forma = None
        self._remittance_advice = None
        self._statement = None
        self._delivery_note = None
        self.discriminator = None

        if sales_invoice is not None:
            self.sales_invoice = sales_invoice
        if sales_credit_note is not None:
            self.sales_credit_note = sales_credit_note
        if sales_corrective_invoice is not None:
            self.sales_corrective_invoice = sales_corrective_invoice
        if sales_quote is not None:
            self.sales_quote = sales_quote
        if sales_estimate is not None:
            self.sales_estimate = sales_estimate
        if pro_forma is not None:
            self.pro_forma = pro_forma
        if remittance_advice is not None:
            self.remittance_advice = remittance_advice
        if statement is not None:
            self.statement = statement
        if delivery_note is not None:
            self.delivery_note = delivery_note

    @property
    def sales_invoice(self):
        """Gets the sales_invoice of this InvoiceSettingsDocumentHeadings.  # noqa: E501

        The customisable sales invoice document header  # noqa: E501

        :return: The sales_invoice of this InvoiceSettingsDocumentHeadings.  # noqa: E501
        :rtype: str
        """
        return self._sales_invoice

    @sales_invoice.setter
    def sales_invoice(self, sales_invoice):
        """Sets the sales_invoice of this InvoiceSettingsDocumentHeadings.

        The customisable sales invoice document header  # noqa: E501

        :param sales_invoice: The sales_invoice of this InvoiceSettingsDocumentHeadings.  # noqa: E501
        :type: str
        """

        self._sales_invoice = sales_invoice

    @property
    def sales_credit_note(self):
        """Gets the sales_credit_note of this InvoiceSettingsDocumentHeadings.  # noqa: E501

        The customisable sales credit note document header  # noqa: E501

        :return: The sales_credit_note of this InvoiceSettingsDocumentHeadings.  # noqa: E501
        :rtype: str
        """
        return self._sales_credit_note

    @sales_credit_note.setter
    def sales_credit_note(self, sales_credit_note):
        """Sets the sales_credit_note of this InvoiceSettingsDocumentHeadings.

        The customisable sales credit note document header  # noqa: E501

        :param sales_credit_note: The sales_credit_note of this InvoiceSettingsDocumentHeadings.  # noqa: E501
        :type: str
        """

        self._sales_credit_note = sales_credit_note

    @property
    def sales_corrective_invoice(self):
        """Gets the sales_corrective_invoice of this InvoiceSettingsDocumentHeadings.  # noqa: E501

        The customisable sales corrective invoice document header  # noqa: E501

        :return: The sales_corrective_invoice of this InvoiceSettingsDocumentHeadings.  # noqa: E501
        :rtype: str
        """
        return self._sales_corrective_invoice

    @sales_corrective_invoice.setter
    def sales_corrective_invoice(self, sales_corrective_invoice):
        """Sets the sales_corrective_invoice of this InvoiceSettingsDocumentHeadings.

        The customisable sales corrective invoice document header  # noqa: E501

        :param sales_corrective_invoice: The sales_corrective_invoice of this InvoiceSettingsDocumentHeadings.  # noqa: E501
        :type: str
        """

        self._sales_corrective_invoice = sales_corrective_invoice

    @property
    def sales_quote(self):
        """Gets the sales_quote of this InvoiceSettingsDocumentHeadings.  # noqa: E501

        The customisable sales quote document header  # noqa: E501

        :return: The sales_quote of this InvoiceSettingsDocumentHeadings.  # noqa: E501
        :rtype: str
        """
        return self._sales_quote

    @sales_quote.setter
    def sales_quote(self, sales_quote):
        """Sets the sales_quote of this InvoiceSettingsDocumentHeadings.

        The customisable sales quote document header  # noqa: E501

        :param sales_quote: The sales_quote of this InvoiceSettingsDocumentHeadings.  # noqa: E501
        :type: str
        """

        self._sales_quote = sales_quote

    @property
    def sales_estimate(self):
        """Gets the sales_estimate of this InvoiceSettingsDocumentHeadings.  # noqa: E501

        The customisable sales estimate document header  # noqa: E501

        :return: The sales_estimate of this InvoiceSettingsDocumentHeadings.  # noqa: E501
        :rtype: str
        """
        return self._sales_estimate

    @sales_estimate.setter
    def sales_estimate(self, sales_estimate):
        """Sets the sales_estimate of this InvoiceSettingsDocumentHeadings.

        The customisable sales estimate document header  # noqa: E501

        :param sales_estimate: The sales_estimate of this InvoiceSettingsDocumentHeadings.  # noqa: E501
        :type: str
        """

        self._sales_estimate = sales_estimate

    @property
    def pro_forma(self):
        """Gets the pro_forma of this InvoiceSettingsDocumentHeadings.  # noqa: E501

        The customisable pro forma document header  # noqa: E501

        :return: The pro_forma of this InvoiceSettingsDocumentHeadings.  # noqa: E501
        :rtype: str
        """
        return self._pro_forma

    @pro_forma.setter
    def pro_forma(self, pro_forma):
        """Sets the pro_forma of this InvoiceSettingsDocumentHeadings.

        The customisable pro forma document header  # noqa: E501

        :param pro_forma: The pro_forma of this InvoiceSettingsDocumentHeadings.  # noqa: E501
        :type: str
        """

        self._pro_forma = pro_forma

    @property
    def remittance_advice(self):
        """Gets the remittance_advice of this InvoiceSettingsDocumentHeadings.  # noqa: E501

        The customisable remittance advice document header  # noqa: E501

        :return: The remittance_advice of this InvoiceSettingsDocumentHeadings.  # noqa: E501
        :rtype: str
        """
        return self._remittance_advice

    @remittance_advice.setter
    def remittance_advice(self, remittance_advice):
        """Sets the remittance_advice of this InvoiceSettingsDocumentHeadings.

        The customisable remittance advice document header  # noqa: E501

        :param remittance_advice: The remittance_advice of this InvoiceSettingsDocumentHeadings.  # noqa: E501
        :type: str
        """

        self._remittance_advice = remittance_advice

    @property
    def statement(self):
        """Gets the statement of this InvoiceSettingsDocumentHeadings.  # noqa: E501

        The customisable statement document header  # noqa: E501

        :return: The statement of this InvoiceSettingsDocumentHeadings.  # noqa: E501
        :rtype: str
        """
        return self._statement

    @statement.setter
    def statement(self, statement):
        """Sets the statement of this InvoiceSettingsDocumentHeadings.

        The customisable statement document header  # noqa: E501

        :param statement: The statement of this InvoiceSettingsDocumentHeadings.  # noqa: E501
        :type: str
        """

        self._statement = statement

    @property
    def delivery_note(self):
        """Gets the delivery_note of this InvoiceSettingsDocumentHeadings.  # noqa: E501

        The customisable delivery note document header  # noqa: E501

        :return: The delivery_note of this InvoiceSettingsDocumentHeadings.  # noqa: E501
        :rtype: str
        """
        return self._delivery_note

    @delivery_note.setter
    def delivery_note(self, delivery_note):
        """Sets the delivery_note of this InvoiceSettingsDocumentHeadings.

        The customisable delivery note document header  # noqa: E501

        :param delivery_note: The delivery_note of this InvoiceSettingsDocumentHeadings.  # noqa: E501
        :type: str
        """

        self._delivery_note = delivery_note

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoiceSettingsDocumentHeadings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InvoiceSettingsDocumentHeadings):
            return True

        return self.to_dict() != other.to_dict()
