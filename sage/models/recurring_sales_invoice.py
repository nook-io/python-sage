# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class RecurringSalesInvoice(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'displayed_as': 'str',
        'links': 'list[Link]',
        'frequency': 'int',
        'on_week_day': 'int',
        'on_day_number': 'int',
        'recurrence_type': 'str',
        'recurrence_status_identifier': 'str'
    }

    attribute_map = {
        'id': 'id',
        'displayed_as': 'displayed_as',
        'links': 'links',
        'frequency': 'frequency',
        'on_week_day': 'on_week_day',
        'on_day_number': 'on_day_number',
        'recurrence_type': 'recurrence_type',
        'recurrence_status_identifier': 'recurrence_status_identifier'
    }

    def __init__(self, id=None, displayed_as=None, links=None, frequency=None, on_week_day=None, on_day_number=None, recurrence_type=None, recurrence_status_identifier=None, local_vars_configuration=None):  # noqa: E501
        """RecurringSalesInvoice - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._displayed_as = None
        self._links = None
        self._frequency = None
        self._on_week_day = None
        self._on_day_number = None
        self._recurrence_type = None
        self._recurrence_status_identifier = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if displayed_as is not None:
            self.displayed_as = displayed_as
        if links is not None:
            self.links = links
        if frequency is not None:
            self.frequency = frequency
        if on_week_day is not None:
            self.on_week_day = on_week_day
        if on_day_number is not None:
            self.on_day_number = on_day_number
        if recurrence_type is not None:
            self.recurrence_type = recurrence_type
        if recurrence_status_identifier is not None:
            self.recurrence_status_identifier = recurrence_status_identifier

    @property
    def id(self):
        """Gets the id of this RecurringSalesInvoice.  # noqa: E501

        The unique identifier for the item  # noqa: E501

        :return: The id of this RecurringSalesInvoice.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RecurringSalesInvoice.

        The unique identifier for the item  # noqa: E501

        :param id: The id of this RecurringSalesInvoice.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def displayed_as(self):
        """Gets the displayed_as of this RecurringSalesInvoice.  # noqa: E501

        The name of the resource  # noqa: E501

        :return: The displayed_as of this RecurringSalesInvoice.  # noqa: E501
        :rtype: str
        """
        return self._displayed_as

    @displayed_as.setter
    def displayed_as(self, displayed_as):
        """Sets the displayed_as of this RecurringSalesInvoice.

        The name of the resource  # noqa: E501

        :param displayed_as: The displayed_as of this RecurringSalesInvoice.  # noqa: E501
        :type: str
        """

        self._displayed_as = displayed_as

    @property
    def links(self):
        """Gets the links of this RecurringSalesInvoice.  # noqa: E501

        Links for the resource  # noqa: E501

        :return: The links of this RecurringSalesInvoice.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this RecurringSalesInvoice.

        Links for the resource  # noqa: E501

        :param links: The links of this RecurringSalesInvoice.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def frequency(self):
        """Gets the frequency of this RecurringSalesInvoice.  # noqa: E501

        The invoice recurrence frequency  # noqa: E501

        :return: The frequency of this RecurringSalesInvoice.  # noqa: E501
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this RecurringSalesInvoice.

        The invoice recurrence frequency  # noqa: E501

        :param frequency: The frequency of this RecurringSalesInvoice.  # noqa: E501
        :type: int
        """

        self._frequency = frequency

    @property
    def on_week_day(self):
        """Gets the on_week_day of this RecurringSalesInvoice.  # noqa: E501

        The invoice recurrence week day  # noqa: E501

        :return: The on_week_day of this RecurringSalesInvoice.  # noqa: E501
        :rtype: int
        """
        return self._on_week_day

    @on_week_day.setter
    def on_week_day(self, on_week_day):
        """Sets the on_week_day of this RecurringSalesInvoice.

        The invoice recurrence week day  # noqa: E501

        :param on_week_day: The on_week_day of this RecurringSalesInvoice.  # noqa: E501
        :type: int
        """

        self._on_week_day = on_week_day

    @property
    def on_day_number(self):
        """Gets the on_day_number of this RecurringSalesInvoice.  # noqa: E501

        The invoice recurrence day  # noqa: E501

        :return: The on_day_number of this RecurringSalesInvoice.  # noqa: E501
        :rtype: int
        """
        return self._on_day_number

    @on_day_number.setter
    def on_day_number(self, on_day_number):
        """Sets the on_day_number of this RecurringSalesInvoice.

        The invoice recurrence day  # noqa: E501

        :param on_day_number: The on_day_number of this RecurringSalesInvoice.  # noqa: E501
        :type: int
        """

        self._on_day_number = on_day_number

    @property
    def recurrence_type(self):
        """Gets the recurrence_type of this RecurringSalesInvoice.  # noqa: E501

        The invoice recurrence type  # noqa: E501

        :return: The recurrence_type of this RecurringSalesInvoice.  # noqa: E501
        :rtype: str
        """
        return self._recurrence_type

    @recurrence_type.setter
    def recurrence_type(self, recurrence_type):
        """Sets the recurrence_type of this RecurringSalesInvoice.

        The invoice recurrence type  # noqa: E501

        :param recurrence_type: The recurrence_type of this RecurringSalesInvoice.  # noqa: E501
        :type: str
        """

        self._recurrence_type = recurrence_type

    @property
    def recurrence_status_identifier(self):
        """Gets the recurrence_status_identifier of this RecurringSalesInvoice.  # noqa: E501

        The status of the recurrence  # noqa: E501

        :return: The recurrence_status_identifier of this RecurringSalesInvoice.  # noqa: E501
        :rtype: str
        """
        return self._recurrence_status_identifier

    @recurrence_status_identifier.setter
    def recurrence_status_identifier(self, recurrence_status_identifier):
        """Sets the recurrence_status_identifier of this RecurringSalesInvoice.

        The status of the recurrence  # noqa: E501

        :param recurrence_status_identifier: The recurrence_status_identifier of this RecurringSalesInvoice.  # noqa: E501
        :type: str
        """

        self._recurrence_status_identifier = recurrence_status_identifier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecurringSalesInvoice):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RecurringSalesInvoice):
            return True

        return self.to_dict() != other.to_dict()
