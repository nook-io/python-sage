# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class StockMovement(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'displayed_as': 'str',
        'path': 'str',
        'links': 'list[Link]',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'movement_number': 'str',
        'date': 'date',
        'cost_price': 'float',
        'quantity': 'float',
        'details': 'str',
        'reference': 'str',
        'stock_item': 'StockItem'
    }

    attribute_map = {
        'id': 'id',
        'displayed_as': 'displayed_as',
        'path': '$path',
        'links': 'links',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'movement_number': 'movement_number',
        'date': 'date',
        'cost_price': 'cost_price',
        'quantity': 'quantity',
        'details': 'details',
        'reference': 'reference',
        'stock_item': 'stock_item'
    }

    def __init__(self, id=None, displayed_as=None, path=None, links=None, created_at=None, updated_at=None, movement_number=None, date=None, cost_price=None, quantity=None, details=None, reference=None, stock_item=None, local_vars_configuration=None):  # noqa: E501
        """StockMovement - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._displayed_as = None
        self._path = None
        self._links = None
        self._created_at = None
        self._updated_at = None
        self._movement_number = None
        self._date = None
        self._cost_price = None
        self._quantity = None
        self._details = None
        self._reference = None
        self._stock_item = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if displayed_as is not None:
            self.displayed_as = displayed_as
        if path is not None:
            self.path = path
        if links is not None:
            self.links = links
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if movement_number is not None:
            self.movement_number = movement_number
        if date is not None:
            self.date = date
        if cost_price is not None:
            self.cost_price = cost_price
        if quantity is not None:
            self.quantity = quantity
        if details is not None:
            self.details = details
        if reference is not None:
            self.reference = reference
        if stock_item is not None:
            self.stock_item = stock_item

    @property
    def id(self):
        """Gets the id of this StockMovement.  # noqa: E501

        The unique identifier for the item  # noqa: E501

        :return: The id of this StockMovement.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StockMovement.

        The unique identifier for the item  # noqa: E501

        :param id: The id of this StockMovement.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def displayed_as(self):
        """Gets the displayed_as of this StockMovement.  # noqa: E501

        Display text for the stock movement  # noqa: E501

        :return: The displayed_as of this StockMovement.  # noqa: E501
        :rtype: str
        """
        return self._displayed_as

    @displayed_as.setter
    def displayed_as(self, displayed_as):
        """Sets the displayed_as of this StockMovement.

        Display text for the stock movement  # noqa: E501

        :param displayed_as: The displayed_as of this StockMovement.  # noqa: E501
        :type: str
        """

        self._displayed_as = displayed_as

    @property
    def path(self):
        """Gets the path of this StockMovement.  # noqa: E501

        The API path for the resource  # noqa: E501

        :return: The path of this StockMovement.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this StockMovement.

        The API path for the resource  # noqa: E501

        :param path: The path of this StockMovement.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def links(self):
        """Gets the links of this StockMovement.  # noqa: E501

        Links for the resource  # noqa: E501

        :return: The links of this StockMovement.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this StockMovement.

        Links for the resource  # noqa: E501

        :param links: The links of this StockMovement.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def created_at(self):
        """Gets the created_at of this StockMovement.  # noqa: E501

        The datetime when the item was created  # noqa: E501

        :return: The created_at of this StockMovement.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this StockMovement.

        The datetime when the item was created  # noqa: E501

        :param created_at: The created_at of this StockMovement.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this StockMovement.  # noqa: E501

        The datetime when the item was last updated  # noqa: E501

        :return: The updated_at of this StockMovement.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this StockMovement.

        The datetime when the item was last updated  # noqa: E501

        :param updated_at: The updated_at of this StockMovement.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def movement_number(self):
        """Gets the movement_number of this StockMovement.  # noqa: E501

        The movement number of the stock movement  # noqa: E501

        :return: The movement_number of this StockMovement.  # noqa: E501
        :rtype: str
        """
        return self._movement_number

    @movement_number.setter
    def movement_number(self, movement_number):
        """Sets the movement_number of this StockMovement.

        The movement number of the stock movement  # noqa: E501

        :param movement_number: The movement_number of this StockMovement.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                movement_number is not None and len(movement_number) > 4):
            raise ValueError("Invalid value for `movement_number`, length must be less than or equal to `4`")  # noqa: E501

        self._movement_number = movement_number

    @property
    def date(self):
        """Gets the date of this StockMovement.  # noqa: E501

        The date the stock movement occurred  # noqa: E501

        :return: The date of this StockMovement.  # noqa: E501
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this StockMovement.

        The date the stock movement occurred  # noqa: E501

        :param date: The date of this StockMovement.  # noqa: E501
        :type: date
        """

        self._date = date

    @property
    def cost_price(self):
        """Gets the cost_price of this StockMovement.  # noqa: E501

        The cost per unit of stock purchased  # noqa: E501

        :return: The cost_price of this StockMovement.  # noqa: E501
        :rtype: float
        """
        return self._cost_price

    @cost_price.setter
    def cost_price(self, cost_price):
        """Sets the cost_price of this StockMovement.

        The cost per unit of stock purchased  # noqa: E501

        :param cost_price: The cost_price of this StockMovement.  # noqa: E501
        :type: float
        """

        self._cost_price = cost_price

    @property
    def quantity(self):
        """Gets the quantity of this StockMovement.  # noqa: E501

        The quantity of the goods adjusted  # noqa: E501

        :return: The quantity of this StockMovement.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this StockMovement.

        The quantity of the goods adjusted  # noqa: E501

        :param quantity: The quantity of this StockMovement.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def details(self):
        """Gets the details of this StockMovement.  # noqa: E501

        The transaction details of the stock movement  # noqa: E501

        :return: The details of this StockMovement.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this StockMovement.

        The transaction details of the stock movement  # noqa: E501

        :param details: The details of this StockMovement.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                details is not None and len(details) > 50):
            raise ValueError("Invalid value for `details`, length must be less than or equal to `50`")  # noqa: E501

        self._details = details

    @property
    def reference(self):
        """Gets the reference of this StockMovement.  # noqa: E501

        The reference of the stock movement  # noqa: E501

        :return: The reference of this StockMovement.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this StockMovement.

        The reference of the stock movement  # noqa: E501

        :param reference: The reference of this StockMovement.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                reference is not None and len(reference) > 31):
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `31`")  # noqa: E501

        self._reference = reference

    @property
    def stock_item(self):
        """Gets the stock_item of this StockMovement.  # noqa: E501


        :return: The stock_item of this StockMovement.  # noqa: E501
        :rtype: StockItem
        """
        return self._stock_item

    @stock_item.setter
    def stock_item(self, stock_item):
        """Sets the stock_item of this StockMovement.


        :param stock_item: The stock_item of this StockMovement.  # noqa: E501
        :type: StockItem
        """

        self._stock_item = stock_item

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StockMovement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StockMovement):
            return True

        return self.to_dict() != other.to_dict()
