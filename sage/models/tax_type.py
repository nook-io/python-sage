# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class TaxType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'displayed_as': 'str',
        'path': 'str',
        'federal_tax': 'bool',
        'country': 'Base',
        'address_regions': 'list[Base]',
        'tax_rates': 'list[Base]'
    }

    attribute_map = {
        'id': 'id',
        'displayed_as': 'displayed_as',
        'path': '$path',
        'federal_tax': 'federal_tax',
        'country': 'country',
        'address_regions': 'address_regions',
        'tax_rates': 'tax_rates'
    }

    def __init__(self, id=None, displayed_as=None, path=None, federal_tax=None, country=None, address_regions=None, tax_rates=None, local_vars_configuration=None):  # noqa: E501
        """TaxType - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._displayed_as = None
        self._path = None
        self._federal_tax = None
        self._country = None
        self._address_regions = None
        self._tax_rates = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if displayed_as is not None:
            self.displayed_as = displayed_as
        if path is not None:
            self.path = path
        if federal_tax is not None:
            self.federal_tax = federal_tax
        if country is not None:
            self.country = country
        if address_regions is not None:
            self.address_regions = address_regions
        if tax_rates is not None:
            self.tax_rates = tax_rates

    @property
    def id(self):
        """Gets the id of this TaxType.  # noqa: E501

        The tax type id  # noqa: E501

        :return: The id of this TaxType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaxType.

        The tax type id  # noqa: E501

        :param id: The id of this TaxType.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                id is not None and len(id) > 15):
            raise ValueError("Invalid value for `id`, length must be less than or equal to `15`")  # noqa: E501

        self._id = id

    @property
    def displayed_as(self):
        """Gets the displayed_as of this TaxType.  # noqa: E501

        Display text for the item  # noqa: E501

        :return: The displayed_as of this TaxType.  # noqa: E501
        :rtype: str
        """
        return self._displayed_as

    @displayed_as.setter
    def displayed_as(self, displayed_as):
        """Sets the displayed_as of this TaxType.

        Display text for the item  # noqa: E501

        :param displayed_as: The displayed_as of this TaxType.  # noqa: E501
        :type: str
        """

        self._displayed_as = displayed_as

    @property
    def path(self):
        """Gets the path of this TaxType.  # noqa: E501

        The API path for the resource  # noqa: E501

        :return: The path of this TaxType.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this TaxType.

        The API path for the resource  # noqa: E501

        :param path: The path of this TaxType.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def federal_tax(self):
        """Gets the federal_tax of this TaxType.  # noqa: E501

        Indicates whether this is a federal tax type  # noqa: E501

        :return: The federal_tax of this TaxType.  # noqa: E501
        :rtype: bool
        """
        return self._federal_tax

    @federal_tax.setter
    def federal_tax(self, federal_tax):
        """Sets the federal_tax of this TaxType.

        Indicates whether this is a federal tax type  # noqa: E501

        :param federal_tax: The federal_tax of this TaxType.  # noqa: E501
        :type: bool
        """

        self._federal_tax = federal_tax

    @property
    def country(self):
        """Gets the country of this TaxType.  # noqa: E501


        :return: The country of this TaxType.  # noqa: E501
        :rtype: Base
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this TaxType.


        :param country: The country of this TaxType.  # noqa: E501
        :type: Base
        """

        self._country = country

    @property
    def address_regions(self):
        """Gets the address_regions of this TaxType.  # noqa: E501

        The address regions the tax type relates to  # noqa: E501

        :return: The address_regions of this TaxType.  # noqa: E501
        :rtype: list[Base]
        """
        return self._address_regions

    @address_regions.setter
    def address_regions(self, address_regions):
        """Sets the address_regions of this TaxType.

        The address regions the tax type relates to  # noqa: E501

        :param address_regions: The address_regions of this TaxType.  # noqa: E501
        :type: list[Base]
        """

        self._address_regions = address_regions

    @property
    def tax_rates(self):
        """Gets the tax_rates of this TaxType.  # noqa: E501

        The tax rates related to the tax type  # noqa: E501

        :return: The tax_rates of this TaxType.  # noqa: E501
        :rtype: list[Base]
        """
        return self._tax_rates

    @tax_rates.setter
    def tax_rates(self, tax_rates):
        """Sets the tax_rates of this TaxType.

        The tax rates related to the tax type  # noqa: E501

        :param tax_rates: The tax_rates of this TaxType.  # noqa: E501
        :type: list[Base]
        """

        self._tax_rates = tax_rates

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaxType):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaxType):
            return True

        return self.to_dict() != other.to_dict()
