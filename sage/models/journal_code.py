# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class JournalCode(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'displayed_as': 'str',
        'path': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'name': 'str',
        'code': 'str',
        'journal_code_type': 'JournalCodeType',
        'control_name': 'str',
        'reserved': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'displayed_as': 'displayed_as',
        'path': '$path',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'name': 'name',
        'code': 'code',
        'journal_code_type': 'journal_code_type',
        'control_name': 'control_name',
        'reserved': 'reserved'
    }

    def __init__(self, id=None, displayed_as=None, path=None, created_at=None, updated_at=None, name=None, code=None, journal_code_type=None, control_name=None, reserved=None, local_vars_configuration=None):  # noqa: E501
        """JournalCode - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._displayed_as = None
        self._path = None
        self._created_at = None
        self._updated_at = None
        self._name = None
        self._code = None
        self._journal_code_type = None
        self._control_name = None
        self._reserved = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if displayed_as is not None:
            self.displayed_as = displayed_as
        if path is not None:
            self.path = path
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if name is not None:
            self.name = name
        if code is not None:
            self.code = code
        if journal_code_type is not None:
            self.journal_code_type = journal_code_type
        if control_name is not None:
            self.control_name = control_name
        if reserved is not None:
            self.reserved = reserved

    @property
    def id(self):
        """Gets the id of this JournalCode.  # noqa: E501

        The unique identifier for the item  # noqa: E501

        :return: The id of this JournalCode.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JournalCode.

        The unique identifier for the item  # noqa: E501

        :param id: The id of this JournalCode.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def displayed_as(self):
        """Gets the displayed_as of this JournalCode.  # noqa: E501

        The name of the resource  # noqa: E501

        :return: The displayed_as of this JournalCode.  # noqa: E501
        :rtype: str
        """
        return self._displayed_as

    @displayed_as.setter
    def displayed_as(self, displayed_as):
        """Sets the displayed_as of this JournalCode.

        The name of the resource  # noqa: E501

        :param displayed_as: The displayed_as of this JournalCode.  # noqa: E501
        :type: str
        """

        self._displayed_as = displayed_as

    @property
    def path(self):
        """Gets the path of this JournalCode.  # noqa: E501

        The API path for the resource  # noqa: E501

        :return: The path of this JournalCode.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this JournalCode.

        The API path for the resource  # noqa: E501

        :param path: The path of this JournalCode.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def created_at(self):
        """Gets the created_at of this JournalCode.  # noqa: E501

        The datetime when the item was created  # noqa: E501

        :return: The created_at of this JournalCode.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this JournalCode.

        The datetime when the item was created  # noqa: E501

        :param created_at: The created_at of this JournalCode.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this JournalCode.  # noqa: E501

        The datetime when the item was last updated  # noqa: E501

        :return: The updated_at of this JournalCode.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this JournalCode.

        The datetime when the item was last updated  # noqa: E501

        :param updated_at: The updated_at of this JournalCode.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def name(self):
        """Gets the name of this JournalCode.  # noqa: E501

        The name of the journal code  # noqa: E501

        :return: The name of this JournalCode.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JournalCode.

        The name of the journal code  # noqa: E501

        :param name: The name of this JournalCode.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501

        self._name = name

    @property
    def code(self):
        """Gets the code of this JournalCode.  # noqa: E501

        The code of the journal code  # noqa: E501

        :return: The code of this JournalCode.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this JournalCode.

        The code of the journal code  # noqa: E501

        :param code: The code of this JournalCode.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                code is not None and len(code) > 255):
            raise ValueError("Invalid value for `code`, length must be less than or equal to `255`")  # noqa: E501

        self._code = code

    @property
    def journal_code_type(self):
        """Gets the journal_code_type of this JournalCode.  # noqa: E501


        :return: The journal_code_type of this JournalCode.  # noqa: E501
        :rtype: JournalCodeType
        """
        return self._journal_code_type

    @journal_code_type.setter
    def journal_code_type(self, journal_code_type):
        """Sets the journal_code_type of this JournalCode.


        :param journal_code_type: The journal_code_type of this JournalCode.  # noqa: E501
        :type: JournalCodeType
        """

        self._journal_code_type = journal_code_type

    @property
    def control_name(self):
        """Gets the control_name of this JournalCode.  # noqa: E501

        The control name of the journal code  Control names are identifiers for a journal codes with a specific meaning. Some examples are `AC` for purchases, `VE` for sales, `OD` for other transactions and `REPBAL` for opening balances.   # noqa: E501

        :return: The control_name of this JournalCode.  # noqa: E501
        :rtype: str
        """
        return self._control_name

    @control_name.setter
    def control_name(self, control_name):
        """Sets the control_name of this JournalCode.

        The control name of the journal code  Control names are identifiers for a journal codes with a specific meaning. Some examples are `AC` for purchases, `VE` for sales, `OD` for other transactions and `REPBAL` for opening balances.   # noqa: E501

        :param control_name: The control_name of this JournalCode.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                control_name is not None and len(control_name) > 255):
            raise ValueError("Invalid value for `control_name`, length must be less than or equal to `255`")  # noqa: E501

        self._control_name = control_name

    @property
    def reserved(self):
        """Gets the reserved of this JournalCode.  # noqa: E501

        Indicates whether the journal code is reserved.  Reserved journal codes cannot be deleted. A journal code is reserved when it has a control name. Please note that journal codes can also not be deleted when there is any journal that is using the code.   # noqa: E501

        :return: The reserved of this JournalCode.  # noqa: E501
        :rtype: bool
        """
        return self._reserved

    @reserved.setter
    def reserved(self, reserved):
        """Sets the reserved of this JournalCode.

        Indicates whether the journal code is reserved.  Reserved journal codes cannot be deleted. A journal code is reserved when it has a control name. Please note that journal codes can also not be deleted when there is any journal that is using the code.   # noqa: E501

        :param reserved: The reserved of this JournalCode.  # noqa: E501
        :type: bool
        """

        self._reserved = reserved

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JournalCode):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JournalCode):
            return True

        return self.to_dict() != other.to_dict()
