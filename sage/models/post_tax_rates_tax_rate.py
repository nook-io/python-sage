# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class PostTaxRatesTaxRate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'agency': 'str',
        'is_visible': 'bool',
        'component_tax_rate': 'list[PostTaxRatesTaxRateComponentTaxRate]'
    }

    attribute_map = {
        'name': 'name',
        'agency': 'agency',
        'is_visible': 'is_visible',
        'component_tax_rate': 'component_tax_rate'
    }

    def __init__(self, name=None, agency=None, is_visible=None, component_tax_rate=None, local_vars_configuration=None):  # noqa: E501
        """PostTaxRatesTaxRate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._agency = None
        self._is_visible = None
        self._component_tax_rate = None
        self.discriminator = None

        self.name = name
        if agency is not None:
            self.agency = agency
        if is_visible is not None:
            self.is_visible = is_visible
        if component_tax_rate is not None:
            self.component_tax_rate = component_tax_rate

    @property
    def name(self):
        """Gets the name of this PostTaxRatesTaxRate.  # noqa: E501

        The name of the tax rate  # noqa: E501

        :return: The name of this PostTaxRatesTaxRate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PostTaxRatesTaxRate.

        The name of the tax rate  # noqa: E501

        :param name: The name of this PostTaxRatesTaxRate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def agency(self):
        """Gets the agency of this PostTaxRatesTaxRate.  # noqa: E501

        The agency name (US Only)  # noqa: E501

        :return: The agency of this PostTaxRatesTaxRate.  # noqa: E501
        :rtype: str
        """
        return self._agency

    @agency.setter
    def agency(self, agency):
        """Sets the agency of this PostTaxRatesTaxRate.

        The agency name (US Only)  # noqa: E501

        :param agency: The agency of this PostTaxRatesTaxRate.  # noqa: E501
        :type: str
        """

        self._agency = agency

    @property
    def is_visible(self):
        """Gets the is_visible of this PostTaxRatesTaxRate.  # noqa: E501

        Indicates whether the tax rate is visible in the application  # noqa: E501

        :return: The is_visible of this PostTaxRatesTaxRate.  # noqa: E501
        :rtype: bool
        """
        return self._is_visible

    @is_visible.setter
    def is_visible(self, is_visible):
        """Sets the is_visible of this PostTaxRatesTaxRate.

        Indicates whether the tax rate is visible in the application  # noqa: E501

        :param is_visible: The is_visible of this PostTaxRatesTaxRate.  # noqa: E501
        :type: bool
        """

        self._is_visible = is_visible

    @property
    def component_tax_rate(self):
        """Gets the component_tax_rate of this PostTaxRatesTaxRate.  # noqa: E501


        :return: The component_tax_rate of this PostTaxRatesTaxRate.  # noqa: E501
        :rtype: list[PostTaxRatesTaxRateComponentTaxRate]
        """
        return self._component_tax_rate

    @component_tax_rate.setter
    def component_tax_rate(self, component_tax_rate):
        """Sets the component_tax_rate of this PostTaxRatesTaxRate.


        :param component_tax_rate: The component_tax_rate of this PostTaxRatesTaxRate.  # noqa: E501
        :type: list[PostTaxRatesTaxRateComponentTaxRate]
        """

        self._component_tax_rate = component_tax_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostTaxRatesTaxRate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PostTaxRatesTaxRate):
            return True

        return self.to_dict() != other.to_dict()
