# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class PutOtherPaymentsOtherPaymentPaymentLines(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ledger_account_id': 'str',
        'total_amount': 'float',
        'details': 'str',
        'tax_rate_id': 'str',
        'net_amount': 'float',
        'tax_amount': 'float',
        'is_purchase_for_resale': 'bool',
        'trade_of_asset': 'bool',
        'gst_amount': 'float',
        'pst_amount': 'float',
        'tax_recoverable': 'bool'
    }

    attribute_map = {
        'ledger_account_id': 'ledger_account_id',
        'total_amount': 'total_amount',
        'details': 'details',
        'tax_rate_id': 'tax_rate_id',
        'net_amount': 'net_amount',
        'tax_amount': 'tax_amount',
        'is_purchase_for_resale': 'is_purchase_for_resale',
        'trade_of_asset': 'trade_of_asset',
        'gst_amount': 'gst_amount',
        'pst_amount': 'pst_amount',
        'tax_recoverable': 'tax_recoverable'
    }

    def __init__(self, ledger_account_id=None, total_amount=None, details=None, tax_rate_id=None, net_amount=None, tax_amount=None, is_purchase_for_resale=None, trade_of_asset=None, gst_amount=None, pst_amount=None, tax_recoverable=None, local_vars_configuration=None):  # noqa: E501
        """PutOtherPaymentsOtherPaymentPaymentLines - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ledger_account_id = None
        self._total_amount = None
        self._details = None
        self._tax_rate_id = None
        self._net_amount = None
        self._tax_amount = None
        self._is_purchase_for_resale = None
        self._trade_of_asset = None
        self._gst_amount = None
        self._pst_amount = None
        self._tax_recoverable = None
        self.discriminator = None

        if ledger_account_id is not None:
            self.ledger_account_id = ledger_account_id
        if total_amount is not None:
            self.total_amount = total_amount
        if details is not None:
            self.details = details
        if tax_rate_id is not None:
            self.tax_rate_id = tax_rate_id
        if net_amount is not None:
            self.net_amount = net_amount
        if tax_amount is not None:
            self.tax_amount = tax_amount
        if is_purchase_for_resale is not None:
            self.is_purchase_for_resale = is_purchase_for_resale
        if trade_of_asset is not None:
            self.trade_of_asset = trade_of_asset
        if gst_amount is not None:
            self.gst_amount = gst_amount
        if pst_amount is not None:
            self.pst_amount = pst_amount
        if tax_recoverable is not None:
            self.tax_recoverable = tax_recoverable

    @property
    def ledger_account_id(self):
        """Gets the ledger_account_id of this PutOtherPaymentsOtherPaymentPaymentLines.  # noqa: E501

        The ID of the Ledger Account.  # noqa: E501

        :return: The ledger_account_id of this PutOtherPaymentsOtherPaymentPaymentLines.  # noqa: E501
        :rtype: str
        """
        return self._ledger_account_id

    @ledger_account_id.setter
    def ledger_account_id(self, ledger_account_id):
        """Sets the ledger_account_id of this PutOtherPaymentsOtherPaymentPaymentLines.

        The ID of the Ledger Account.  # noqa: E501

        :param ledger_account_id: The ledger_account_id of this PutOtherPaymentsOtherPaymentPaymentLines.  # noqa: E501
        :type: str
        """

        self._ledger_account_id = ledger_account_id

    @property
    def total_amount(self):
        """Gets the total_amount of this PutOtherPaymentsOtherPaymentPaymentLines.  # noqa: E501

        The total amount of the payment line  # noqa: E501

        :return: The total_amount of this PutOtherPaymentsOtherPaymentPaymentLines.  # noqa: E501
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this PutOtherPaymentsOtherPaymentPaymentLines.

        The total amount of the payment line  # noqa: E501

        :param total_amount: The total_amount of this PutOtherPaymentsOtherPaymentPaymentLines.  # noqa: E501
        :type: float
        """

        self._total_amount = total_amount

    @property
    def details(self):
        """Gets the details of this PutOtherPaymentsOtherPaymentPaymentLines.  # noqa: E501

        The details of the payment line  # noqa: E501

        :return: The details of this PutOtherPaymentsOtherPaymentPaymentLines.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this PutOtherPaymentsOtherPaymentPaymentLines.

        The details of the payment line  # noqa: E501

        :param details: The details of this PutOtherPaymentsOtherPaymentPaymentLines.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def tax_rate_id(self):
        """Gets the tax_rate_id of this PutOtherPaymentsOtherPaymentPaymentLines.  # noqa: E501

        The ID of the Tax Rate.  # noqa: E501

        :return: The tax_rate_id of this PutOtherPaymentsOtherPaymentPaymentLines.  # noqa: E501
        :rtype: str
        """
        return self._tax_rate_id

    @tax_rate_id.setter
    def tax_rate_id(self, tax_rate_id):
        """Sets the tax_rate_id of this PutOtherPaymentsOtherPaymentPaymentLines.

        The ID of the Tax Rate.  # noqa: E501

        :param tax_rate_id: The tax_rate_id of this PutOtherPaymentsOtherPaymentPaymentLines.  # noqa: E501
        :type: str
        """

        self._tax_rate_id = tax_rate_id

    @property
    def net_amount(self):
        """Gets the net_amount of this PutOtherPaymentsOtherPaymentPaymentLines.  # noqa: E501

        The net amount of the payment line  # noqa: E501

        :return: The net_amount of this PutOtherPaymentsOtherPaymentPaymentLines.  # noqa: E501
        :rtype: float
        """
        return self._net_amount

    @net_amount.setter
    def net_amount(self, net_amount):
        """Sets the net_amount of this PutOtherPaymentsOtherPaymentPaymentLines.

        The net amount of the payment line  # noqa: E501

        :param net_amount: The net_amount of this PutOtherPaymentsOtherPaymentPaymentLines.  # noqa: E501
        :type: float
        """

        self._net_amount = net_amount

    @property
    def tax_amount(self):
        """Gets the tax_amount of this PutOtherPaymentsOtherPaymentPaymentLines.  # noqa: E501

        The tax amount of the payment line  # noqa: E501

        :return: The tax_amount of this PutOtherPaymentsOtherPaymentPaymentLines.  # noqa: E501
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this PutOtherPaymentsOtherPaymentPaymentLines.

        The tax amount of the payment line  # noqa: E501

        :param tax_amount: The tax_amount of this PutOtherPaymentsOtherPaymentPaymentLines.  # noqa: E501
        :type: float
        """

        self._tax_amount = tax_amount

    @property
    def is_purchase_for_resale(self):
        """Gets the is_purchase_for_resale of this PutOtherPaymentsOtherPaymentPaymentLines.  # noqa: E501

        Identifies whether the line item is for resale. (Ireland only)  # noqa: E501

        :return: The is_purchase_for_resale of this PutOtherPaymentsOtherPaymentPaymentLines.  # noqa: E501
        :rtype: bool
        """
        return self._is_purchase_for_resale

    @is_purchase_for_resale.setter
    def is_purchase_for_resale(self, is_purchase_for_resale):
        """Sets the is_purchase_for_resale of this PutOtherPaymentsOtherPaymentPaymentLines.

        Identifies whether the line item is for resale. (Ireland only)  # noqa: E501

        :param is_purchase_for_resale: The is_purchase_for_resale of this PutOtherPaymentsOtherPaymentPaymentLines.  # noqa: E501
        :type: bool
        """

        self._is_purchase_for_resale = is_purchase_for_resale

    @property
    def trade_of_asset(self):
        """Gets the trade_of_asset of this PutOtherPaymentsOtherPaymentPaymentLines.  # noqa: E501

        Whether the line item is marked as trade of asset.  # noqa: E501

        :return: The trade_of_asset of this PutOtherPaymentsOtherPaymentPaymentLines.  # noqa: E501
        :rtype: bool
        """
        return self._trade_of_asset

    @trade_of_asset.setter
    def trade_of_asset(self, trade_of_asset):
        """Sets the trade_of_asset of this PutOtherPaymentsOtherPaymentPaymentLines.

        Whether the line item is marked as trade of asset.  # noqa: E501

        :param trade_of_asset: The trade_of_asset of this PutOtherPaymentsOtherPaymentPaymentLines.  # noqa: E501
        :type: bool
        """

        self._trade_of_asset = trade_of_asset

    @property
    def gst_amount(self):
        """Gets the gst_amount of this PutOtherPaymentsOtherPaymentPaymentLines.  # noqa: E501

        The gst or hst tax amount for the other payment  # noqa: E501

        :return: The gst_amount of this PutOtherPaymentsOtherPaymentPaymentLines.  # noqa: E501
        :rtype: float
        """
        return self._gst_amount

    @gst_amount.setter
    def gst_amount(self, gst_amount):
        """Sets the gst_amount of this PutOtherPaymentsOtherPaymentPaymentLines.

        The gst or hst tax amount for the other payment  # noqa: E501

        :param gst_amount: The gst_amount of this PutOtherPaymentsOtherPaymentPaymentLines.  # noqa: E501
        :type: float
        """

        self._gst_amount = gst_amount

    @property
    def pst_amount(self):
        """Gets the pst_amount of this PutOtherPaymentsOtherPaymentPaymentLines.  # noqa: E501

        The pst or qst tax amount for the other payment  # noqa: E501

        :return: The pst_amount of this PutOtherPaymentsOtherPaymentPaymentLines.  # noqa: E501
        :rtype: float
        """
        return self._pst_amount

    @pst_amount.setter
    def pst_amount(self, pst_amount):
        """Sets the pst_amount of this PutOtherPaymentsOtherPaymentPaymentLines.

        The pst or qst tax amount for the other payment  # noqa: E501

        :param pst_amount: The pst_amount of this PutOtherPaymentsOtherPaymentPaymentLines.  # noqa: E501
        :type: float
        """

        self._pst_amount = pst_amount

    @property
    def tax_recoverable(self):
        """Gets the tax_recoverable of this PutOtherPaymentsOtherPaymentPaymentLines.  # noqa: E501

        Indicates if the other payment is tax recoverable or not  # noqa: E501

        :return: The tax_recoverable of this PutOtherPaymentsOtherPaymentPaymentLines.  # noqa: E501
        :rtype: bool
        """
        return self._tax_recoverable

    @tax_recoverable.setter
    def tax_recoverable(self, tax_recoverable):
        """Sets the tax_recoverable of this PutOtherPaymentsOtherPaymentPaymentLines.

        Indicates if the other payment is tax recoverable or not  # noqa: E501

        :param tax_recoverable: The tax_recoverable of this PutOtherPaymentsOtherPaymentPaymentLines.  # noqa: E501
        :type: bool
        """

        self._tax_recoverable = tax_recoverable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PutOtherPaymentsOtherPaymentPaymentLines):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PutOtherPaymentsOtherPaymentPaymentLines):
            return True

        return self.to_dict() != other.to_dict()
