# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class StockItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'displayed_as': 'str',
        'path': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'deleted_at': 'datetime',
        'deletable': 'bool',
        'deactivatable': 'bool',
        'used_on_recurring_invoice': 'bool',
        'item_code': 'str',
        'description': 'str',
        'notes': 'str',
        'sales_ledger_account': 'Base',
        'sales_tax_rate': 'Base',
        'purchase_ledger_account': 'Base',
        'usual_supplier': 'Contact',
        'purchase_tax_rate': 'Base',
        'cost_price': 'float',
        'sales_prices': 'list[SalesPrice]',
        'source_guid': 'str',
        'purchase_description': 'str',
        'reorder_level': 'float',
        'reorder_quantity': 'float',
        'location': 'str',
        'barcode': 'str',
        'supplier_part_number': 'str',
        'weight': 'float',
        'measurement_unit': 'str',
        'weight_converted': 'float',
        'active': 'bool',
        'quantity_in_stock': 'float',
        'last_cost_price': 'float',
        'last_cost_price_stock_value': 'float',
        'average_cost_price': 'float',
        'average_cost_price_stock_value': 'float',
        'cost_price_last_updated': 'date'
    }

    attribute_map = {
        'id': 'id',
        'displayed_as': 'displayed_as',
        'path': '$path',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'deleted_at': 'deleted_at',
        'deletable': 'deletable',
        'deactivatable': 'deactivatable',
        'used_on_recurring_invoice': 'used_on_recurring_invoice',
        'item_code': 'item_code',
        'description': 'description',
        'notes': 'notes',
        'sales_ledger_account': 'sales_ledger_account',
        'sales_tax_rate': 'sales_tax_rate',
        'purchase_ledger_account': 'purchase_ledger_account',
        'usual_supplier': 'usual_supplier',
        'purchase_tax_rate': 'purchase_tax_rate',
        'cost_price': 'cost_price',
        'sales_prices': 'sales_prices',
        'source_guid': 'source_guid',
        'purchase_description': 'purchase_description',
        'reorder_level': 'reorder_level',
        'reorder_quantity': 'reorder_quantity',
        'location': 'location',
        'barcode': 'barcode',
        'supplier_part_number': 'supplier_part_number',
        'weight': 'weight',
        'measurement_unit': 'measurement_unit',
        'weight_converted': 'weight_converted',
        'active': 'active',
        'quantity_in_stock': 'quantity_in_stock',
        'last_cost_price': 'last_cost_price',
        'last_cost_price_stock_value': 'last_cost_price_stock_value',
        'average_cost_price': 'average_cost_price',
        'average_cost_price_stock_value': 'average_cost_price_stock_value',
        'cost_price_last_updated': 'cost_price_last_updated'
    }

    def __init__(self, id=None, displayed_as=None, path=None, created_at=None, updated_at=None, deleted_at=None, deletable=None, deactivatable=None, used_on_recurring_invoice=None, item_code=None, description=None, notes=None, sales_ledger_account=None, sales_tax_rate=None, purchase_ledger_account=None, usual_supplier=None, purchase_tax_rate=None, cost_price=None, sales_prices=None, source_guid=None, purchase_description=None, reorder_level=None, reorder_quantity=None, location=None, barcode=None, supplier_part_number=None, weight=None, measurement_unit=None, weight_converted=None, active=None, quantity_in_stock=None, last_cost_price=None, last_cost_price_stock_value=None, average_cost_price=None, average_cost_price_stock_value=None, cost_price_last_updated=None, local_vars_configuration=None):  # noqa: E501
        """StockItem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._displayed_as = None
        self._path = None
        self._created_at = None
        self._updated_at = None
        self._deleted_at = None
        self._deletable = None
        self._deactivatable = None
        self._used_on_recurring_invoice = None
        self._item_code = None
        self._description = None
        self._notes = None
        self._sales_ledger_account = None
        self._sales_tax_rate = None
        self._purchase_ledger_account = None
        self._usual_supplier = None
        self._purchase_tax_rate = None
        self._cost_price = None
        self._sales_prices = None
        self._source_guid = None
        self._purchase_description = None
        self._reorder_level = None
        self._reorder_quantity = None
        self._location = None
        self._barcode = None
        self._supplier_part_number = None
        self._weight = None
        self._measurement_unit = None
        self._weight_converted = None
        self._active = None
        self._quantity_in_stock = None
        self._last_cost_price = None
        self._last_cost_price_stock_value = None
        self._average_cost_price = None
        self._average_cost_price_stock_value = None
        self._cost_price_last_updated = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if displayed_as is not None:
            self.displayed_as = displayed_as
        if path is not None:
            self.path = path
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if deleted_at is not None:
            self.deleted_at = deleted_at
        if deletable is not None:
            self.deletable = deletable
        if deactivatable is not None:
            self.deactivatable = deactivatable
        if used_on_recurring_invoice is not None:
            self.used_on_recurring_invoice = used_on_recurring_invoice
        if item_code is not None:
            self.item_code = item_code
        if description is not None:
            self.description = description
        if notes is not None:
            self.notes = notes
        if sales_ledger_account is not None:
            self.sales_ledger_account = sales_ledger_account
        if sales_tax_rate is not None:
            self.sales_tax_rate = sales_tax_rate
        if purchase_ledger_account is not None:
            self.purchase_ledger_account = purchase_ledger_account
        if usual_supplier is not None:
            self.usual_supplier = usual_supplier
        if purchase_tax_rate is not None:
            self.purchase_tax_rate = purchase_tax_rate
        if cost_price is not None:
            self.cost_price = cost_price
        if sales_prices is not None:
            self.sales_prices = sales_prices
        if source_guid is not None:
            self.source_guid = source_guid
        if purchase_description is not None:
            self.purchase_description = purchase_description
        if reorder_level is not None:
            self.reorder_level = reorder_level
        if reorder_quantity is not None:
            self.reorder_quantity = reorder_quantity
        if location is not None:
            self.location = location
        if barcode is not None:
            self.barcode = barcode
        if supplier_part_number is not None:
            self.supplier_part_number = supplier_part_number
        if weight is not None:
            self.weight = weight
        if measurement_unit is not None:
            self.measurement_unit = measurement_unit
        if weight_converted is not None:
            self.weight_converted = weight_converted
        if active is not None:
            self.active = active
        if quantity_in_stock is not None:
            self.quantity_in_stock = quantity_in_stock
        if last_cost_price is not None:
            self.last_cost_price = last_cost_price
        if last_cost_price_stock_value is not None:
            self.last_cost_price_stock_value = last_cost_price_stock_value
        if average_cost_price is not None:
            self.average_cost_price = average_cost_price
        if average_cost_price_stock_value is not None:
            self.average_cost_price_stock_value = average_cost_price_stock_value
        if cost_price_last_updated is not None:
            self.cost_price_last_updated = cost_price_last_updated

    @property
    def id(self):
        """Gets the id of this StockItem.  # noqa: E501

        The unique identifier for the item  # noqa: E501

        :return: The id of this StockItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StockItem.

        The unique identifier for the item  # noqa: E501

        :param id: The id of this StockItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def displayed_as(self):
        """Gets the displayed_as of this StockItem.  # noqa: E501

        The name of the resource  # noqa: E501

        :return: The displayed_as of this StockItem.  # noqa: E501
        :rtype: str
        """
        return self._displayed_as

    @displayed_as.setter
    def displayed_as(self, displayed_as):
        """Sets the displayed_as of this StockItem.

        The name of the resource  # noqa: E501

        :param displayed_as: The displayed_as of this StockItem.  # noqa: E501
        :type: str
        """

        self._displayed_as = displayed_as

    @property
    def path(self):
        """Gets the path of this StockItem.  # noqa: E501

        The API path for the resource  # noqa: E501

        :return: The path of this StockItem.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this StockItem.

        The API path for the resource  # noqa: E501

        :param path: The path of this StockItem.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def created_at(self):
        """Gets the created_at of this StockItem.  # noqa: E501

        The datetime when the item was created  # noqa: E501

        :return: The created_at of this StockItem.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this StockItem.

        The datetime when the item was created  # noqa: E501

        :param created_at: The created_at of this StockItem.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this StockItem.  # noqa: E501

        The datetime when the item was last updated  # noqa: E501

        :return: The updated_at of this StockItem.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this StockItem.

        The datetime when the item was last updated  # noqa: E501

        :param updated_at: The updated_at of this StockItem.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def deleted_at(self):
        """Gets the deleted_at of this StockItem.  # noqa: E501

        The datetime when the item was deleted  # noqa: E501

        :return: The deleted_at of this StockItem.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this StockItem.

        The datetime when the item was deleted  # noqa: E501

        :param deleted_at: The deleted_at of this StockItem.  # noqa: E501
        :type: datetime
        """

        self._deleted_at = deleted_at

    @property
    def deletable(self):
        """Gets the deletable of this StockItem.  # noqa: E501

        Indicates whether the stock item can be deleted  # noqa: E501

        :return: The deletable of this StockItem.  # noqa: E501
        :rtype: bool
        """
        return self._deletable

    @deletable.setter
    def deletable(self, deletable):
        """Sets the deletable of this StockItem.

        Indicates whether the stock item can be deleted  # noqa: E501

        :param deletable: The deletable of this StockItem.  # noqa: E501
        :type: bool
        """

        self._deletable = deletable

    @property
    def deactivatable(self):
        """Gets the deactivatable of this StockItem.  # noqa: E501

        Indicates whether the stock item can be deactivated  # noqa: E501

        :return: The deactivatable of this StockItem.  # noqa: E501
        :rtype: bool
        """
        return self._deactivatable

    @deactivatable.setter
    def deactivatable(self, deactivatable):
        """Sets the deactivatable of this StockItem.

        Indicates whether the stock item can be deactivated  # noqa: E501

        :param deactivatable: The deactivatable of this StockItem.  # noqa: E501
        :type: bool
        """

        self._deactivatable = deactivatable

    @property
    def used_on_recurring_invoice(self):
        """Gets the used_on_recurring_invoice of this StockItem.  # noqa: E501

        Indicates whether the stock item has been used on a recurring invoice  # noqa: E501

        :return: The used_on_recurring_invoice of this StockItem.  # noqa: E501
        :rtype: bool
        """
        return self._used_on_recurring_invoice

    @used_on_recurring_invoice.setter
    def used_on_recurring_invoice(self, used_on_recurring_invoice):
        """Sets the used_on_recurring_invoice of this StockItem.

        Indicates whether the stock item has been used on a recurring invoice  # noqa: E501

        :param used_on_recurring_invoice: The used_on_recurring_invoice of this StockItem.  # noqa: E501
        :type: bool
        """

        self._used_on_recurring_invoice = used_on_recurring_invoice

    @property
    def item_code(self):
        """Gets the item_code of this StockItem.  # noqa: E501

        The item code for the stock item  # noqa: E501

        :return: The item_code of this StockItem.  # noqa: E501
        :rtype: str
        """
        return self._item_code

    @item_code.setter
    def item_code(self, item_code):
        """Sets the item_code of this StockItem.

        The item code for the stock item  # noqa: E501

        :param item_code: The item_code of this StockItem.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                item_code is not None and len(item_code) > 30):
            raise ValueError("Invalid value for `item_code`, length must be less than or equal to `30`")  # noqa: E501

        self._item_code = item_code

    @property
    def description(self):
        """Gets the description of this StockItem.  # noqa: E501

        The stock item description  # noqa: E501

        :return: The description of this StockItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StockItem.

        The stock item description  # noqa: E501

        :param description: The description of this StockItem.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) > 255):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")  # noqa: E501

        self._description = description

    @property
    def notes(self):
        """Gets the notes of this StockItem.  # noqa: E501

        The notes for the stock item  # noqa: E501

        :return: The notes of this StockItem.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this StockItem.

        The notes for the stock item  # noqa: E501

        :param notes: The notes of this StockItem.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                notes is not None and len(notes) > 500):
            raise ValueError("Invalid value for `notes`, length must be less than or equal to `500`")  # noqa: E501

        self._notes = notes

    @property
    def sales_ledger_account(self):
        """Gets the sales_ledger_account of this StockItem.  # noqa: E501


        :return: The sales_ledger_account of this StockItem.  # noqa: E501
        :rtype: Base
        """
        return self._sales_ledger_account

    @sales_ledger_account.setter
    def sales_ledger_account(self, sales_ledger_account):
        """Sets the sales_ledger_account of this StockItem.


        :param sales_ledger_account: The sales_ledger_account of this StockItem.  # noqa: E501
        :type: Base
        """

        self._sales_ledger_account = sales_ledger_account

    @property
    def sales_tax_rate(self):
        """Gets the sales_tax_rate of this StockItem.  # noqa: E501


        :return: The sales_tax_rate of this StockItem.  # noqa: E501
        :rtype: Base
        """
        return self._sales_tax_rate

    @sales_tax_rate.setter
    def sales_tax_rate(self, sales_tax_rate):
        """Sets the sales_tax_rate of this StockItem.


        :param sales_tax_rate: The sales_tax_rate of this StockItem.  # noqa: E501
        :type: Base
        """

        self._sales_tax_rate = sales_tax_rate

    @property
    def purchase_ledger_account(self):
        """Gets the purchase_ledger_account of this StockItem.  # noqa: E501


        :return: The purchase_ledger_account of this StockItem.  # noqa: E501
        :rtype: Base
        """
        return self._purchase_ledger_account

    @purchase_ledger_account.setter
    def purchase_ledger_account(self, purchase_ledger_account):
        """Sets the purchase_ledger_account of this StockItem.


        :param purchase_ledger_account: The purchase_ledger_account of this StockItem.  # noqa: E501
        :type: Base
        """

        self._purchase_ledger_account = purchase_ledger_account

    @property
    def usual_supplier(self):
        """Gets the usual_supplier of this StockItem.  # noqa: E501


        :return: The usual_supplier of this StockItem.  # noqa: E501
        :rtype: Contact
        """
        return self._usual_supplier

    @usual_supplier.setter
    def usual_supplier(self, usual_supplier):
        """Sets the usual_supplier of this StockItem.


        :param usual_supplier: The usual_supplier of this StockItem.  # noqa: E501
        :type: Contact
        """

        self._usual_supplier = usual_supplier

    @property
    def purchase_tax_rate(self):
        """Gets the purchase_tax_rate of this StockItem.  # noqa: E501


        :return: The purchase_tax_rate of this StockItem.  # noqa: E501
        :rtype: Base
        """
        return self._purchase_tax_rate

    @purchase_tax_rate.setter
    def purchase_tax_rate(self, purchase_tax_rate):
        """Sets the purchase_tax_rate of this StockItem.


        :param purchase_tax_rate: The purchase_tax_rate of this StockItem.  # noqa: E501
        :type: Base
        """

        self._purchase_tax_rate = purchase_tax_rate

    @property
    def cost_price(self):
        """Gets the cost_price of this StockItem.  # noqa: E501

        The cost price of the stock item  # noqa: E501

        :return: The cost_price of this StockItem.  # noqa: E501
        :rtype: float
        """
        return self._cost_price

    @cost_price.setter
    def cost_price(self, cost_price):
        """Sets the cost_price of this StockItem.

        The cost price of the stock item  # noqa: E501

        :param cost_price: The cost_price of this StockItem.  # noqa: E501
        :type: float
        """

        self._cost_price = cost_price

    @property
    def sales_prices(self):
        """Gets the sales_prices of this StockItem.  # noqa: E501

        The sales prices for the stock item  # noqa: E501

        :return: The sales_prices of this StockItem.  # noqa: E501
        :rtype: list[SalesPrice]
        """
        return self._sales_prices

    @sales_prices.setter
    def sales_prices(self, sales_prices):
        """Sets the sales_prices of this StockItem.

        The sales prices for the stock item  # noqa: E501

        :param sales_prices: The sales_prices of this StockItem.  # noqa: E501
        :type: list[SalesPrice]
        """

        self._sales_prices = sales_prices

    @property
    def source_guid(self):
        """Gets the source_guid of this StockItem.  # noqa: E501

        Used when importing stock items from external sources  # noqa: E501

        :return: The source_guid of this StockItem.  # noqa: E501
        :rtype: str
        """
        return self._source_guid

    @source_guid.setter
    def source_guid(self, source_guid):
        """Sets the source_guid of this StockItem.

        Used when importing stock items from external sources  # noqa: E501

        :param source_guid: The source_guid of this StockItem.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                source_guid is not None and len(source_guid) > 255):
            raise ValueError("Invalid value for `source_guid`, length must be less than or equal to `255`")  # noqa: E501

        self._source_guid = source_guid

    @property
    def purchase_description(self):
        """Gets the purchase_description of this StockItem.  # noqa: E501

        The stock item purchase description  # noqa: E501

        :return: The purchase_description of this StockItem.  # noqa: E501
        :rtype: str
        """
        return self._purchase_description

    @purchase_description.setter
    def purchase_description(self, purchase_description):
        """Sets the purchase_description of this StockItem.

        The stock item purchase description  # noqa: E501

        :param purchase_description: The purchase_description of this StockItem.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                purchase_description is not None and len(purchase_description) > 250):
            raise ValueError("Invalid value for `purchase_description`, length must be less than or equal to `250`")  # noqa: E501

        self._purchase_description = purchase_description

    @property
    def reorder_level(self):
        """Gets the reorder_level of this StockItem.  # noqa: E501

        The reorder level for the stock item  # noqa: E501

        :return: The reorder_level of this StockItem.  # noqa: E501
        :rtype: float
        """
        return self._reorder_level

    @reorder_level.setter
    def reorder_level(self, reorder_level):
        """Sets the reorder_level of this StockItem.

        The reorder level for the stock item  # noqa: E501

        :param reorder_level: The reorder_level of this StockItem.  # noqa: E501
        :type: float
        """

        self._reorder_level = reorder_level

    @property
    def reorder_quantity(self):
        """Gets the reorder_quantity of this StockItem.  # noqa: E501

        The reorder quantity for the stock item  # noqa: E501

        :return: The reorder_quantity of this StockItem.  # noqa: E501
        :rtype: float
        """
        return self._reorder_quantity

    @reorder_quantity.setter
    def reorder_quantity(self, reorder_quantity):
        """Sets the reorder_quantity of this StockItem.

        The reorder quantity for the stock item  # noqa: E501

        :param reorder_quantity: The reorder_quantity of this StockItem.  # noqa: E501
        :type: float
        """

        self._reorder_quantity = reorder_quantity

    @property
    def location(self):
        """Gets the location of this StockItem.  # noqa: E501

        The location for the stock item  # noqa: E501

        :return: The location of this StockItem.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this StockItem.

        The location for the stock item  # noqa: E501

        :param location: The location of this StockItem.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def barcode(self):
        """Gets the barcode of this StockItem.  # noqa: E501

        The barcode for the stock item  # noqa: E501

        :return: The barcode of this StockItem.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this StockItem.

        The barcode for the stock item  # noqa: E501

        :param barcode: The barcode of this StockItem.  # noqa: E501
        :type: str
        """

        self._barcode = barcode

    @property
    def supplier_part_number(self):
        """Gets the supplier_part_number of this StockItem.  # noqa: E501

        The supplier part number for stock item  # noqa: E501

        :return: The supplier_part_number of this StockItem.  # noqa: E501
        :rtype: str
        """
        return self._supplier_part_number

    @supplier_part_number.setter
    def supplier_part_number(self, supplier_part_number):
        """Sets the supplier_part_number of this StockItem.

        The supplier part number for stock item  # noqa: E501

        :param supplier_part_number: The supplier_part_number of this StockItem.  # noqa: E501
        :type: str
        """

        self._supplier_part_number = supplier_part_number

    @property
    def weight(self):
        """Gets the weight of this StockItem.  # noqa: E501

        The weight of stock item  # noqa: E501

        :return: The weight of this StockItem.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this StockItem.

        The weight of stock item  # noqa: E501

        :param weight: The weight of this StockItem.  # noqa: E501
        :type: float
        """

        self._weight = weight

    @property
    def measurement_unit(self):
        """Gets the measurement_unit of this StockItem.  # noqa: E501

        The unit of measure of weight for stock item  # noqa: E501

        :return: The measurement_unit of this StockItem.  # noqa: E501
        :rtype: str
        """
        return self._measurement_unit

    @measurement_unit.setter
    def measurement_unit(self, measurement_unit):
        """Sets the measurement_unit of this StockItem.

        The unit of measure of weight for stock item  # noqa: E501

        :param measurement_unit: The measurement_unit of this StockItem.  # noqa: E501
        :type: str
        """

        self._measurement_unit = measurement_unit

    @property
    def weight_converted(self):
        """Gets the weight_converted of this StockItem.  # noqa: E501

        The weight of stock item converted to the lowest unit of measurement  # noqa: E501

        :return: The weight_converted of this StockItem.  # noqa: E501
        :rtype: float
        """
        return self._weight_converted

    @weight_converted.setter
    def weight_converted(self, weight_converted):
        """Sets the weight_converted of this StockItem.

        The weight of stock item converted to the lowest unit of measurement  # noqa: E501

        :param weight_converted: The weight_converted of this StockItem.  # noqa: E501
        :type: float
        """

        self._weight_converted = weight_converted

    @property
    def active(self):
        """Gets the active of this StockItem.  # noqa: E501

        Indicates whether the stock item is active  # noqa: E501

        :return: The active of this StockItem.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this StockItem.

        Indicates whether the stock item is active  # noqa: E501

        :param active: The active of this StockItem.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def quantity_in_stock(self):
        """Gets the quantity_in_stock of this StockItem.  # noqa: E501

        The current quantity of the stock item held by the business  # noqa: E501

        :return: The quantity_in_stock of this StockItem.  # noqa: E501
        :rtype: float
        """
        return self._quantity_in_stock

    @quantity_in_stock.setter
    def quantity_in_stock(self, quantity_in_stock):
        """Sets the quantity_in_stock of this StockItem.

        The current quantity of the stock item held by the business  # noqa: E501

        :param quantity_in_stock: The quantity_in_stock of this StockItem.  # noqa: E501
        :type: float
        """

        self._quantity_in_stock = quantity_in_stock

    @property
    def last_cost_price(self):
        """Gets the last_cost_price of this StockItem.  # noqa: E501

        The most recent 'purchase invoice' or 'adjustment in' price  # noqa: E501

        :return: The last_cost_price of this StockItem.  # noqa: E501
        :rtype: float
        """
        return self._last_cost_price

    @last_cost_price.setter
    def last_cost_price(self, last_cost_price):
        """Sets the last_cost_price of this StockItem.

        The most recent 'purchase invoice' or 'adjustment in' price  # noqa: E501

        :param last_cost_price: The last_cost_price of this StockItem.  # noqa: E501
        :type: float
        """

        self._last_cost_price = last_cost_price

    @property
    def last_cost_price_stock_value(self):
        """Gets the last_cost_price_stock_value of this StockItem.  # noqa: E501

        The value of the current stock in terms of the last cost price  # noqa: E501

        :return: The last_cost_price_stock_value of this StockItem.  # noqa: E501
        :rtype: float
        """
        return self._last_cost_price_stock_value

    @last_cost_price_stock_value.setter
    def last_cost_price_stock_value(self, last_cost_price_stock_value):
        """Sets the last_cost_price_stock_value of this StockItem.

        The value of the current stock in terms of the last cost price  # noqa: E501

        :param last_cost_price_stock_value: The last_cost_price_stock_value of this StockItem.  # noqa: E501
        :type: float
        """

        self._last_cost_price_stock_value = last_cost_price_stock_value

    @property
    def average_cost_price(self):
        """Gets the average_cost_price of this StockItem.  # noqa: E501

        The average price across all purchases of this stock item  # noqa: E501

        :return: The average_cost_price of this StockItem.  # noqa: E501
        :rtype: float
        """
        return self._average_cost_price

    @average_cost_price.setter
    def average_cost_price(self, average_cost_price):
        """Sets the average_cost_price of this StockItem.

        The average price across all purchases of this stock item  # noqa: E501

        :param average_cost_price: The average_cost_price of this StockItem.  # noqa: E501
        :type: float
        """

        self._average_cost_price = average_cost_price

    @property
    def average_cost_price_stock_value(self):
        """Gets the average_cost_price_stock_value of this StockItem.  # noqa: E501

        The value of the current stock in terms of the average cost price  # noqa: E501

        :return: The average_cost_price_stock_value of this StockItem.  # noqa: E501
        :rtype: float
        """
        return self._average_cost_price_stock_value

    @average_cost_price_stock_value.setter
    def average_cost_price_stock_value(self, average_cost_price_stock_value):
        """Sets the average_cost_price_stock_value of this StockItem.

        The value of the current stock in terms of the average cost price  # noqa: E501

        :param average_cost_price_stock_value: The average_cost_price_stock_value of this StockItem.  # noqa: E501
        :type: float
        """

        self._average_cost_price_stock_value = average_cost_price_stock_value

    @property
    def cost_price_last_updated(self):
        """Gets the cost_price_last_updated of this StockItem.  # noqa: E501

        The date on which the last cost price was last updated  # noqa: E501

        :return: The cost_price_last_updated of this StockItem.  # noqa: E501
        :rtype: date
        """
        return self._cost_price_last_updated

    @cost_price_last_updated.setter
    def cost_price_last_updated(self, cost_price_last_updated):
        """Sets the cost_price_last_updated of this StockItem.

        The date on which the last cost price was last updated  # noqa: E501

        :param cost_price_last_updated: The cost_price_last_updated of this StockItem.  # noqa: E501
        :type: date
        """

        self._cost_price_last_updated = cost_price_last_updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StockItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StockItem):
            return True

        return self.to_dict() != other.to_dict()
