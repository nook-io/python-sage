# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class ContactTaxTreatment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'home_tax': 'bool',
        'eu_tax_registered': 'bool',
        'eu_not_tax_registered': 'bool',
        'rest_of_world_tax': 'bool',
        'is_importer': 'bool'
    }

    attribute_map = {
        'home_tax': 'home_tax',
        'eu_tax_registered': 'eu_tax_registered',
        'eu_not_tax_registered': 'eu_not_tax_registered',
        'rest_of_world_tax': 'rest_of_world_tax',
        'is_importer': 'is_importer'
    }

    def __init__(self, home_tax=None, eu_tax_registered=None, eu_not_tax_registered=None, rest_of_world_tax=None, is_importer=None, local_vars_configuration=None):  # noqa: E501
        """ContactTaxTreatment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._home_tax = None
        self._eu_tax_registered = None
        self._eu_not_tax_registered = None
        self._rest_of_world_tax = None
        self._is_importer = None
        self.discriminator = None

        if home_tax is not None:
            self.home_tax = home_tax
        if eu_tax_registered is not None:
            self.eu_tax_registered = eu_tax_registered
        if eu_not_tax_registered is not None:
            self.eu_not_tax_registered = eu_not_tax_registered
        if rest_of_world_tax is not None:
            self.rest_of_world_tax = rest_of_world_tax
        if is_importer is not None:
            self.is_importer = is_importer

    @property
    def home_tax(self):
        """Gets the home_tax of this ContactTaxTreatment.  # noqa: E501

        Indicates a contact where home country tax rules should be applied  # noqa: E501

        :return: The home_tax of this ContactTaxTreatment.  # noqa: E501
        :rtype: bool
        """
        return self._home_tax

    @home_tax.setter
    def home_tax(self, home_tax):
        """Sets the home_tax of this ContactTaxTreatment.

        Indicates a contact where home country tax rules should be applied  # noqa: E501

        :param home_tax: The home_tax of this ContactTaxTreatment.  # noqa: E501
        :type: bool
        """

        self._home_tax = home_tax

    @property
    def eu_tax_registered(self):
        """Gets the eu_tax_registered of this ContactTaxTreatment.  # noqa: E501

        Indicates a contact where EC tax rules should be applied  # noqa: E501

        :return: The eu_tax_registered of this ContactTaxTreatment.  # noqa: E501
        :rtype: bool
        """
        return self._eu_tax_registered

    @eu_tax_registered.setter
    def eu_tax_registered(self, eu_tax_registered):
        """Sets the eu_tax_registered of this ContactTaxTreatment.

        Indicates a contact where EC tax rules should be applied  # noqa: E501

        :param eu_tax_registered: The eu_tax_registered of this ContactTaxTreatment.  # noqa: E501
        :type: bool
        """

        self._eu_tax_registered = eu_tax_registered

    @property
    def eu_not_tax_registered(self):
        """Gets the eu_not_tax_registered of this ContactTaxTreatment.  # noqa: E501

        Indicates an EU contact without a tax number - home tax rules should be applied  # noqa: E501

        :return: The eu_not_tax_registered of this ContactTaxTreatment.  # noqa: E501
        :rtype: bool
        """
        return self._eu_not_tax_registered

    @eu_not_tax_registered.setter
    def eu_not_tax_registered(self, eu_not_tax_registered):
        """Sets the eu_not_tax_registered of this ContactTaxTreatment.

        Indicates an EU contact without a tax number - home tax rules should be applied  # noqa: E501

        :param eu_not_tax_registered: The eu_not_tax_registered of this ContactTaxTreatment.  # noqa: E501
        :type: bool
        """

        self._eu_not_tax_registered = eu_not_tax_registered

    @property
    def rest_of_world_tax(self):
        """Gets the rest_of_world_tax of this ContactTaxTreatment.  # noqa: E501

        Indicates a contact where rest of world tax rules should be applied  # noqa: E501

        :return: The rest_of_world_tax of this ContactTaxTreatment.  # noqa: E501
        :rtype: bool
        """
        return self._rest_of_world_tax

    @rest_of_world_tax.setter
    def rest_of_world_tax(self, rest_of_world_tax):
        """Sets the rest_of_world_tax of this ContactTaxTreatment.

        Indicates a contact where rest of world tax rules should be applied  # noqa: E501

        :param rest_of_world_tax: The rest_of_world_tax of this ContactTaxTreatment.  # noqa: E501
        :type: bool
        """

        self._rest_of_world_tax = rest_of_world_tax

    @property
    def is_importer(self):
        """Gets the is_importer of this ContactTaxTreatment.  # noqa: E501

        Indicates a contact where import rules should be appliedOnly used for suppliers and FR, ES, IE and UK businesses  # noqa: E501

        :return: The is_importer of this ContactTaxTreatment.  # noqa: E501
        :rtype: bool
        """
        return self._is_importer

    @is_importer.setter
    def is_importer(self, is_importer):
        """Sets the is_importer of this ContactTaxTreatment.

        Indicates a contact where import rules should be appliedOnly used for suppliers and FR, ES, IE and UK businesses  # noqa: E501

        :param is_importer: The is_importer of this ContactTaxTreatment.  # noqa: E501
        :type: bool
        """

        self._is_importer = is_importer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactTaxTreatment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContactTaxTreatment):
            return True

        return self.to_dict() != other.to_dict()
