# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class PutStockMovementsStockMovement(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'stock_item_id': 'str',
        'date': 'date',
        'quantity': 'float',
        'cost_price': 'float',
        'details': 'str',
        'movement_number': 'str',
        'reference': 'str'
    }

    attribute_map = {
        'stock_item_id': 'stock_item_id',
        'date': 'date',
        'quantity': 'quantity',
        'cost_price': 'cost_price',
        'details': 'details',
        'movement_number': 'movement_number',
        'reference': 'reference'
    }

    def __init__(self, stock_item_id=None, date=None, quantity=None, cost_price=None, details=None, movement_number=None, reference=None, local_vars_configuration=None):  # noqa: E501
        """PutStockMovementsStockMovement - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._stock_item_id = None
        self._date = None
        self._quantity = None
        self._cost_price = None
        self._details = None
        self._movement_number = None
        self._reference = None
        self.discriminator = None

        if stock_item_id is not None:
            self.stock_item_id = stock_item_id
        if date is not None:
            self.date = date
        if quantity is not None:
            self.quantity = quantity
        if cost_price is not None:
            self.cost_price = cost_price
        if details is not None:
            self.details = details
        if movement_number is not None:
            self.movement_number = movement_number
        if reference is not None:
            self.reference = reference

    @property
    def stock_item_id(self):
        """Gets the stock_item_id of this PutStockMovementsStockMovement.  # noqa: E501

        The stock item of the stock movement  # noqa: E501

        :return: The stock_item_id of this PutStockMovementsStockMovement.  # noqa: E501
        :rtype: str
        """
        return self._stock_item_id

    @stock_item_id.setter
    def stock_item_id(self, stock_item_id):
        """Sets the stock_item_id of this PutStockMovementsStockMovement.

        The stock item of the stock movement  # noqa: E501

        :param stock_item_id: The stock_item_id of this PutStockMovementsStockMovement.  # noqa: E501
        :type: str
        """

        self._stock_item_id = stock_item_id

    @property
    def date(self):
        """Gets the date of this PutStockMovementsStockMovement.  # noqa: E501

        The date the stock movement occurred  # noqa: E501

        :return: The date of this PutStockMovementsStockMovement.  # noqa: E501
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this PutStockMovementsStockMovement.

        The date the stock movement occurred  # noqa: E501

        :param date: The date of this PutStockMovementsStockMovement.  # noqa: E501
        :type: date
        """

        self._date = date

    @property
    def quantity(self):
        """Gets the quantity of this PutStockMovementsStockMovement.  # noqa: E501

        The quantity of the goods adjusted  # noqa: E501

        :return: The quantity of this PutStockMovementsStockMovement.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this PutStockMovementsStockMovement.

        The quantity of the goods adjusted  # noqa: E501

        :param quantity: The quantity of this PutStockMovementsStockMovement.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def cost_price(self):
        """Gets the cost_price of this PutStockMovementsStockMovement.  # noqa: E501

        The cost per unit of stock purchased  # noqa: E501

        :return: The cost_price of this PutStockMovementsStockMovement.  # noqa: E501
        :rtype: float
        """
        return self._cost_price

    @cost_price.setter
    def cost_price(self, cost_price):
        """Sets the cost_price of this PutStockMovementsStockMovement.

        The cost per unit of stock purchased  # noqa: E501

        :param cost_price: The cost_price of this PutStockMovementsStockMovement.  # noqa: E501
        :type: float
        """

        self._cost_price = cost_price

    @property
    def details(self):
        """Gets the details of this PutStockMovementsStockMovement.  # noqa: E501

        The transaction details of the stock movement  # noqa: E501

        :return: The details of this PutStockMovementsStockMovement.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this PutStockMovementsStockMovement.

        The transaction details of the stock movement  # noqa: E501

        :param details: The details of this PutStockMovementsStockMovement.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def movement_number(self):
        """Gets the movement_number of this PutStockMovementsStockMovement.  # noqa: E501

        The movement number of the stock movement  # noqa: E501

        :return: The movement_number of this PutStockMovementsStockMovement.  # noqa: E501
        :rtype: str
        """
        return self._movement_number

    @movement_number.setter
    def movement_number(self, movement_number):
        """Sets the movement_number of this PutStockMovementsStockMovement.

        The movement number of the stock movement  # noqa: E501

        :param movement_number: The movement_number of this PutStockMovementsStockMovement.  # noqa: E501
        :type: str
        """

        self._movement_number = movement_number

    @property
    def reference(self):
        """Gets the reference of this PutStockMovementsStockMovement.  # noqa: E501

        The reference of the stock movement  # noqa: E501

        :return: The reference of this PutStockMovementsStockMovement.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this PutStockMovementsStockMovement.

        The reference of the stock movement  # noqa: E501

        :param reference: The reference of this PutStockMovementsStockMovement.  # noqa: E501
        :type: str
        """

        self._reference = reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PutStockMovementsStockMovement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PutStockMovementsStockMovement):
            return True

        return self.to_dict() != other.to_dict()
