# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class PutInvoiceSettingsInvoiceSettingsPrintStatements(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'days_overdue': 'bool',
        'table_of_balances': 'bool'
    }

    attribute_map = {
        'days_overdue': 'days_overdue',
        'table_of_balances': 'table_of_balances'
    }

    def __init__(self, days_overdue=None, table_of_balances=None, local_vars_configuration=None):  # noqa: E501
        """PutInvoiceSettingsInvoiceSettingsPrintStatements - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._days_overdue = None
        self._table_of_balances = None
        self.discriminator = None

        if days_overdue is not None:
            self.days_overdue = days_overdue
        if table_of_balances is not None:
            self.table_of_balances = table_of_balances

    @property
    def days_overdue(self):
        """Gets the days_overdue of this PutInvoiceSettingsInvoiceSettingsPrintStatements.  # noqa: E501

        Indicates whether days of overdue are printed in the contact's statement  # noqa: E501

        :return: The days_overdue of this PutInvoiceSettingsInvoiceSettingsPrintStatements.  # noqa: E501
        :rtype: bool
        """
        return self._days_overdue

    @days_overdue.setter
    def days_overdue(self, days_overdue):
        """Sets the days_overdue of this PutInvoiceSettingsInvoiceSettingsPrintStatements.

        Indicates whether days of overdue are printed in the contact's statement  # noqa: E501

        :param days_overdue: The days_overdue of this PutInvoiceSettingsInvoiceSettingsPrintStatements.  # noqa: E501
        :type: bool
        """

        self._days_overdue = days_overdue

    @property
    def table_of_balances(self):
        """Gets the table_of_balances of this PutInvoiceSettingsInvoiceSettingsPrintStatements.  # noqa: E501

        Indicates whether table of balances is printed in the contact's statement  # noqa: E501

        :return: The table_of_balances of this PutInvoiceSettingsInvoiceSettingsPrintStatements.  # noqa: E501
        :rtype: bool
        """
        return self._table_of_balances

    @table_of_balances.setter
    def table_of_balances(self, table_of_balances):
        """Sets the table_of_balances of this PutInvoiceSettingsInvoiceSettingsPrintStatements.

        Indicates whether table of balances is printed in the contact's statement  # noqa: E501

        :param table_of_balances: The table_of_balances of this PutInvoiceSettingsInvoiceSettingsPrintStatements.  # noqa: E501
        :type: bool
        """

        self._table_of_balances = table_of_balances

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PutInvoiceSettingsInvoiceSettingsPrintStatements):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PutInvoiceSettingsInvoiceSettingsPrintStatements):
            return True

        return self.to_dict() != other.to_dict()
