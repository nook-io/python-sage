# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class PostBankReconciliationsBankReconciliation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bank_account_id': 'str',
        'statement_date': 'date',
        'statement_end_balance': 'float',
        'reference': 'str',
        'total_received': 'float',
        'total_paid': 'float',
        'starting_balance': 'float',
        'closing_balance': 'float',
        'reconciled_balance': 'float',
        'balance_difference': 'float',
        'status_id': 'str'
    }

    attribute_map = {
        'bank_account_id': 'bank_account_id',
        'statement_date': 'statement_date',
        'statement_end_balance': 'statement_end_balance',
        'reference': 'reference',
        'total_received': 'total_received',
        'total_paid': 'total_paid',
        'starting_balance': 'starting_balance',
        'closing_balance': 'closing_balance',
        'reconciled_balance': 'reconciled_balance',
        'balance_difference': 'balance_difference',
        'status_id': 'status_id'
    }

    def __init__(self, bank_account_id=None, statement_date=None, statement_end_balance=None, reference=None, total_received=None, total_paid=None, starting_balance=None, closing_balance=None, reconciled_balance=None, balance_difference=None, status_id=None, local_vars_configuration=None):  # noqa: E501
        """PostBankReconciliationsBankReconciliation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bank_account_id = None
        self._statement_date = None
        self._statement_end_balance = None
        self._reference = None
        self._total_received = None
        self._total_paid = None
        self._starting_balance = None
        self._closing_balance = None
        self._reconciled_balance = None
        self._balance_difference = None
        self._status_id = None
        self.discriminator = None

        self.bank_account_id = bank_account_id
        if statement_date is not None:
            self.statement_date = statement_date
        if statement_end_balance is not None:
            self.statement_end_balance = statement_end_balance
        if reference is not None:
            self.reference = reference
        if total_received is not None:
            self.total_received = total_received
        if total_paid is not None:
            self.total_paid = total_paid
        if starting_balance is not None:
            self.starting_balance = starting_balance
        if closing_balance is not None:
            self.closing_balance = closing_balance
        if reconciled_balance is not None:
            self.reconciled_balance = reconciled_balance
        if balance_difference is not None:
            self.balance_difference = balance_difference
        if status_id is not None:
            self.status_id = status_id

    @property
    def bank_account_id(self):
        """Gets the bank_account_id of this PostBankReconciliationsBankReconciliation.  # noqa: E501

        The bank account the reconciliation relates to  # noqa: E501

        :return: The bank_account_id of this PostBankReconciliationsBankReconciliation.  # noqa: E501
        :rtype: str
        """
        return self._bank_account_id

    @bank_account_id.setter
    def bank_account_id(self, bank_account_id):
        """Sets the bank_account_id of this PostBankReconciliationsBankReconciliation.

        The bank account the reconciliation relates to  # noqa: E501

        :param bank_account_id: The bank_account_id of this PostBankReconciliationsBankReconciliation.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and bank_account_id is None:  # noqa: E501
            raise ValueError("Invalid value for `bank_account_id`, must not be `None`")  # noqa: E501

        self._bank_account_id = bank_account_id

    @property
    def statement_date(self):
        """Gets the statement_date of this PostBankReconciliationsBankReconciliation.  # noqa: E501

        The date of the bank reconciliation  # noqa: E501

        :return: The statement_date of this PostBankReconciliationsBankReconciliation.  # noqa: E501
        :rtype: date
        """
        return self._statement_date

    @statement_date.setter
    def statement_date(self, statement_date):
        """Sets the statement_date of this PostBankReconciliationsBankReconciliation.

        The date of the bank reconciliation  # noqa: E501

        :param statement_date: The statement_date of this PostBankReconciliationsBankReconciliation.  # noqa: E501
        :type: date
        """

        self._statement_date = statement_date

    @property
    def statement_end_balance(self):
        """Gets the statement_end_balance of this PostBankReconciliationsBankReconciliation.  # noqa: E501

        The statement end balance for the reconciliation  # noqa: E501

        :return: The statement_end_balance of this PostBankReconciliationsBankReconciliation.  # noqa: E501
        :rtype: float
        """
        return self._statement_end_balance

    @statement_end_balance.setter
    def statement_end_balance(self, statement_end_balance):
        """Sets the statement_end_balance of this PostBankReconciliationsBankReconciliation.

        The statement end balance for the reconciliation  # noqa: E501

        :param statement_end_balance: The statement_end_balance of this PostBankReconciliationsBankReconciliation.  # noqa: E501
        :type: float
        """

        self._statement_end_balance = statement_end_balance

    @property
    def reference(self):
        """Gets the reference of this PostBankReconciliationsBankReconciliation.  # noqa: E501

        A reference for the bank reconciliation  # noqa: E501

        :return: The reference of this PostBankReconciliationsBankReconciliation.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this PostBankReconciliationsBankReconciliation.

        A reference for the bank reconciliation  # noqa: E501

        :param reference: The reference of this PostBankReconciliationsBankReconciliation.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def total_received(self):
        """Gets the total_received of this PostBankReconciliationsBankReconciliation.  # noqa: E501

        The total amount received  # noqa: E501

        :return: The total_received of this PostBankReconciliationsBankReconciliation.  # noqa: E501
        :rtype: float
        """
        return self._total_received

    @total_received.setter
    def total_received(self, total_received):
        """Sets the total_received of this PostBankReconciliationsBankReconciliation.

        The total amount received  # noqa: E501

        :param total_received: The total_received of this PostBankReconciliationsBankReconciliation.  # noqa: E501
        :type: float
        """

        self._total_received = total_received

    @property
    def total_paid(self):
        """Gets the total_paid of this PostBankReconciliationsBankReconciliation.  # noqa: E501

        The total amount paid  # noqa: E501

        :return: The total_paid of this PostBankReconciliationsBankReconciliation.  # noqa: E501
        :rtype: float
        """
        return self._total_paid

    @total_paid.setter
    def total_paid(self, total_paid):
        """Sets the total_paid of this PostBankReconciliationsBankReconciliation.

        The total amount paid  # noqa: E501

        :param total_paid: The total_paid of this PostBankReconciliationsBankReconciliation.  # noqa: E501
        :type: float
        """

        self._total_paid = total_paid

    @property
    def starting_balance(self):
        """Gets the starting_balance of this PostBankReconciliationsBankReconciliation.  # noqa: E501

        The starting balance of the bank reconciliation  # noqa: E501

        :return: The starting_balance of this PostBankReconciliationsBankReconciliation.  # noqa: E501
        :rtype: float
        """
        return self._starting_balance

    @starting_balance.setter
    def starting_balance(self, starting_balance):
        """Sets the starting_balance of this PostBankReconciliationsBankReconciliation.

        The starting balance of the bank reconciliation  # noqa: E501

        :param starting_balance: The starting_balance of this PostBankReconciliationsBankReconciliation.  # noqa: E501
        :type: float
        """

        self._starting_balance = starting_balance

    @property
    def closing_balance(self):
        """Gets the closing_balance of this PostBankReconciliationsBankReconciliation.  # noqa: E501

        The closing balance of the bank reconciliation  # noqa: E501

        :return: The closing_balance of this PostBankReconciliationsBankReconciliation.  # noqa: E501
        :rtype: float
        """
        return self._closing_balance

    @closing_balance.setter
    def closing_balance(self, closing_balance):
        """Sets the closing_balance of this PostBankReconciliationsBankReconciliation.

        The closing balance of the bank reconciliation  # noqa: E501

        :param closing_balance: The closing_balance of this PostBankReconciliationsBankReconciliation.  # noqa: E501
        :type: float
        """

        self._closing_balance = closing_balance

    @property
    def reconciled_balance(self):
        """Gets the reconciled_balance of this PostBankReconciliationsBankReconciliation.  # noqa: E501

        The reconciled balance of the bank reconciliation  # noqa: E501

        :return: The reconciled_balance of this PostBankReconciliationsBankReconciliation.  # noqa: E501
        :rtype: float
        """
        return self._reconciled_balance

    @reconciled_balance.setter
    def reconciled_balance(self, reconciled_balance):
        """Sets the reconciled_balance of this PostBankReconciliationsBankReconciliation.

        The reconciled balance of the bank reconciliation  # noqa: E501

        :param reconciled_balance: The reconciled_balance of this PostBankReconciliationsBankReconciliation.  # noqa: E501
        :type: float
        """

        self._reconciled_balance = reconciled_balance

    @property
    def balance_difference(self):
        """Gets the balance_difference of this PostBankReconciliationsBankReconciliation.  # noqa: E501

        The difference between the statement end balance and the reconciled balance  # noqa: E501

        :return: The balance_difference of this PostBankReconciliationsBankReconciliation.  # noqa: E501
        :rtype: float
        """
        return self._balance_difference

    @balance_difference.setter
    def balance_difference(self, balance_difference):
        """Sets the balance_difference of this PostBankReconciliationsBankReconciliation.

        The difference between the statement end balance and the reconciled balance  # noqa: E501

        :param balance_difference: The balance_difference of this PostBankReconciliationsBankReconciliation.  # noqa: E501
        :type: float
        """

        self._balance_difference = balance_difference

    @property
    def status_id(self):
        """Gets the status_id of this PostBankReconciliationsBankReconciliation.  # noqa: E501

        The ID of the Status.  # noqa: E501

        :return: The status_id of this PostBankReconciliationsBankReconciliation.  # noqa: E501
        :rtype: str
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """Sets the status_id of this PostBankReconciliationsBankReconciliation.

        The ID of the Status.  # noqa: E501

        :param status_id: The status_id of this PostBankReconciliationsBankReconciliation.  # noqa: E501
        :type: str
        """

        self._status_id = status_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostBankReconciliationsBankReconciliation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PostBankReconciliationsBankReconciliation):
            return True

        return self.to_dict() != other.to_dict()
