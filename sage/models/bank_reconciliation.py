# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class BankReconciliation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'displayed_as': 'str',
        'path': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'bank_account': 'Base',
        'statement_date': 'date',
        'statement_end_balance': 'float',
        'reference': 'str',
        'total_received': 'float',
        'total_paid': 'float',
        'starting_balance': 'float',
        'closing_balance': 'float',
        'reconciled_balance': 'float',
        'balance_difference': 'float',
        'status': 'BankReconciliationStatus'
    }

    attribute_map = {
        'id': 'id',
        'displayed_as': 'displayed_as',
        'path': '$path',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'bank_account': 'bank_account',
        'statement_date': 'statement_date',
        'statement_end_balance': 'statement_end_balance',
        'reference': 'reference',
        'total_received': 'total_received',
        'total_paid': 'total_paid',
        'starting_balance': 'starting_balance',
        'closing_balance': 'closing_balance',
        'reconciled_balance': 'reconciled_balance',
        'balance_difference': 'balance_difference',
        'status': 'status'
    }

    def __init__(self, id=None, displayed_as=None, path=None, created_at=None, updated_at=None, bank_account=None, statement_date=None, statement_end_balance=None, reference=None, total_received=None, total_paid=None, starting_balance=None, closing_balance=None, reconciled_balance=None, balance_difference=None, status=None, local_vars_configuration=None):  # noqa: E501
        """BankReconciliation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._displayed_as = None
        self._path = None
        self._created_at = None
        self._updated_at = None
        self._bank_account = None
        self._statement_date = None
        self._statement_end_balance = None
        self._reference = None
        self._total_received = None
        self._total_paid = None
        self._starting_balance = None
        self._closing_balance = None
        self._reconciled_balance = None
        self._balance_difference = None
        self._status = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if displayed_as is not None:
            self.displayed_as = displayed_as
        if path is not None:
            self.path = path
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if bank_account is not None:
            self.bank_account = bank_account
        if statement_date is not None:
            self.statement_date = statement_date
        if statement_end_balance is not None:
            self.statement_end_balance = statement_end_balance
        if reference is not None:
            self.reference = reference
        if total_received is not None:
            self.total_received = total_received
        if total_paid is not None:
            self.total_paid = total_paid
        if starting_balance is not None:
            self.starting_balance = starting_balance
        if closing_balance is not None:
            self.closing_balance = closing_balance
        if reconciled_balance is not None:
            self.reconciled_balance = reconciled_balance
        if balance_difference is not None:
            self.balance_difference = balance_difference
        if status is not None:
            self.status = status

    @property
    def id(self):
        """Gets the id of this BankReconciliation.  # noqa: E501

        The unique identifier for the item  # noqa: E501

        :return: The id of this BankReconciliation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BankReconciliation.

        The unique identifier for the item  # noqa: E501

        :param id: The id of this BankReconciliation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def displayed_as(self):
        """Gets the displayed_as of this BankReconciliation.  # noqa: E501

        The name of the resource  # noqa: E501

        :return: The displayed_as of this BankReconciliation.  # noqa: E501
        :rtype: str
        """
        return self._displayed_as

    @displayed_as.setter
    def displayed_as(self, displayed_as):
        """Sets the displayed_as of this BankReconciliation.

        The name of the resource  # noqa: E501

        :param displayed_as: The displayed_as of this BankReconciliation.  # noqa: E501
        :type: str
        """

        self._displayed_as = displayed_as

    @property
    def path(self):
        """Gets the path of this BankReconciliation.  # noqa: E501

        The API path for the resource  # noqa: E501

        :return: The path of this BankReconciliation.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this BankReconciliation.

        The API path for the resource  # noqa: E501

        :param path: The path of this BankReconciliation.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def created_at(self):
        """Gets the created_at of this BankReconciliation.  # noqa: E501

        The datetime when the item was created  # noqa: E501

        :return: The created_at of this BankReconciliation.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BankReconciliation.

        The datetime when the item was created  # noqa: E501

        :param created_at: The created_at of this BankReconciliation.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this BankReconciliation.  # noqa: E501

        The datetime when the item was last updated  # noqa: E501

        :return: The updated_at of this BankReconciliation.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this BankReconciliation.

        The datetime when the item was last updated  # noqa: E501

        :param updated_at: The updated_at of this BankReconciliation.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def bank_account(self):
        """Gets the bank_account of this BankReconciliation.  # noqa: E501


        :return: The bank_account of this BankReconciliation.  # noqa: E501
        :rtype: Base
        """
        return self._bank_account

    @bank_account.setter
    def bank_account(self, bank_account):
        """Sets the bank_account of this BankReconciliation.


        :param bank_account: The bank_account of this BankReconciliation.  # noqa: E501
        :type: Base
        """

        self._bank_account = bank_account

    @property
    def statement_date(self):
        """Gets the statement_date of this BankReconciliation.  # noqa: E501

        The date of the bank reconciliation  # noqa: E501

        :return: The statement_date of this BankReconciliation.  # noqa: E501
        :rtype: date
        """
        return self._statement_date

    @statement_date.setter
    def statement_date(self, statement_date):
        """Sets the statement_date of this BankReconciliation.

        The date of the bank reconciliation  # noqa: E501

        :param statement_date: The statement_date of this BankReconciliation.  # noqa: E501
        :type: date
        """

        self._statement_date = statement_date

    @property
    def statement_end_balance(self):
        """Gets the statement_end_balance of this BankReconciliation.  # noqa: E501

        The statement end balance for the reconciliation  # noqa: E501

        :return: The statement_end_balance of this BankReconciliation.  # noqa: E501
        :rtype: float
        """
        return self._statement_end_balance

    @statement_end_balance.setter
    def statement_end_balance(self, statement_end_balance):
        """Sets the statement_end_balance of this BankReconciliation.

        The statement end balance for the reconciliation  # noqa: E501

        :param statement_end_balance: The statement_end_balance of this BankReconciliation.  # noqa: E501
        :type: float
        """

        self._statement_end_balance = statement_end_balance

    @property
    def reference(self):
        """Gets the reference of this BankReconciliation.  # noqa: E501

        A reference for the bank reconciliation  # noqa: E501

        :return: The reference of this BankReconciliation.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this BankReconciliation.

        A reference for the bank reconciliation  # noqa: E501

        :param reference: The reference of this BankReconciliation.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                reference is not None and len(reference) > 255):
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `255`")  # noqa: E501

        self._reference = reference

    @property
    def total_received(self):
        """Gets the total_received of this BankReconciliation.  # noqa: E501

        The total amount received  # noqa: E501

        :return: The total_received of this BankReconciliation.  # noqa: E501
        :rtype: float
        """
        return self._total_received

    @total_received.setter
    def total_received(self, total_received):
        """Sets the total_received of this BankReconciliation.

        The total amount received  # noqa: E501

        :param total_received: The total_received of this BankReconciliation.  # noqa: E501
        :type: float
        """

        self._total_received = total_received

    @property
    def total_paid(self):
        """Gets the total_paid of this BankReconciliation.  # noqa: E501

        The total amount paid  # noqa: E501

        :return: The total_paid of this BankReconciliation.  # noqa: E501
        :rtype: float
        """
        return self._total_paid

    @total_paid.setter
    def total_paid(self, total_paid):
        """Sets the total_paid of this BankReconciliation.

        The total amount paid  # noqa: E501

        :param total_paid: The total_paid of this BankReconciliation.  # noqa: E501
        :type: float
        """

        self._total_paid = total_paid

    @property
    def starting_balance(self):
        """Gets the starting_balance of this BankReconciliation.  # noqa: E501

        The starting balance of the bank reconciliation  # noqa: E501

        :return: The starting_balance of this BankReconciliation.  # noqa: E501
        :rtype: float
        """
        return self._starting_balance

    @starting_balance.setter
    def starting_balance(self, starting_balance):
        """Sets the starting_balance of this BankReconciliation.

        The starting balance of the bank reconciliation  # noqa: E501

        :param starting_balance: The starting_balance of this BankReconciliation.  # noqa: E501
        :type: float
        """

        self._starting_balance = starting_balance

    @property
    def closing_balance(self):
        """Gets the closing_balance of this BankReconciliation.  # noqa: E501

        The closing balance of the bank reconciliation  # noqa: E501

        :return: The closing_balance of this BankReconciliation.  # noqa: E501
        :rtype: float
        """
        return self._closing_balance

    @closing_balance.setter
    def closing_balance(self, closing_balance):
        """Sets the closing_balance of this BankReconciliation.

        The closing balance of the bank reconciliation  # noqa: E501

        :param closing_balance: The closing_balance of this BankReconciliation.  # noqa: E501
        :type: float
        """

        self._closing_balance = closing_balance

    @property
    def reconciled_balance(self):
        """Gets the reconciled_balance of this BankReconciliation.  # noqa: E501

        The reconciled balance of the bank reconciliation  # noqa: E501

        :return: The reconciled_balance of this BankReconciliation.  # noqa: E501
        :rtype: float
        """
        return self._reconciled_balance

    @reconciled_balance.setter
    def reconciled_balance(self, reconciled_balance):
        """Sets the reconciled_balance of this BankReconciliation.

        The reconciled balance of the bank reconciliation  # noqa: E501

        :param reconciled_balance: The reconciled_balance of this BankReconciliation.  # noqa: E501
        :type: float
        """

        self._reconciled_balance = reconciled_balance

    @property
    def balance_difference(self):
        """Gets the balance_difference of this BankReconciliation.  # noqa: E501

        The difference between the statement end balance and the reconciled balance  # noqa: E501

        :return: The balance_difference of this BankReconciliation.  # noqa: E501
        :rtype: float
        """
        return self._balance_difference

    @balance_difference.setter
    def balance_difference(self, balance_difference):
        """Sets the balance_difference of this BankReconciliation.

        The difference between the statement end balance and the reconciled balance  # noqa: E501

        :param balance_difference: The balance_difference of this BankReconciliation.  # noqa: E501
        :type: float
        """

        self._balance_difference = balance_difference

    @property
    def status(self):
        """Gets the status of this BankReconciliation.  # noqa: E501


        :return: The status of this BankReconciliation.  # noqa: E501
        :rtype: BankReconciliationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BankReconciliation.


        :param status: The status of this BankReconciliation.  # noqa: E501
        :type: BankReconciliationStatus
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankReconciliation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BankReconciliation):
            return True

        return self.to_dict() != other.to_dict()
