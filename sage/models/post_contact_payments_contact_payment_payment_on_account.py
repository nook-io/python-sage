# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class PostContactPaymentsContactPaymentPaymentOnAccount(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'contact_name': 'str',
        'contact_reference': 'str',
        'contact_id': 'str',
        'date': 'date',
        'reference': 'str',
        'net_amount': 'float',
        'tax_amount': 'float',
        'total_amount': 'float',
        'outstanding_amount': 'float',
        'currency_id': 'str',
        'exchange_rate': 'float',
        'base_currency_net_amount': 'float',
        'base_currency_tax_amount': 'float',
        'base_currency_total_amount': 'float',
        'base_currency_outstanding_amount': 'float',
        'status_id': 'str'
    }

    attribute_map = {
        'contact_name': 'contact_name',
        'contact_reference': 'contact_reference',
        'contact_id': 'contact_id',
        'date': 'date',
        'reference': 'reference',
        'net_amount': 'net_amount',
        'tax_amount': 'tax_amount',
        'total_amount': 'total_amount',
        'outstanding_amount': 'outstanding_amount',
        'currency_id': 'currency_id',
        'exchange_rate': 'exchange_rate',
        'base_currency_net_amount': 'base_currency_net_amount',
        'base_currency_tax_amount': 'base_currency_tax_amount',
        'base_currency_total_amount': 'base_currency_total_amount',
        'base_currency_outstanding_amount': 'base_currency_outstanding_amount',
        'status_id': 'status_id'
    }

    def __init__(self, contact_name=None, contact_reference=None, contact_id=None, date=None, reference=None, net_amount=None, tax_amount=None, total_amount=None, outstanding_amount=None, currency_id=None, exchange_rate=None, base_currency_net_amount=None, base_currency_tax_amount=None, base_currency_total_amount=None, base_currency_outstanding_amount=None, status_id=None, local_vars_configuration=None):  # noqa: E501
        """PostContactPaymentsContactPaymentPaymentOnAccount - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._contact_name = None
        self._contact_reference = None
        self._contact_id = None
        self._date = None
        self._reference = None
        self._net_amount = None
        self._tax_amount = None
        self._total_amount = None
        self._outstanding_amount = None
        self._currency_id = None
        self._exchange_rate = None
        self._base_currency_net_amount = None
        self._base_currency_tax_amount = None
        self._base_currency_total_amount = None
        self._base_currency_outstanding_amount = None
        self._status_id = None
        self.discriminator = None

        if contact_name is not None:
            self.contact_name = contact_name
        if contact_reference is not None:
            self.contact_reference = contact_reference
        if contact_id is not None:
            self.contact_id = contact_id
        if date is not None:
            self.date = date
        if reference is not None:
            self.reference = reference
        if net_amount is not None:
            self.net_amount = net_amount
        if tax_amount is not None:
            self.tax_amount = tax_amount
        if total_amount is not None:
            self.total_amount = total_amount
        if outstanding_amount is not None:
            self.outstanding_amount = outstanding_amount
        if currency_id is not None:
            self.currency_id = currency_id
        if exchange_rate is not None:
            self.exchange_rate = exchange_rate
        if base_currency_net_amount is not None:
            self.base_currency_net_amount = base_currency_net_amount
        if base_currency_tax_amount is not None:
            self.base_currency_tax_amount = base_currency_tax_amount
        if base_currency_total_amount is not None:
            self.base_currency_total_amount = base_currency_total_amount
        if base_currency_outstanding_amount is not None:
            self.base_currency_outstanding_amount = base_currency_outstanding_amount
        if status_id is not None:
            self.status_id = status_id

    @property
    def contact_name(self):
        """Gets the contact_name of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501

        The name of the contact when the payment on account was created  # noqa: E501

        :return: The contact_name of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """Sets the contact_name of this PostContactPaymentsContactPaymentPaymentOnAccount.

        The name of the contact when the payment on account was created  # noqa: E501

        :param contact_name: The contact_name of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501
        :type: str
        """

        self._contact_name = contact_name

    @property
    def contact_reference(self):
        """Gets the contact_reference of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501

        The reference of the contact when the payment on account was created  # noqa: E501

        :return: The contact_reference of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501
        :rtype: str
        """
        return self._contact_reference

    @contact_reference.setter
    def contact_reference(self, contact_reference):
        """Sets the contact_reference of this PostContactPaymentsContactPaymentPaymentOnAccount.

        The reference of the contact when the payment on account was created  # noqa: E501

        :param contact_reference: The contact_reference of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501
        :type: str
        """

        self._contact_reference = contact_reference

    @property
    def contact_id(self):
        """Gets the contact_id of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501

        The ID of the Contact.  # noqa: E501

        :return: The contact_id of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501
        :rtype: str
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this PostContactPaymentsContactPaymentPaymentOnAccount.

        The ID of the Contact.  # noqa: E501

        :param contact_id: The contact_id of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501
        :type: str
        """

        self._contact_id = contact_id

    @property
    def date(self):
        """Gets the date of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501

        The date of the payment on account  # noqa: E501

        :return: The date of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this PostContactPaymentsContactPaymentPaymentOnAccount.

        The date of the payment on account  # noqa: E501

        :param date: The date of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501
        :type: date
        """

        self._date = date

    @property
    def reference(self):
        """Gets the reference of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501

        The reference for the payment on account  # noqa: E501

        :return: The reference of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this PostContactPaymentsContactPaymentPaymentOnAccount.

        The reference for the payment on account  # noqa: E501

        :param reference: The reference of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def net_amount(self):
        """Gets the net_amount of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501

        The net amount of the payment on account  # noqa: E501

        :return: The net_amount of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501
        :rtype: float
        """
        return self._net_amount

    @net_amount.setter
    def net_amount(self, net_amount):
        """Sets the net_amount of this PostContactPaymentsContactPaymentPaymentOnAccount.

        The net amount of the payment on account  # noqa: E501

        :param net_amount: The net_amount of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501
        :type: float
        """

        self._net_amount = net_amount

    @property
    def tax_amount(self):
        """Gets the tax_amount of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501

        The tax amount of the payment on account  # noqa: E501

        :return: The tax_amount of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this PostContactPaymentsContactPaymentPaymentOnAccount.

        The tax amount of the payment on account  # noqa: E501

        :param tax_amount: The tax_amount of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501
        :type: float
        """

        self._tax_amount = tax_amount

    @property
    def total_amount(self):
        """Gets the total_amount of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501

        The total amount of the payment on account  # noqa: E501

        :return: The total_amount of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this PostContactPaymentsContactPaymentPaymentOnAccount.

        The total amount of the payment on account  # noqa: E501

        :param total_amount: The total_amount of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501
        :type: float
        """

        self._total_amount = total_amount

    @property
    def outstanding_amount(self):
        """Gets the outstanding_amount of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501

        The outstanding amount of the payment on account  # noqa: E501

        :return: The outstanding_amount of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501
        :rtype: float
        """
        return self._outstanding_amount

    @outstanding_amount.setter
    def outstanding_amount(self, outstanding_amount):
        """Sets the outstanding_amount of this PostContactPaymentsContactPaymentPaymentOnAccount.

        The outstanding amount of the payment on account  # noqa: E501

        :param outstanding_amount: The outstanding_amount of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501
        :type: float
        """

        self._outstanding_amount = outstanding_amount

    @property
    def currency_id(self):
        """Gets the currency_id of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501

        The ID of the Currency.  # noqa: E501

        :return: The currency_id of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501
        :rtype: str
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """Sets the currency_id of this PostContactPaymentsContactPaymentPaymentOnAccount.

        The ID of the Currency.  # noqa: E501

        :param currency_id: The currency_id of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501
        :type: str
        """

        self._currency_id = currency_id

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501

        The exchange rate for the payment on account  # noqa: E501

        :return: The exchange_rate of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501
        :rtype: float
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this PostContactPaymentsContactPaymentPaymentOnAccount.

        The exchange rate for the payment on account  # noqa: E501

        :param exchange_rate: The exchange_rate of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501
        :type: float
        """

        self._exchange_rate = exchange_rate

    @property
    def base_currency_net_amount(self):
        """Gets the base_currency_net_amount of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501

        The net amount of the payment on account in base currency  # noqa: E501

        :return: The base_currency_net_amount of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_net_amount

    @base_currency_net_amount.setter
    def base_currency_net_amount(self, base_currency_net_amount):
        """Sets the base_currency_net_amount of this PostContactPaymentsContactPaymentPaymentOnAccount.

        The net amount of the payment on account in base currency  # noqa: E501

        :param base_currency_net_amount: The base_currency_net_amount of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501
        :type: float
        """

        self._base_currency_net_amount = base_currency_net_amount

    @property
    def base_currency_tax_amount(self):
        """Gets the base_currency_tax_amount of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501

        The tax amount of the payment on account in base currency  # noqa: E501

        :return: The base_currency_tax_amount of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_tax_amount

    @base_currency_tax_amount.setter
    def base_currency_tax_amount(self, base_currency_tax_amount):
        """Sets the base_currency_tax_amount of this PostContactPaymentsContactPaymentPaymentOnAccount.

        The tax amount of the payment on account in base currency  # noqa: E501

        :param base_currency_tax_amount: The base_currency_tax_amount of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501
        :type: float
        """

        self._base_currency_tax_amount = base_currency_tax_amount

    @property
    def base_currency_total_amount(self):
        """Gets the base_currency_total_amount of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501

        The total amount of the payment on account in base currency  # noqa: E501

        :return: The base_currency_total_amount of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_total_amount

    @base_currency_total_amount.setter
    def base_currency_total_amount(self, base_currency_total_amount):
        """Sets the base_currency_total_amount of this PostContactPaymentsContactPaymentPaymentOnAccount.

        The total amount of the payment on account in base currency  # noqa: E501

        :param base_currency_total_amount: The base_currency_total_amount of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501
        :type: float
        """

        self._base_currency_total_amount = base_currency_total_amount

    @property
    def base_currency_outstanding_amount(self):
        """Gets the base_currency_outstanding_amount of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501

        The outstanding amount of the payment on account in base currency  # noqa: E501

        :return: The base_currency_outstanding_amount of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_outstanding_amount

    @base_currency_outstanding_amount.setter
    def base_currency_outstanding_amount(self, base_currency_outstanding_amount):
        """Sets the base_currency_outstanding_amount of this PostContactPaymentsContactPaymentPaymentOnAccount.

        The outstanding amount of the payment on account in base currency  # noqa: E501

        :param base_currency_outstanding_amount: The base_currency_outstanding_amount of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501
        :type: float
        """

        self._base_currency_outstanding_amount = base_currency_outstanding_amount

    @property
    def status_id(self):
        """Gets the status_id of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501

        The ID of the Status.  # noqa: E501

        :return: The status_id of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501
        :rtype: str
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """Sets the status_id of this PostContactPaymentsContactPaymentPaymentOnAccount.

        The ID of the Status.  # noqa: E501

        :param status_id: The status_id of this PostContactPaymentsContactPaymentPaymentOnAccount.  # noqa: E501
        :type: str
        """

        self._status_id = status_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostContactPaymentsContactPaymentPaymentOnAccount):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PostContactPaymentsContactPaymentPaymentOnAccount):
            return True

        return self.to_dict() != other.to_dict()
