# coding: utf-8

"""
    Sage Business Cloud Accounting - Accounts

    Documentation of the Sage Business Cloud Accounting API.  # noqa: E501

    The version of the OpenAPI document: 3.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sage.configuration import Configuration


class BusinessSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'path': 'str',
        'siret': 'str',
        'management_centre_member': 'bool',
        'rcs_number': 'str',
        'share_capital': 'float',
        'business_activity_type': 'BusinessActivityType',
        'legal_form_type': 'LegalFormType',
        'auxiliary_accounts_visible': 'bool',
        'default_ledger_accounts': 'DefaultLedgerAccounts',
        'business_type': 'BusinessType',
        'country_of_registration': 'Base',
        'business_created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'path': '$path',
        'siret': 'siret',
        'management_centre_member': 'management_centre_member',
        'rcs_number': 'rcs_number',
        'share_capital': 'share_capital',
        'business_activity_type': 'business_activity_type',
        'legal_form_type': 'legal_form_type',
        'auxiliary_accounts_visible': 'auxiliary_accounts_visible',
        'default_ledger_accounts': 'default_ledger_accounts',
        'business_type': 'business_type',
        'country_of_registration': 'country_of_registration',
        'business_created_at': 'business_created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, path=None, siret=None, management_centre_member=None, rcs_number=None, share_capital=None, business_activity_type=None, legal_form_type=None, auxiliary_accounts_visible=None, default_ledger_accounts=None, business_type=None, country_of_registration=None, business_created_at=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """BusinessSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._path = None
        self._siret = None
        self._management_centre_member = None
        self._rcs_number = None
        self._share_capital = None
        self._business_activity_type = None
        self._legal_form_type = None
        self._auxiliary_accounts_visible = None
        self._default_ledger_accounts = None
        self._business_type = None
        self._country_of_registration = None
        self._business_created_at = None
        self._updated_at = None
        self.discriminator = None

        if path is not None:
            self.path = path
        if siret is not None:
            self.siret = siret
        if management_centre_member is not None:
            self.management_centre_member = management_centre_member
        if rcs_number is not None:
            self.rcs_number = rcs_number
        if share_capital is not None:
            self.share_capital = share_capital
        if business_activity_type is not None:
            self.business_activity_type = business_activity_type
        if legal_form_type is not None:
            self.legal_form_type = legal_form_type
        if auxiliary_accounts_visible is not None:
            self.auxiliary_accounts_visible = auxiliary_accounts_visible
        if default_ledger_accounts is not None:
            self.default_ledger_accounts = default_ledger_accounts
        if business_type is not None:
            self.business_type = business_type
        if country_of_registration is not None:
            self.country_of_registration = country_of_registration
        if business_created_at is not None:
            self.business_created_at = business_created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def path(self):
        """Gets the path of this BusinessSettings.  # noqa: E501

        The path for the resource  # noqa: E501

        :return: The path of this BusinessSettings.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this BusinessSettings.

        The path for the resource  # noqa: E501

        :param path: The path of this BusinessSettings.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def siret(self):
        """Gets the siret of this BusinessSettings.  # noqa: E501

        SIRET Number (France only)  # noqa: E501

        :return: The siret of this BusinessSettings.  # noqa: E501
        :rtype: str
        """
        return self._siret

    @siret.setter
    def siret(self, siret):
        """Sets the siret of this BusinessSettings.

        SIRET Number (France only)  # noqa: E501

        :param siret: The siret of this BusinessSettings.  # noqa: E501
        :type: str
        """

        self._siret = siret

    @property
    def management_centre_member(self):
        """Gets the management_centre_member of this BusinessSettings.  # noqa: E501

        Member of Approved Management Centres (France only)  # noqa: E501

        :return: The management_centre_member of this BusinessSettings.  # noqa: E501
        :rtype: bool
        """
        return self._management_centre_member

    @management_centre_member.setter
    def management_centre_member(self, management_centre_member):
        """Sets the management_centre_member of this BusinessSettings.

        Member of Approved Management Centres (France only)  # noqa: E501

        :param management_centre_member: The management_centre_member of this BusinessSettings.  # noqa: E501
        :type: bool
        """

        self._management_centre_member = management_centre_member

    @property
    def rcs_number(self):
        """Gets the rcs_number of this BusinessSettings.  # noqa: E501

        RCS Number (France only)  # noqa: E501

        :return: The rcs_number of this BusinessSettings.  # noqa: E501
        :rtype: str
        """
        return self._rcs_number

    @rcs_number.setter
    def rcs_number(self, rcs_number):
        """Sets the rcs_number of this BusinessSettings.

        RCS Number (France only)  # noqa: E501

        :param rcs_number: The rcs_number of this BusinessSettings.  # noqa: E501
        :type: str
        """

        self._rcs_number = rcs_number

    @property
    def share_capital(self):
        """Gets the share_capital of this BusinessSettings.  # noqa: E501

        Share Capital (France only)  # noqa: E501

        :return: The share_capital of this BusinessSettings.  # noqa: E501
        :rtype: float
        """
        return self._share_capital

    @share_capital.setter
    def share_capital(self, share_capital):
        """Sets the share_capital of this BusinessSettings.

        Share Capital (France only)  # noqa: E501

        :param share_capital: The share_capital of this BusinessSettings.  # noqa: E501
        :type: float
        """

        self._share_capital = share_capital

    @property
    def business_activity_type(self):
        """Gets the business_activity_type of this BusinessSettings.  # noqa: E501


        :return: The business_activity_type of this BusinessSettings.  # noqa: E501
        :rtype: BusinessActivityType
        """
        return self._business_activity_type

    @business_activity_type.setter
    def business_activity_type(self, business_activity_type):
        """Sets the business_activity_type of this BusinessSettings.


        :param business_activity_type: The business_activity_type of this BusinessSettings.  # noqa: E501
        :type: BusinessActivityType
        """

        self._business_activity_type = business_activity_type

    @property
    def legal_form_type(self):
        """Gets the legal_form_type of this BusinessSettings.  # noqa: E501


        :return: The legal_form_type of this BusinessSettings.  # noqa: E501
        :rtype: LegalFormType
        """
        return self._legal_form_type

    @legal_form_type.setter
    def legal_form_type(self, legal_form_type):
        """Sets the legal_form_type of this BusinessSettings.


        :param legal_form_type: The legal_form_type of this BusinessSettings.  # noqa: E501
        :type: LegalFormType
        """

        self._legal_form_type = legal_form_type

    @property
    def auxiliary_accounts_visible(self):
        """Gets the auxiliary_accounts_visible of this BusinessSettings.  # noqa: E501

        Auxiliary Accounts Visible (France & Spain only)  # noqa: E501

        :return: The auxiliary_accounts_visible of this BusinessSettings.  # noqa: E501
        :rtype: bool
        """
        return self._auxiliary_accounts_visible

    @auxiliary_accounts_visible.setter
    def auxiliary_accounts_visible(self, auxiliary_accounts_visible):
        """Sets the auxiliary_accounts_visible of this BusinessSettings.

        Auxiliary Accounts Visible (France & Spain only)  # noqa: E501

        :param auxiliary_accounts_visible: The auxiliary_accounts_visible of this BusinessSettings.  # noqa: E501
        :type: bool
        """

        self._auxiliary_accounts_visible = auxiliary_accounts_visible

    @property
    def default_ledger_accounts(self):
        """Gets the default_ledger_accounts of this BusinessSettings.  # noqa: E501


        :return: The default_ledger_accounts of this BusinessSettings.  # noqa: E501
        :rtype: DefaultLedgerAccounts
        """
        return self._default_ledger_accounts

    @default_ledger_accounts.setter
    def default_ledger_accounts(self, default_ledger_accounts):
        """Sets the default_ledger_accounts of this BusinessSettings.


        :param default_ledger_accounts: The default_ledger_accounts of this BusinessSettings.  # noqa: E501
        :type: DefaultLedgerAccounts
        """

        self._default_ledger_accounts = default_ledger_accounts

    @property
    def business_type(self):
        """Gets the business_type of this BusinessSettings.  # noqa: E501


        :return: The business_type of this BusinessSettings.  # noqa: E501
        :rtype: BusinessType
        """
        return self._business_type

    @business_type.setter
    def business_type(self, business_type):
        """Sets the business_type of this BusinessSettings.


        :param business_type: The business_type of this BusinessSettings.  # noqa: E501
        :type: BusinessType
        """

        self._business_type = business_type

    @property
    def country_of_registration(self):
        """Gets the country_of_registration of this BusinessSettings.  # noqa: E501


        :return: The country_of_registration of this BusinessSettings.  # noqa: E501
        :rtype: Base
        """
        return self._country_of_registration

    @country_of_registration.setter
    def country_of_registration(self, country_of_registration):
        """Sets the country_of_registration of this BusinessSettings.


        :param country_of_registration: The country_of_registration of this BusinessSettings.  # noqa: E501
        :type: Base
        """

        self._country_of_registration = country_of_registration

    @property
    def business_created_at(self):
        """Gets the business_created_at of this BusinessSettings.  # noqa: E501

        The timestamp on which the business was created. This can be the timestamp of the initial creation or the latest business reset.  # noqa: E501

        :return: The business_created_at of this BusinessSettings.  # noqa: E501
        :rtype: datetime
        """
        return self._business_created_at

    @business_created_at.setter
    def business_created_at(self, business_created_at):
        """Sets the business_created_at of this BusinessSettings.

        The timestamp on which the business was created. This can be the timestamp of the initial creation or the latest business reset.  # noqa: E501

        :param business_created_at: The business_created_at of this BusinessSettings.  # noqa: E501
        :type: datetime
        """

        self._business_created_at = business_created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this BusinessSettings.  # noqa: E501

        The datetime when the item was last updated  # noqa: E501

        :return: The updated_at of this BusinessSettings.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this BusinessSettings.

        The datetime when the item was last updated  # noqa: E501

        :param updated_at: The updated_at of this BusinessSettings.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BusinessSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BusinessSettings):
            return True

        return self.to_dict() != other.to_dict()
